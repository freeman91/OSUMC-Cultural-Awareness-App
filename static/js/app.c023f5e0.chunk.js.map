{"version":3,"sources":["frontend/assets/admin_login.png","frontend/constants.ts","frontend/api/api.ts","frontend/api/admin.ts","frontend/api/culture.ts","frontend/api/ledger.ts","frontend/views/Culture.tsx","frontend/redux/UserAction.tsx","frontend/views/Login.tsx","frontend/views/Home.tsx","frontend/views/EditInsight.tsx","frontend/redux/UserReducer.tsx","frontend/App.tsx"],"names":["module","exports","API_URL","Theme","DefaultTheme","colors","primary","accent","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","undefined","Admin","name","email","superUser","password","passwordConfirmation","put","this","password_confirmation","getAuth","post","delete","Culture","generalInsights","specializedInsights","general_insights","specialized_insights","data","get","compress","a","async","info","Pako","to","list","AsyncStorage","getItem","Map","parse","cultures","add","culture","setItem","toString","updatedCultures","forEach","modified","has","storedData","removeItem","Ledger","Tab","createMaterialTopTabNavigator","Styles","StyleSheet","create","spinner","top","position","fab","card","padding","marginVertical","marginHorizontal","editInput","width","specialAddInsight","ExampleInsight","summary","information","source","type","Insights","props","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","size","style","refresh","SafeAreaView","FlatList","keyExtractor","_","index","EditFAB","FAB","Group","icon","open","onPress","visible","actions","onStateChange","ToolsFAB","setOpen","onAdd","onSave","InsightCard","insight","editing","Card","Content","Title","Paragraph","Actions","IconButton","onDelete","connect","state","ownProps","user","navigation","route","cultureName","params","setCulture","setEditing","err","setErr","showErr","setShowErr","useRoute","useEffect","setOptions","title","fetchCulture","setCultureInPlace","newCulture","read","console","error","navigate","hideSnackbar","specInsights","ret","key","push","text","specializedToArray","deleteInsight","Array","i","splice","length","InsightCardView","View","Navigator","initialRouteName","Screen","row","item","Accordion","id","map","Button","mode","update","getFocusedRouteNameFromRoute","Snackbar","onDismiss","action","label","updateUser","payload","styles","marginTop","marginLeft","marginRight","container","fontSize","view","height","flex","alignItems","justifyContent","gradient","left","right","dispatch","bindActionCreators","setName","setEmail","setPassword","setPasswordConfirmation","LinearGradient","TextInput","value","onChangeText","secureTextEntry","login","CommonActions","reset","routes","Alert","alert","log","cancelable","handleLogin","emptyListStyle","textAlign","itemStyle","img","headerFooterStyle","backgroundColor","bottomFooterStyle","flexDirection","bottom","marginBottom","textStyle","color","btn","margin","Cultures","Item","setCultures","setUsers","fetchCultureData","users","fetchAdminData","cultureNames","handleAdminLogin","evt","Colors","red800","TouchableOpacity","Image","require","input","paddingHorizontal","EditInsight","isSpecialized","category","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","placeholder","Divider","Icon","numberOfLines","multiline","RadioButton","onValueChange","newInsight","specialized","INITIAL_STATE","combineReducers","store","createStore","userReducer","registerRootComponent","Stack","createStackNavigator","theme","NavigationContainer","linking","prefixes","component","CultureView","options","headerRight","Text","Home","Login"],"mappings":"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","file":"static/js/app.c023f5e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/admin_login.2babc559.png\";","import { DefaultTheme } from \"react-native-paper\";\n\n// export const API_URL = \"http://localhost:5000/v1\";\nexport const API_URL = \"18.189.142.71:5000/v1\";\n\nexport const Theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n","import { API_URL } from \"../constants\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    //console.log(json);\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admin/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<string>} JSON Web Token authenticating the admin\n   */\n  static async login(email: string, password: string): Promise<string> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json[\"token\"];\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admin\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admin/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  async update(\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admin/${this.email}`,\n      {\n        email: this.email,\n        name: this.name,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admin/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * specializedToArray convert a Map<string, GeneralInsight> to an Array.\n *\n * @param {SpecializedInsight} Map of Specialized Insights\n *\n * @returns {{text: string; insights: GeneralInsight[]}[]} where `text` is the title.\n */\nexport function specializedToArray(\n  insights: SpecializedInsight\n): { text: string; insights: GeneralInsight[] }[] {\n  let ret = [];\n  for (let key in insights) {\n    ret.push({ text: key, insights: insights[key] });\n  }\n  return ret;\n}\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(name: string): Promise<Culture> {\n    let json = await Api.get(`/culture/${name}`);\n\n    return new this(\n      json[\"name\"],\n      json[\"general_insights\"],\n      json[\"specialized_insights\"]\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<{ name: string; modified: number }[]>}\n   */\n  static async list(): Promise<{ name: string; modified: number }[]> {\n    let json = await Api.get(\"/culture\");\n\n    return json[\"cultures\"];\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/culture/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async update(token: string): Promise<void> {\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: this.specializedInsights,\n      name: this.name,\n    };\n\n    await Api.put(`/culture/${this.name}`, data, token);\n  }\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  const LOCATION: string = \"@ledger\";\n\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(\n      async (culture: { name: string; modified: number }) => {\n        const { name, modified } = culture;\n        if (cultures.has(name) && cultures.get(name) < modified) {\n          add(name);\n        }\n      }\n    );\n\n    const data = JSON.stringify({ cultures: cultures });\n    await AsyncStorage.setItem(LOCATION, data);\n  }\n\n  /**\n   * Fetches, Compress information about a provided culture.\n   *\n   * @param {string} name of culture\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<string>} compressed bytes\n   */\n  async function compress(name: string): Promise<string> {\n    const info = await Culture.get(name);\n    return Pako.deflate(JSON.stringify(info), { to: \"string\" });\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(LOCATION);\n    if (data === null) {\n      return new Map();\n    }\n\n    return JSON.parse(data).cultures;\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const data = await compress(culture);\n    AsyncStorage.setItem(culture, data.toString());\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    const cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, FlatList, SafeAreaView, View } from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  Card,\n  ActivityIndicator,\n  IconButton,\n  FAB,\n  List,\n  Paragraph,\n  Button,\n  Title,\n  Snackbar,\n} from \"react-native-paper\";\n\nimport {\n  Culture,\n  GeneralInsight,\n  SpecializedInsight,\n  specializedToArray,\n  Ledger,\n} from \"../api\";\n\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux/UserReducer\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  General: { insights: GeneralInsight[] };\n  Specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst Styles = StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  fab: {\n    // TODO: Emulate Fixed for the Floating Action Button\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  editInput: {\n    width: \"100%\",\n  },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n});\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [err, setErr] = useState<string>(\"\");\n  const [showErr, setShowErr] = useState<boolean>(false);\n  const route = useRoute();\n\n  useEffect(() => props.navigation.setOptions({ title: cultureName }), []);\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights\n    );\n\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        // TODO: Display Magical Unicorn Culture\n        props.navigation.navigate(\"Home\");\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token);\n      setCultureInPlace(culture);\n    } catch (err) {\n      setShowErr(true);\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setErr(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setShowErr(false);\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  let specInsights = specializedToArray(culture.specializedInsights);\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      culture.specializedInsights[key].splice(i, 1);\n\n      if (culture.specializedInsights[key].length === 0) {\n        delete culture.specializedInsights[key];\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"General\") {\n      case \"General\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"Specialized\":\n        culture.specializedInsights[\"Specialized Insight\"] = [ExampleInsight];\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights[key].push(ExampleInsight);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  return (\n    <View>\n      <Tab.Navigator initialRouteName=\"General\">\n        <Tab.Screen name=\"General\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={async () => fetchCulture()}\n              insights={culture.generalInsights}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Specialized\">\n          {() => (\n            <Insights\n              insights={specInsights}\n              onRefresh={async () => fetchCulture()}\n              renderItem={(row: {\n                item: { text: string; insights: GeneralInsight[] };\n                index: number;\n              }) => {\n                const { text, insights } = row.item;\n                return (\n                  <List.Accordion title={text} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [text, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(text)}\n                        mode=\"contained\"\n                        style={Styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <>\n        {token &&\n          (editing ? (\n            <ToolsFAB\n              onSave={() => updateCulture()}\n              onAdd={addInsightOrCategory}\n            />\n          ) : (\n            <EditFAB onPress={() => setEditing(!editing)} />\n          ))}\n      </>\n      <Snackbar\n        visible={showErr}\n        onDismiss={hideSnackbar}\n        action={{\n          label: \"Hide\",\n          onPress: hideSnackbar,\n        }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: { text: string; insights: GeneralInsight[] }[] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    onRefresh();\n    setRefreshing(true);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n\n/**\n * Properties for {@link EditFAB}\n */\ntype EditFABProps = {\n  // onPress handles when the FAB is pressed.\n  onPress: () => void;\n};\n\n/**\n * EditFAB displays a {@link FAB} that is labeled \"edit\" and has a pencil icon.\n *\n * @param {EditFABProps} props\n * @returns {React.ReactElement} React component\n */\nfunction EditFAB(props: EditFABProps): React.ReactElement {\n  return (\n    <FAB.Group\n      style={Styles.fab}\n      icon=\"pencil\"\n      open={false}\n      onPress={() => props.onPress()}\n      visible={true}\n      actions={[]}\n      onStateChange={() => props.onPress()}\n    />\n  );\n}\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nfunction ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      style={Styles.fab}\n      open={open}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nfunction InsightCard(props: InsightCardProps): React.ReactElement {\n  const { insight, index, editing, onPress } = props;\n\n  return (\n    <Card style={Styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        <IconButton icon=\"link\" size={20} />\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => props.onDelete(index)}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","export const updateUser = (user) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n","import React, { useState } from \"react\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { Alert, View, StyleSheet } from \"react-native\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { Button, Card, TextInput } from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp, useRoute } from \"@react-navigation/native\";\n\nimport { Admin } from \"../api\";\nimport { updateUser } from \"../redux/UserAction\";\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\" | \"Register\">;\n  route: RouteProp<Routes, \"Login\" | \"Register\">;\n  updateUser: Function;\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    marginTop: 100,\n    marginLeft: 20,\n    marginRight: 20,\n  },\n  container: {\n    padding: 10,\n    fontSize: 18,\n  },\n  view: {\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  gradient: {\n    position: \"absolute\",\n    left: 0,\n    right: 0,\n    top: 0,\n    height: \"100%\",\n  },\n});\n\nfunction Login(props: Props): React.ReactElement {\n  const [name, setName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n  const [passwordConfirmation, setPasswordConfirmation] = useState<string>(\"\");\n  const route = useRoute();\n  const token = props.route.params ? props.route.params.token || \"\" : \"\";\n  const { navigation, updateUser } = props;\n\n  const handleLogin = async () => {\n    try {\n      const token = await Admin.login(email, password);\n      const user = await Admin.get(email, token);\n      updateUser({ user: { ...user }, token });\n      navigation.dispatch(\n        CommonActions.reset({\n          index: 1,\n          routes: [{ name: \"Home\" }],\n        })\n      );\n    } catch (error) {\n      console.error(\"Unsuccessful Login\", error);\n      Alert.alert(\n        \"Unsuccessful Login\",\n        \"Incorrect username or password\",\n        [{ text: \"OK\", onPress: () => console.log(\"OK Pressed\") }],\n        { cancelable: true }\n      );\n    }\n  };\n\n  const handleRegistration = async () => {\n    if (token) {\n      try {\n        await Admin.create(name, email, password, passwordConfirmation, token);\n        navigation.dispatch(\n          CommonActions.reset({\n            index: 1,\n            routes: [{ name: \"Login\" }],\n          })\n        );\n      } catch (error) {\n        console.error(\"Unsuccessful Registration\", error);\n        Alert.alert(\n          \"Unsuccessful Registration\",\n          \"helpful error message\",\n          [{ text: \"OK\", onPress: () => console.log(\"OK Pressed\") }],\n          { cancelable: true }\n        );\n      }\n    }\n  };\n\n  return (\n    <View style={styles.view}>\n      <LinearGradient colors={[\"#454545\", \"#f0f4ef\"]} style={styles.gradient}>\n        <Card style={styles.card}>\n          {route.name === \"Register\" && (\n            <TextInput\n              style={styles.container}\n              mode=\"outlined\"\n              label=\"name\"\n              value={name}\n              onChangeText={(text) => setName(text)}\n            />\n          )}\n          <TextInput\n            style={styles.container}\n            mode=\"outlined\"\n            label=\"email\"\n            value={email}\n            onChangeText={(text) => setEmail(text)}\n          />\n          <TextInput\n            style={styles.container}\n            mode=\"outlined\"\n            label=\"password\"\n            secureTextEntry={true}\n            value={password}\n            onChangeText={(text) => setPassword(text)}\n          />\n          {route.name === \"Register\" && (\n            <TextInput\n              style={styles.container}\n              mode=\"outlined\"\n              label=\"password confirmation\"\n              secureTextEntry={true}\n              value={passwordConfirmation}\n              onChangeText={(text) => setPasswordConfirmation(text)}\n            />\n          )}\n          <Button\n            icon=\"login\"\n            mode=\"contained\"\n            onPress={() =>\n              route.name === \"Login\" ? handleLogin() : handleRegistration()\n            }\n          >\n            submit\n          </Button>\n        </Card>\n      </LinearGradient>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  FlatList,\n  SafeAreaView,\n  Image,\n} from \"react-native\";\nimport \"react-native-gesture-handler\";\nimport React, { useState, useEffect } from \"react\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  List,\n  ActivityIndicator,\n  Colors,\n  Button,\n  FAB,\n  IconButton,\n  Snackbar,\n} from \"react-native-paper\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\n\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux/UserReducer\";\nimport { Admin } from \"../api/admin\";\nimport { Culture } from \"../api/culture\";\n\nconst styles = StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n  emptyListStyle: {\n    padding: 10,\n    fontSize: 18,\n    textAlign: \"center\",\n  },\n  itemStyle: {\n    padding: 10,\n  },\n  img: {\n    padding: 35,\n    height: 70,\n    width: \"25%\",\n  },\n  headerFooterStyle: {\n    width: \"100%\",\n    height: 45,\n    backgroundColor: \"#606070\",\n  },\n  bottomFooterStyle: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    height: 70,\n    backgroundColor: \"#606070\",\n    position: \"absolute\",\n    bottom: \"0px\",\n    left: \"0px\",\n    right: \"0px\",\n    marginBottom: \"0px\",\n  },\n  textStyle: {\n    textAlign: \"center\",\n    color: \"#fff\",\n    fontSize: 18,\n    padding: 7,\n  },\n  btn: {},\n  fab: {\n    position: \"absolute\",\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  view: {\n    height: \"100%\",\n  },\n});\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n};\n\ntype TabProps = {\n  Cultures: { insights: Culture[] };\n  Admins: { insights: Admin };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const [cultures, setCultures] = useState(null);\n  const [users, setUsers] = useState(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [err, setErr] = useState<string>(\"\");\n  const [showErr, setShowErr] = useState<boolean>(false);\n  const route = useRoute();\n  const token = props.token;\n\n  const hideSnackbar = () => setShowErr(false);\n\n  useEffect(() => {\n    fetchCultureData();\n  }, []);\n\n  useEffect(() => {\n    const fetchAdminData = async () => {\n      let users;\n      if (props.user.superUser) {\n        users = await Admin.list(token);\n      } else {\n        users = [props.user];\n      }\n      setUsers(users);\n    };\n\n    fetchAdminData();\n  }, []);\n\n  const fetchCultureData = async () => {\n    let cultureNames = await Culture.list();\n    setCultures(cultureNames);\n  };\n\n  const ListHeader = () => {\n    //View to set in Header\n    return (\n      <View style={styles.headerFooterStyle}>\n        <Text style={styles.textStyle}>Cultural Awareness Home Page</Text>\n      </View>\n    );\n  };\n\n  const ListFooter = () => {\n    //View to set in Footer\n    return (\n      <View style={styles.bottomFooterStyle}>\n        <Button onPress={() => console.log(\"Pressed!\")}>\n          General Disclaimer\n        </Button>\n        <TouchableOpacity style={styles.btn} onPress={handleAdminLogin}>\n          <Image\n            source={require(\"../assets/admin_login.png\")}\n            style={styles.img}\n          />\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  const handleAdminLogin = (evt) => {\n    props.navigation.navigate(\"Login\");\n  };\n  const handleDisclaimer = (evt) => {\n    console.log(\"Pressed\");\n  };\n\n  if (cultures === null)\n    return <ActivityIndicator animating={true} color={Colors.red800} />;\n\n  return (\n    // TODO:\n    // We want to refactor this code to work like the Culture view\n    // Use the same patterns/base components as Culture.tsx\n\n    <View style={styles.view}>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        {/* CULTURES TAB */}\n        <Tab.Screen name=\"Cultures\">\n          {() => (\n            <Cultures\n              onRefresh={async () => fetchCultureData()}\n              cultures={cultures}\n              navigation={props.navigation}\n              token={token}\n            />\n          )}\n        </Tab.Screen>\n\n        {/* ADMINS TAB */}\n        {/* This tab should only be visible to users who are logged in how can we prevent the following component from rendering if a user is not signed in? */}\n        {/* TODO: create admins component that lists the admins, pass users to that component */}\n        <Tab.Screen name=\"Admins\">{() => <></>}</Tab.Screen>\n      </Tab.Navigator>\n      <>\n        {/* {token &&\n          (editing ? (\n            TODO: create ToolsFAB component, updateAdmin function\n\n            <ToolsFAB\n              onSave={() => updateAdmin()}\n              onAdd={addInsightOrCategory}\n            />\n          ) : (\n            TODO: create EditFab component\n\n            <EditFAB onPress={() => setEditing(!editing)} />\n          ))} */}\n      </>\n      <Snackbar\n        visible={showErr}\n        onDismiss={hideSnackbar}\n        action={{\n          label: \"Hide\",\n          onPress: hideSnackbar,\n        }}\n      >\n        {err}\n      </Snackbar>\n      {ListFooter()}\n    </View>\n  );\n}\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Cultures to render\n  cultures: { name: string; cultures: Culture[] }[];\n  navigation: any;\n  token: string;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Cultures(props: CultureProps): React.ReactElement {\n  const { cultures, onRefresh } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    onRefresh();\n    setRefreshing(true);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        style={{ flex: 1 }}\n        data={cultures}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: item.name })\n              }\n              right={() =>\n                props.token ? (\n                  <IconButton\n                    icon=\"delete\"\n                    onPress={() => Culture.delete(item.name, props.token)}\n                  />\n                ) : null\n              }\n            />\n          );\n        }}\n      />\n    </SafeAreaView>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n  }),\n  null\n)(Home);\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../api\";\n\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights[index[0]][index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights[key];\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        delete culture.specializedInsights[key];\n        culture.specializedInsights[title] = specialized;\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    props.navigation.navigate(\"Culture\", { cultureName: culture.name });\n  };\n\n  return (\n    <SafeAreaView style={Styles.view}>\n      {isSpecialized && (\n        <TextInput\n          style={Styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={Styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={Styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={Styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <FAB style={Styles.fab} icon=\"check\" onPress={updateCulture} />\n    </SafeAreaView>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { Admin } from \"../api/admin\";\n\nconst defaultAdmin = new Admin(\"\", \"\");\nconst INITIAL_STATE = { user: { ...defaultAdmin }, token: \"\" };\n\nexport type Store = { user: { user: Admin; token: string } };\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  user: userReducer,\n});\n","import \"react-native-gesture-handler\";\nimport * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Provider as PaperProvider, Button, Avatar } from \"react-native-paper\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport { Home, Login, CultureView, EditInsight } from \"./views\";\n\nimport { Routes } from \"./routes\";\nimport { Theme } from \"./constants\";\nimport userReducer from \"./redux/UserReducer\";\n\nconst store = createStore(userReducer);\n\nfunction App() {\n  const Stack = createStackNavigator<Routes>();\n  const linking = {\n    prefixes: [\"/\"],\n  };\n\n  return (\n    <PaperProvider theme={Theme}>\n      <Provider store={store}>\n        <NavigationContainer linking={linking}>\n          <Stack.Navigator initialRouteName=\"Home\">\n            <Stack.Screen\n              name=\"Culture\"\n              component={CultureView}\n              options={{\n                headerRight: () => (\n                  <Button onPress={() => console.log(\"button pressed\")}>\n                    <Avatar.Text size={36} label=\"NH\" />\n                  </Button>\n                ),\n              }}\n            />\n            <Stack.Screen name=\"Home\" component={Home} />\n            <Stack.Screen name=\"Login\" component={Login} />\n            <Stack.Screen name=\"Register\" component={Login} />\n            <Stack.Screen name=\"EditInsight\" component={EditInsight} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </Provider>\n    </PaperProvider>\n  );\n}\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}