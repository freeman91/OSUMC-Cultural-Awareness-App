{"version":3,"sources":["frontend/assets/admin_login.png","frontend/constants.ts","frontend/api/api.ts","frontend/api/admin.ts","frontend/api/culture.ts","frontend/api/ledger.ts","frontend/views/Culture.tsx","frontend/redux/UserAction.tsx","frontend/views/Login.tsx","frontend/views/Register.tsx","frontend/views/Home.tsx","frontend/views/EditInsight.tsx","frontend/redux/UserReducer.tsx","frontend/App.tsx"],"names":["module","exports","API_URL","Theme","DefaultTheme","colors","primary","accent","LoginValidationSchema","Yup","shape","email","required","password","RegisterHelpText","name","passwordConfirmation","RegisterValidationSchema","min","max","matches","oneOf","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","undefined","Admin","superUser","put","this","password_confirmation","getAuth","post","delete","Culture","generalInsights","specializedInsights","general_insights","specialized_insights","data","get","compress","a","async","info","Pako","to","list","AsyncStorage","getItem","Map","parse","cultures","add","culture","setItem","toString","updatedCultures","forEach","modified","has","storedData","removeItem","Ledger","Tab","createMaterialTopTabNavigator","Styles","StyleSheet","create","spinner","top","position","fab","card","padding","marginVertical","marginHorizontal","editInput","width","specialAddInsight","ExampleInsight","summary","information","source","type","Insights","props","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","size","style","refresh","SafeAreaView","FlatList","keyExtractor","_","index","EditFAB","FAB","Group","icon","open","onPress","visible","actions","onStateChange","ToolsFAB","setOpen","onAdd","onSave","InsightCard","insight","editing","showMenu","setShowMenu","link","Card","Content","Title","Paragraph","Actions","Linking","canOpenURL","Menu","onDismiss","anchor","IconButton","Item","title","Clipboard","setString","Divider","openURL","onDelete","connect","state","ownProps","user","navigation","route","cultureName","params","setCulture","setEditing","err","setErr","showErr","setShowErr","useRoute","useEffect","setOptions","fetchCulture","setCultureInPlace","newCulture","read","console","error","navigate","hideSnackbar","specInsights","ret","key","push","text","specializedToArray","deleteInsight","Array","i","splice","length","InsightCardView","View","Navigator","initialRouteName","Screen","row","item","Accordion","id","map","Button","mode","update","getFocusedRouteNameFromRoute","Snackbar","action","label","updateUser","payload","initialValues","view","flex","justifyContent","margin","overflow","recover","bottom","dispatch","bindActionCreators","remember","setRemember","snackbar","setSnackbar","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","getEmail","fields","res","CommonActions","reset","routes","TextInput","autoFocus","textContentType","left","Icon","ref","value","onBlur","onChangeText","HelperText","secureTextEntry","right","Checkbox","log","uppercase","color","fontWeight","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","onFocus","Text","styles","emptyListStyle","fontSize","textAlign","itemStyle","img","height","headerFooterStyle","backgroundColor","bottomFooterStyle","flexDirection","marginBottom","textStyle","btn","inviteModal","background","Cultures","setCultures","fetchCultureData","cultureNames","Admins","users","setUsers","React","setVisible","fetchAdminData","Alert","alert","onEdit","Portal","Modal","contentContainerStyle","handleAdminLogin","evt","TouchableOpacity","Image","require","input","paddingHorizontal","EditInsight","isSpecialized","category","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","placeholder","numberOfLines","multiline","RadioButton","onValueChange","newInsight","specialized","INITIAL_STATE","combineReducers","store","createStore","userReducer","registerRootComponent","Stack","createStackNavigator","theme","NavigationContainer","linking","prefixes","component","CultureView","options","headerRight","Home","Login","Register"],"mappings":"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","file":"static/js/app.eb4b1ed6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/admin_login.2babc559.png\";","import { DefaultTheme } from \"react-native-paper\";\nimport * as Yup from \"yup\";\n\n// export const API_URL = \"http://localhost:5000/api/v1\";\nexport const API_URL = \"http://www.osumc-cultural-awareness.com:5000/api/v1\";\n\nexport const Theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login not nearly as extensive as Register,\n * but performs basic validation.\n */\nexport const LoginValidationSchema = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n\n/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport const RegisterHelpText = {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need to verify that you own this email account.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check you know the password\",\n};\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport const RegisterValidationSchema = Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n\nexport const TermsOfServiceURL = \"http://www.google.com\";\n","import { API_URL } from \"../constants\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    //console.log(json);\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  async update(\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${this.email}`,\n      {\n        email: this.email,\n        name: this.name,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * specializedToArray convert a Map<string, GeneralInsight> to an Array.\n *\n * @param {SpecializedInsight} Map of Specialized Insights\n *\n * @returns {{text: string; insights: GeneralInsight[]}[]} where `text` is the title.\n */\nexport function specializedToArray(\n  insights: SpecializedInsight\n): { text: string; insights: GeneralInsight[] }[] {\n  let ret = [];\n  for (let key in insights) {\n    ret.push({ text: key, insights: insights[key] });\n  }\n  return ret;\n}\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(name: string): Promise<Culture> {\n    let json = await Api.get(`/cultures/${name}`);\n\n    return new this(\n      json[\"name\"],\n      json[\"general_insights\"],\n      json[\"specialized_insights\"]\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<{ name: string; modified: number }[]>}\n   */\n  static async list(): Promise<{ name: string; modified: number }[]> {\n    let json = await Api.get(\"/cultures\");\n\n    return json[\"cultures\"];\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async update(token: string): Promise<void> {\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: this.specializedInsights,\n      name: this.name,\n    };\n\n    await Api.put(`/cultures/${this.name}`, data, token);\n  }\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  const LOCATION: string = \"@ledger\";\n\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(\n      async (culture: { name: string; modified: number }) => {\n        const { name, modified } = culture;\n        if (cultures.has(name) && cultures.get(name) < modified) {\n          add(name);\n        }\n      }\n    );\n\n    const data = JSON.stringify({ cultures: cultures });\n    await AsyncStorage.setItem(LOCATION, data);\n  }\n\n  /**\n   * Fetches, Compress information about a provided culture.\n   *\n   * @param {string} name of culture\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<string>} compressed bytes\n   */\n  async function compress(name: string): Promise<string> {\n    const info = await Culture.get(name);\n    return Pako.deflate(JSON.stringify(info), { to: \"string\" });\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(LOCATION);\n    if (data === null) {\n      return new Map();\n    }\n\n    return JSON.parse(data).cultures;\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const data = await compress(culture);\n    AsyncStorage.setItem(culture, data.toString());\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    const cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  FlatList,\n  SafeAreaView,\n  View,\n  Linking,\n  // Clipboard is deprecated, but necessary because of incompatibility with Expo\n  // See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\n  Clipboard,\n} from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  Card,\n  ActivityIndicator,\n  IconButton,\n  FAB,\n  Divider,\n  List,\n  Paragraph,\n  Button,\n  Title,\n  Snackbar,\n  Menu,\n} from \"react-native-paper\";\n\nimport {\n  Culture,\n  GeneralInsight,\n  SpecializedInsight,\n  specializedToArray,\n  Ledger,\n} from \"../api\";\n\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux/UserReducer\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  General: { insights: GeneralInsight[] };\n  Specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst Styles = StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  fab: {\n    // TODO: Emulate Fixed for the Floating Action Button\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  editInput: {\n    width: \"100%\",\n  },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n});\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [err, setErr] = useState<string>(\"\");\n  const [showErr, setShowErr] = useState<boolean>(false);\n  const route = useRoute();\n\n  useEffect(() => props.navigation.setOptions({ title: cultureName }), []);\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights\n    );\n\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        // TODO: Display Magical Unicorn Culture\n        props.navigation.navigate(\"Home\");\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token);\n      setCultureInPlace(culture);\n    } catch (err) {\n      setShowErr(true);\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setErr(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setShowErr(false);\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  let specInsights = specializedToArray(culture.specializedInsights);\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      culture.specializedInsights[key].splice(i, 1);\n\n      if (culture.specializedInsights[key].length === 0) {\n        delete culture.specializedInsights[key];\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"General\") {\n      case \"General\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"Specialized\":\n        culture.specializedInsights[\"Specialized Insight\"] = [ExampleInsight];\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights[key].push(ExampleInsight);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  return (\n    <View>\n      <Tab.Navigator initialRouteName=\"General\">\n        <Tab.Screen name=\"General\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={async () => fetchCulture()}\n              insights={culture.generalInsights}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Specialized\">\n          {() => (\n            <Insights\n              insights={specInsights}\n              onRefresh={async () => fetchCulture()}\n              renderItem={(row: {\n                item: { text: string; insights: GeneralInsight[] };\n                index: number;\n              }) => {\n                const { text, insights } = row.item;\n                return (\n                  <List.Accordion title={text} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [text, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(text)}\n                        mode=\"contained\"\n                        style={Styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <>\n        {token &&\n          (editing ? (\n            <ToolsFAB\n              onSave={() => updateCulture()}\n              onAdd={addInsightOrCategory}\n            />\n          ) : (\n            <EditFAB onPress={() => setEditing(!editing)} />\n          ))}\n      </>\n      <Snackbar\n        visible={showErr}\n        onDismiss={hideSnackbar}\n        action={{\n          label: \"Hide\",\n          onPress: hideSnackbar,\n        }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: { text: string; insights: GeneralInsight[] }[] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    onRefresh();\n    setRefreshing(true);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n\n/**\n * Properties for {@link EditFAB}\n */\ntype EditFABProps = {\n  // onPress handles when the FAB is pressed.\n  onPress: () => void;\n};\n\n/**\n * EditFAB displays a {@link FAB} that is labeled \"edit\" and has a pencil icon.\n *\n * @param {EditFABProps} props\n * @returns {React.ReactElement} React component\n */\nfunction EditFAB(props: EditFABProps): React.ReactElement {\n  return (\n    <FAB.Group\n      style={Styles.fab}\n      icon=\"pencil\"\n      open={false}\n      onPress={() => props.onPress()}\n      visible={true}\n      actions={[]}\n      onStateChange={() => props.onPress()}\n    />\n  );\n}\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nfunction ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      style={Styles.fab}\n      open={open}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nfunction InsightCard(props: InsightCardProps): React.ReactElement {\n  const { insight, index, editing, onPress } = props;\n  const [showMenu, setShowMenu] = useState(false);\n  const link = insight.source.data;\n\n  return (\n    <Card style={Styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <Menu\n            visible={showMenu}\n            onDismiss={() => setShowMenu(false)}\n            anchor={\n              <IconButton\n                icon=\"link\"\n                size={20}\n                onPress={() => setShowMenu(true)}\n              />\n            }\n          >\n            <Menu.Item\n              title=\"Copy link\"\n              onPress={() => Clipboard.setString(link)}\n            />\n            <Divider />\n            <Menu.Item\n              title=\"Open link\"\n              onPress={() => Linking.openURL(link)}\n            />\n          </Menu>\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => props.onDelete(index)}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import { Store } from \"./UserReducer\";\n\nexport const updateUser = (user: Store[\"user\"]) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { View, StyleSheet } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../api\";\nimport { updateUser } from \"../redux/UserAction\";\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux/UserReducer\";\nimport { LoginValidationSchema } from \"../constants\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\n// Used for {@link AsyncStorage} to store a user's email\n// locally on their device.\nconst RememberedEmail = \"@rememberedEmail\";\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [snackbar, setSnackbar] = useState(false);\n  const [err, setErr] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: LoginValidationSchema,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setSnackbar(true);\n      setErr(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email === undefined) {\n      console.log(`Send recovery email to ${values.email}`);\n    } else {\n      setSnackbar(true);\n      setErr(\"Account recovery requires a valid Email\");\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={Styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={snackbar}\n        onDismiss={() => setSnackbar(false)}\n        action={{ label: \"Ok\", onPress: () => setSnackbar(false) }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../api\";\nimport { updateUser } from \"../redux/UserAction\";\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux/UserReducer\";\nimport {\n  RegisterHelpText,\n  RegisterValidationSchema,\n  TermsOfServiceURL,\n} from \"../constants\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [snackbar, setSnackbar] = useState(false);\n  const [err, setErr] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: RegisterValidationSchema,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setSnackbar(true);\n      setErr(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={Styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={snackbar}\n        onDismiss={() => setSnackbar(false)}\n        action={{ label: \"Ok\", onPress: () => setSnackbar(false) }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  FlatList,\n  SafeAreaView,\n  Image,\n  Alert,\n} from \"react-native\";\nimport \"react-native-gesture-handler\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  List,\n  ActivityIndicator,\n  Button,\n  FAB,\n  IconButton,\n  Modal,\n  Portal,\n} from \"react-native-paper\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\n\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux/UserReducer\";\nimport { Admin, Culture, Ledger } from \"../api\";\n\nconst styles = StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n  emptyListStyle: {\n    padding: 10,\n    fontSize: 18,\n    textAlign: \"center\",\n  },\n  itemStyle: {\n    padding: 10,\n  },\n  img: {\n    padding: 35,\n    height: 70,\n    width: \"25%\",\n  },\n  headerFooterStyle: {\n    width: \"100%\",\n    height: 45,\n    backgroundColor: \"#606070\",\n  },\n  bottomFooterStyle: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    height: 70,\n    backgroundColor: \"#606070\",\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    marginBottom: 0,\n  },\n  textStyle: {\n    textAlign: \"center\",\n    color: \"#fff\",\n    fontSize: 18,\n    padding: 7,\n  },\n  btn: {},\n  fab: {\n    position: \"absolute\",\n    margin: 16,\n    right: 0,\n    bottom: -450,\n  },\n  view: {\n    height: \"100%\",\n  },\n  inviteModal: {\n    padding: 20,\n    background: \"white\",\n  },\n});\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const token = props.token;\n\n  const ListFooter = () => {\n    //View to set in Footer\n    return (\n      <View style={styles.bottomFooterStyle}>\n        <Button onPress={() => console.log(\"Pressed!\")}>\n          General Disclaimer\n        </Button>\n        <TouchableOpacity style={styles.btn} onPress={handleAdminLogin}>\n          <Image\n            source={require(\"../assets/admin_login.png\")}\n            style={styles.img}\n          />\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  const handleAdminLogin = (evt) => {\n    props.navigation.navigate(\"Login\");\n  };\n\n  return (\n    <View style={styles.view}>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        <Tab.Screen name=\"Cultures\">\n          {() => <Cultures navigation={props.navigation} token={token} />}\n        </Tab.Screen>\n        {token ? (\n          <Tab.Screen name=\"Admins\">\n            {() => (\n              <>\n                <Admins token={token} user={props.user} />\n              </>\n            )}\n          </Tab.Screen>\n        ) : (\n          <></>\n        )}\n      </Tab.Navigator>\n      {ListFooter()}\n    </View>\n  );\n}\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Cultures(props: CultureProps): React.ReactElement {\n  const [cultures, setCultures] = useState(null);\n  useEffect(() => {\n    fetchCultureData();\n  }, []);\n\n  const fetchCultureData = async () => {\n    let cultureNames = await Culture.list();\n    setCultures(cultureNames);\n  };\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        style={{ flex: 1 }}\n        data={cultures}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: item.name })\n              }\n              right={() => (\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  <IconButton\n                    icon=\"download\"\n                    onPress={() => Ledger.add(item.name)}\n                  />\n                  {props.token && (\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => Culture.delete(item.name, props.token)}\n                    />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n      {props.token && (\n        <FAB\n          icon=\"plus\"\n          style={styles.fab}\n          onPress={() => setCultures([...cultures, \"\"])}\n        ></FAB>\n      )}\n    </SafeAreaView>\n  );\n}\n\n/* ADMIN */\n\n/**\n * Properties for {@link Users}\n */\ntype AdminProps = {\n  token: string;\n  user: Admin;\n};\n\n/**\n * Component that displays a list of components of either {@link Users}\n *\n * @param {AdminProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Admins(props: AdminProps): React.ReactElement {\n  const [users, setUsers] = useState(null);\n  const [visible, setVisible] = React.useState(false);\n  useEffect(() => {\n    fetchAdminData();\n  }, []);\n\n  const fetchAdminData = async () => {\n    let users;\n    if (props.user.superUser) {\n      users = await Admin.list(props.token);\n    } else {\n      users = [props.user];\n    }\n    setUsers(users);\n  };\n\n  const onDelete = async (email: string) => {\n    try {\n      await Admin.delete(email, props.token);\n    } catch {\n      // show error message\n    }\n    fetchAdminData();\n  };\n\n  const onEdit = (user: {\n    email: string;\n    name: string;\n    superUser: boolean;\n  }) => {\n    //TODO: update Admin.update() perams\n    try {\n      //Admin.update(email, props.token)\n      fetchAdminData();\n    } catch {\n      // show error message\n    }\n  };\n\n  const onInvite = async (email: string) => {\n    try {\n      await Admin.invite(email, props.token);\n    } catch (err) {\n      // show error message\n    }\n  };\n\n  if (!users) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        style={{ flex: 1 }}\n        data={users}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.email}\n              onPress={() => {\n                Alert.alert(\"user pressed\", item.name, [\n                  { text: \"OK\", onPress: () => console.log(\"OK Pressed\") },\n                ]);\n              }}\n              right={() =>\n                props.token ? (\n                  <>\n                    <IconButton icon=\"pencil\" onPress={() => onEdit(item)} />\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => onDelete(item.email)}\n                    />\n                  </>\n                ) : null\n              }\n            />\n          );\n        }}\n      />\n      <FAB\n        icon=\"plus\"\n        style={styles.fab}\n        onPress={() => setVisible(!visible)}\n      />\n      <Portal>\n        <Modal visible={visible} contentContainerStyle={styles.inviteModal}>\n          <Text>Example Modal. Click outside this area to dismiss.</Text>\n        </Modal>\n      </Portal>\n    </SafeAreaView>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n  }),\n  null\n)(Home);\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../api\";\n\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights[index[0]][index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights[key];\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        delete culture.specializedInsights[key];\n        culture.specializedInsights[title] = specialized;\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    props.navigation.navigate(\"Culture\", { cultureName: culture.name });\n  };\n\n  return (\n    <SafeAreaView style={Styles.view}>\n      {isSpecialized && (\n        <TextInput\n          style={Styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={Styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={Styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={Styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <FAB style={Styles.fab} icon=\"check\" onPress={updateCulture} />\n    </SafeAreaView>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { Admin } from \"../api/admin\";\n\nconst defaultAdmin = new Admin(\"\", \"\");\nconst INITIAL_STATE = { user: { ...defaultAdmin }, token: \"\" };\n\nexport type Store = { user: { user: Admin; token: string } };\n\nconst userReducer = (\n  state = INITIAL_STATE,\n  action: { type: string; payload: any }\n) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  user: userReducer,\n});\n","import \"react-native-gesture-handler\";\nimport * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Provider as PaperProvider, Button, Avatar } from \"react-native-paper\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport { Home, Login, CultureView, EditInsight, Register } from \"./views\";\n\nimport { Routes } from \"./routes\";\nimport { Theme } from \"./constants\";\nimport userReducer from \"./redux/UserReducer\";\n\nconst store = createStore(userReducer);\n\nfunction App() {\n  const Stack = createStackNavigator<Routes>();\n  const linking = {\n    prefixes: [\"/\"],\n  };\n\n  return (\n    <PaperProvider theme={Theme}>\n      <Provider store={store}>\n        <NavigationContainer linking={linking}>\n          <Stack.Navigator initialRouteName=\"Home\">\n            <Stack.Screen\n              name=\"Culture\"\n              component={CultureView}\n              options={{\n                headerRight: () => (\n                  <Button onPress={() => console.log(\"button pressed\")}>\n                    <Avatar.Text size={36} label=\"NH\" />\n                  </Button>\n                ),\n              }}\n            />\n            <Stack.Screen name=\"Home\" component={Home} />\n            <Stack.Screen name=\"Login\" component={Login} />\n            <Stack.Screen name=\"Register\" component={Register} />\n            <Stack.Screen name=\"EditInsight\" component={EditInsight} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </Provider>\n    </PaperProvider>\n  );\n}\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}