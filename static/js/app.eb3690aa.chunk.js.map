{"version":3,"sources":["frontend/constants.ts","frontend/api/api.ts","frontend/api/admin.ts","frontend/api/culture.ts","frontend/api/ledger.ts","frontend/views/Culture.tsx","frontend/redux/UserReducer.ts","frontend/redux/UserAction.ts","frontend/redux/ThemeAction.ts","frontend/redux/index.ts","frontend/redux/ThemeReducer.ts","frontend/views/Login.tsx","frontend/views/Register.tsx","frontend/views/Home.tsx","frontend/views/EditInsight.tsx","frontend/views/Recovery.tsx","frontend/theme.ts","frontend/views/ThemeToggler.tsx","frontend/views/DownloadedCultures.tsx","frontend/views/Settings.tsx","frontend/views/Header.tsx","frontend/App.tsx"],"names":["API_URL","LoginValidationSchema","Yup","shape","email","required","password","RegisterHelpText","name","passwordConfirmation","RegisterValidationSchema","min","max","matches","oneOf","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","undefined","Admin","superUser","put","this","password_confirmation","getAuth","post","res","delete","Culture","generalInsights","specializedInsights","modified","general_insights","specialized_insights","data","get","list","a","async","AsyncStorage","getItem","Map","ledger","parse","Object","entries","saveLedger","cultures","forEach","val","key","setItem","add","culture","info","compressed","Pako","to","toString","set","updatedCultures","has","storedData","removeItem","Ledger","Tab","createMaterialTopTabNavigator","Styles","StyleSheet","create","spinner","top","position","fab","card","padding","marginVertical","marginHorizontal","editInput","width","specialAddInsight","ExampleInsight","summary","information","source","type","Insights","props","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","size","style","refresh","SafeAreaView","FlatList","keyExtractor","_","index","EditFAB","FAB","Group","icon","open","onPress","visible","actions","onStateChange","ToolsFAB","setOpen","onAdd","onSave","InsightCard","insight","editing","showMenu","setShowMenu","link","Card","Content","Title","Paragraph","Actions","Linking","canOpenURL","Menu","onDismiss","anchor","IconButton","Item","title","Clipboard","setString","Divider","openURL","onDelete","connect","state","ownProps","user","navigation","route","cultureName","params","setCulture","setEditing","err","setErr","showErr","setShowErr","useRoute","useEffect","setOptions","fetchCulture","setCultureInPlace","newCulture","read","console","error","navigate","hideSnackbar","specInsights","ret","push","text","specializedToArray","deleteInsight","Array","i","splice","length","InsightCardView","View","Navigator","initialRouteName","Screen","row","item","Accordion","id","map","Button","mode","update","getFocusedRouteNameFromRoute","Snackbar","action","label","USER_INITIAL_STATE","updateUser","payload","resetUser","updateTheme","theme","Reducer","combineReducers","initialValues","view","flex","justifyContent","margin","overflow","recover","bottom","dispatch","bindActionCreators","remember","setRemember","snackbar","setSnackbar","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","getEmail","fields","CommonActions","reset","routes","TextInput","autoFocus","textContentType","left","Icon","ref","value","onBlur","onChangeText","HelperText","secureTextEntry","right","Checkbox","uppercase","color","fontWeight","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","onFocus","Text","styles","emptyListStyle","fontSize","textAlign","itemStyle","img","height","headerFooterStyle","backgroundColor","bottomFooterStyle","flexDirection","marginBottom","textStyle","btn","inviteModal","background","Cultures","setCultures","cultureNames","fetchCultureData","Admins","users","setUsers","React","setVisible","fetchAdminData","Alert","alert","log","onEdit","Portal","Modal","contentContainerStyle","input","paddingHorizontal","EditInsight","isSpecialized","category","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","placeholder","numberOfLines","multiline","RadioButton","onValueChange","newInsight","specialized","RecoveryValidationSchema","alignSelf","Recovery","msg","setMsg","updateAccount","updatePassword","lightTheme","DefaultTheme","roundness","colors","primary","accent","darkTheme","DarkTheme","getTheme","newTheme","leftIcon","DownloadedCultures","expanded","setExpanded","setLedger","fetchLedger","timer","setInterval","clearInterval","ledgerArray","from","description","dayjs","unix","remove","extend","relativeTime","rightIcon","Settings","HeaderButton","menu","setMenu","substr","headerRight","store","createStore","NavigatorScreen","Stack","createStackNavigator","NavigationContainer","linking","prefixes","component","CultureView","options","Header","Home","Login","Register","registerRootComponent"],"mappings":"6hBAGaA,EAAU,kDAMVC,EAAwBC,MAAaC,MAAM,CAEtDC,MAAOF,MAAaE,MAAM,yBAAyBC,SAAS,YAE5DC,SAAUJ,MAAaG,SAAS,cAOrBE,EAAmB,CAC9BC,KACE,mFACFJ,MAAO,yDACPE,SACE,4GACFG,qBAAsB,sCAOXC,EAA2BR,MAAaC,MAAM,CAGzDK,KAAMN,MACHS,IAAI,EAAG,aACPC,IAAI,GAAI,YACRP,SAAS,YAEZD,MAAOF,MAAaE,MAAM,yBAAyBC,SAAS,YAG5DC,SAAUJ,MACPG,SAAS,YACTM,IAAI,EAAG,iCACPC,IAAI,GAAI,YACRC,QACC,4DACA,0GAGJJ,qBAAsBP,MACnBG,SAAS,YACTS,MAAM,CAACZ,IAAQ,YAAa,MAAO,yB,2aClDjC,IAAMa,GAAb,iCAOE,WAAmBC,EAAuBC,GAAqB,IAAD,sBAC5D,cAAMD,IADWA,SAA2C,EAApBC,aAAoB,EAPhE,cAA8BC,QAejBC,GAAb,iCAIE,WAAmBH,GAAiB,IAAD,sBACjC,0BAAkBA,IADDA,SAAgB,EAJrC,cAAkCE,QAYrBE,GAAb,iFAWmBC,GAXnB,6GAcuBC,MAAM,GAAGtB,EAAUuB,UAAUF,GAAa,CACzDG,OAAQ,MACRC,QAAS,CAAEC,OAAQ,uBAhB3B,OAcMC,EAdN,4DAmBY,IAAIR,GAAJ,MAnBZ,kCAsBqBQ,EAASC,QAtB9B,WAsBQA,EAtBR,OAuBSD,EAASE,GAvBlB,uBAwBY,IAAId,GAASa,EAAI,IAASD,EAASG,QAxB/C,iCA2BWF,GA3BX,gGAwCuBP,EAAkBU,GAxCzC,6GA2CuBT,MAAM,GAAGtB,EAAUuB,UAAUF,GAAa,CACzDG,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRM,cAAc,UAAWD,MA/CnC,OA2CMJ,EA3CN,4DAmDY,IAAIR,GAAJ,MAnDZ,kCAsDqBQ,EAASC,QAtD9B,WAsDQA,EAtDR,OAuDSD,EAASE,GAvDlB,uBAwDY,IAAId,GAASa,EAAI,IAASD,EAASG,QAxD/C,iCA2DWF,GA3DX,4FAyEmBP,EAAkBY,EAAUF,GAzE/C,6GA4EuBT,MAAM,GAAGtB,EAAUuB,UAAUF,GAAa,CACzDG,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBM,cAAc,UAAWD,GAE3BE,KAAMC,KAAKC,UAAUF,MAnF7B,OA4EMN,EA5EN,4DAsFY,IAAIR,GAAJ,MAtFZ,kCAyFqBQ,EAASC,QAzF9B,WAyFQA,EAzFR,OA0FSD,EAASE,GA1FlB,uBA2FY,IAAId,GAASa,EAAI,IAASD,EAASG,QA3F/C,iCA8FWF,GA9FX,+FA2GsBP,EAAkBU,GA3GxC,6GA8GuBT,MAAM,GAAGtB,EAAUuB,UAAUF,GAAa,CACzDG,OAAQ,SACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBM,cAAc,UAAWD,MAnHnC,OA8GMJ,EA9GN,sDAuHM,IAAIR,GAAJ,MAvHN,kCA0HqBQ,EAASC,QA1H9B,WA0HQA,EA1HR,OA2HSD,EAASE,GA3HlB,uBA4HY,IAAId,GAASa,EAAI,IAASD,EAASG,QA5H/C,iCA+HWF,GA/HX,6FA6IoBP,EAAkBY,EAAUF,GA7IhD,mFA8IQN,EAAU,CACZC,OAAQ,mBACR,eAAgB,yBAGJU,IAAVL,IACFN,EAAO,cAAP,UAAqCM,GApJ3C,4BAyJuBT,MAAM,GAAGtB,EAAUuB,UAAUF,GAAa,CACzDG,OAAQ,OACRC,QAASA,EACTQ,KAAMC,KAAKC,UAAUF,MA5J7B,OAyJMN,EAzJN,6DA+JY,IAAIR,GAAJ,MA/JZ,mCAkKqBQ,EAASC,QAlK9B,WAkKQA,EAlKR,OAmKSD,EAASE,GAnKlB,uBAoKY,IAAId,GAASa,EAAI,IAASD,EAASG,QApK/C,iCAuKWF,GAvKX,yECnBaS,GAAb,WAUE,WACS7B,EACAJ,EACAkC,GAAqB,GAC3B,iBAHM9B,OAGP,KAFOJ,QAEP,KADOkC,YAbX,2CAmFIhC,EACAG,EACAsB,GArFJ,4FAuFUX,GAAImB,IAAJ,WACOC,KAAKpC,MAChB,CACEA,MAAOoC,KAAKpC,MACZI,KAAMgC,KAAKhC,KACXF,SAAUA,EACVmC,sBAAuBhC,GAEzBsB,IA/FN,0FAuBmB3B,EAAe2B,GAvBlC,kGAwBqBX,GAAIsB,QAAJ,WAAuBtC,EAAS2B,IAxBrD,cAwBQH,EAxBR,yBAyBWA,GAzBX,0FAsCqBxB,EAAeE,GAtCpC,kGAuCuBc,GAAIuB,KAAK,SAAU,CAAEvC,MAAOA,EAAOE,SAAUA,KAvCpE,cAuCUsB,EAvCV,yBAwCWA,GAxCX,yFAoDoBG,GApDpB,kGAqDqBX,GAAIsB,QAAQ,UAAWX,IArD5C,cAqDQH,EArDR,yBAsDWA,EAAI,QAtDf,2FAmEsBxB,EAAe2B,GAnErC,4FAoEUX,GAAIuB,KAAK,iBAAkB,CAAEvC,MAAOA,GAAS2B,IApEvD,mGAiHI3B,EACAE,EACAG,EACAsB,GApHJ,4FAsHUX,GAAImB,IAAJ,WACOnC,EACX,CACEA,MAAOA,EACPE,SAAUA,EACVmC,sBAAuBhC,GAEzBsB,IA7HN,4FA2IuB3B,GA3IvB,kGA4IsBgB,GAAIuB,KAAK,kBAAmB,CAAEvC,MAAOA,KA5I3D,cA4IUwC,EA5IV,yBA6IWA,EAAG,KA7Id,2FA0JsBxC,EAAe2B,GA1JrC,4FA2JUX,GAAIyB,OAAJ,WAAsBzC,EAAS2B,IA3JzC,2FA0KIvB,EACAJ,EACAE,EACAG,EACAsB,GA9KJ,kGAgLuBX,GAAIuB,KACrB,YACA,CACEnC,KAAMA,EACNJ,MAAOA,EACPE,SAAUA,EACVmC,sBAAuBhC,GAEzBsB,IAxLN,cAgLUH,EAhLV,yBA2LWA,GA3LX,qEC4BO,ICnBA,GDmBMkB,GAAb,WASE,WACStC,EACAuC,EACAC,EACAC,GACN,iBAJMzC,OAIP,KAHOuC,kBAGP,KAFOC,sBAEP,KADOC,WAbX,2CA2DelB,GA3Df,4FA4DUX,GAAIuB,KACR,WACA,CACEnC,KAAMgC,KAAKhC,KACX0C,iBAAkBV,KAAKO,gBACvBI,qBAAsBX,KAAKQ,qBAE7BjB,IAnEN,2FA6FeA,GA7Ff,+EA8FUqB,EAAO,CACXF,iBAAkBV,KAAKO,gBACvBI,qBAAsBX,KAAKQ,oBAC3BxC,KAAMgC,KAAKhC,MAjGjB,mBAoGUY,GAAImB,IAAJ,aAAqBC,KAAKhC,KAAQ4C,EAAMrB,IApGlD,0FAyBmBvB,GAzBnB,kGA0BqBY,GAAIiC,IAAJ,aAAqB7C,IA1B1C,cA0BQoB,EA1BR,yBA4BW,IAAIY,KACTZ,EAAI,KACJA,EAAI,iBACJA,EAAI,qBACJA,EAAI,WAhCV,6LA6CqBR,GAAIiC,IAAI,cA7C7B,cA6CQzB,EA7CR,yBA+CWA,EAAI,UA/Cf,2FAgFsBpB,EAAcuB,GAhFpC,4FAiFUX,GAAIyB,OAAJ,aAAwBrC,EAAQuB,IAjF1C,qE,uBCqBS,SAAeuB,IAAf,iBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACcE,IAAaC,QAxCT,YAuClB,UACCN,EADD,gDAGI,IAAIO,KAHR,cAMDC,EAAS1B,KAAK2B,MAAMT,GAAX,SANR,kBAOE,IAAIO,IAAIG,OAAOC,QAAQH,KAPzB,4DAgCP,SAASI,EAAWC,GAClB,IAAIL,EAAS,CAAEK,SAAU,IACzBA,EAASC,SAAQ,SAACC,EAAKC,GAAN,OAAeR,EAAOK,SAASG,GAAOD,KAEvDV,IAAaY,QA3EU,UA2EQnC,KAAKC,UAAUyB,IAezC,SAAeU,EAAIC,GAAnB,mBAAAhB,EAAAC,OAAA,kEAAAD,EAAA,MACcT,GAAQO,IAAIkB,IAD1B,cACCC,EADD,OAECC,EAAaC,WAAaxC,KAAKC,UAAUqC,GAAO,CAAEG,GAAI,WAC5DlB,IAAaY,QAAQE,EAASE,EAAWG,YAHpC,WAAArB,EAAA,MAKgBD,KALhB,QAKDW,EALC,QAMIY,IAAIN,EAASC,EAAKvB,UAC3Be,EAAWC,GAPN,6D,SA1EA,4BAAAV,EAAAC,OAAA,kEAAAD,EAAA,MACyBT,GAAQQ,QADjC,cACCwB,EADD,kBAAAvB,EAAA,MAEgBD,KAFhB,OAEDW,EAFC,OAILa,EAAgBZ,SACd,SAAOK,GAAP,iBAAAhB,EAAAC,OAAA,gDACUhD,EAAmB+D,EAAnB/D,KAAMyC,EAAasB,EAAbtB,SACVgB,EAASc,IAAIvE,IAASyD,EAASZ,IAAI7C,GAAQyC,GAC7CqB,EAAI9D,GAHR,+DALG,6D,gBA4CA,SAAoB+D,GAApB,iBAAAhB,EAAAC,OAAA,kEAAAD,EAAA,MACoBE,IAAaC,QAAQa,IADzC,cACCS,EADD,OAEC5B,EAAesB,WAAaM,EAAY,CAAEL,GAAI,WAF/C,kBAGEzC,KAAK2B,MAAMT,IAHb,6D,iBAgDA,SAAsBmB,GAAtB,eAAAhB,EAAAC,OAAA,kEAAAD,EAAA,MACgBD,KADhB,QACDW,EADC,QAGQc,IAAIR,IACfd,IAAawB,WAAWV,GAG1BN,EAASpB,OAAO0B,GAChBP,EAAWC,GARN,6D,CA7GQiB,Q,KCmCjB,IAAMC,GAAMC,cAENC,GAASC,IAAWC,OAAO,CAC/BC,QAAS,CAAEC,IAAK,MAAOC,SAAU,YAEjCC,IAAK,GAILC,KAAM,CACJC,QAAS,GACTC,eAAgB,EAChBC,iBAAkB,GAGpBC,UAAW,CACTC,MAAO,QAGTC,kBAAmB,CACjBL,QAAS,GACTC,eAAgB,EAChBC,iBAAkB,KAIhBI,GAAiB,CACrBC,QAAS,UACTC,YAAa,cACbC,OAAQ,CAAElD,KAAM,kBAAmBmD,KAAM,SAsQ3C,SAASC,GAASC,GAA0C,IAClDC,EAAoCD,EAApCC,SAAUC,EAA0BF,EAA1BE,UAAWC,EAAeH,EAAfG,WAD4B,EAErBC,oBAAS,GAFY,WAElDC,EAFkD,KAEtCC,EAFsC,KAIzD,IAAKL,EACH,OACE,kBAACM,EAAA,EAAD,CAAmBC,WAAW,EAAMC,KAAK,QAAQC,MAAO9B,GAAOG,UAInE,IAAM4B,EAAU,WACdT,IACAI,GAAc,IAGhB,OACE,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACElE,KAAMsD,EACNa,aAAc,SAACC,EAAGC,GAAJ,OAAcA,EAAM7C,YAClC+B,UAAW,kBAAMS,KACjBN,WAAYA,EACZF,WAAYA,KAoBpB,SAASc,GAAQjB,GACf,OACE,kBAACkB,EAAA,EAAIC,MAAL,CACET,MAAO9B,GAAOM,IACdkC,KAAK,SACLC,MAAM,EACNC,QAAS,kBAAMtB,EAAMsB,WACrBC,SAAS,EACTC,QAAS,GACTC,cAAe,kBAAMzB,EAAMsB,aAsBjC,SAASI,GAAS1B,GAA2C,IAAD,EAClCI,oBAAS,GADyB,WACnDiB,EADmD,KAC7CM,EAD6C,KAG1D,OACE,kBAACT,EAAA,EAAIC,MAAL,CACEI,SAAS,EACTb,MAAO9B,GAAOM,IACdmC,KAAMA,EACND,KAAMC,EAAO,QAAU,SACvBG,QAAS,CACP,CAAEJ,KAAM,OAAQE,QAAS,kBAAMtB,EAAM4B,UACrC,CAAER,KAAM,eAAgBE,QAAS,kBAAMtB,EAAM6B,YAE/CJ,cAAe,kBAAME,GAASN,MA4BpC,SAASS,GAAY9B,GAA8C,IACzD+B,EAAqC/B,EAArC+B,QAASf,EAA4BhB,EAA5BgB,MAAOgB,EAAqBhC,EAArBgC,QAASV,EAAYtB,EAAZsB,QAD+B,EAEhClB,oBAAS,GAFuB,WAEzD6B,EAFyD,KAE/CC,EAF+C,KAG1DC,EAAOJ,EAAQlC,OAAOlD,KAE5B,OACE,kBAACyF,EAAA,EAAD,CAAM1B,MAAO9B,GAAOO,KAAMmC,QAAS,kBAAMU,GAAWV,EAAQN,KAC1D,kBAACoB,EAAA,EAAKC,QAAN,KACE,kBAACC,EAAA,EAAD,KAAQP,EAAQpC,SAChB,kBAAC4C,EAAA,EAAD,KAAYR,EAAQnC,cAEtB,kBAACwC,EAAA,EAAKI,QAAN,KACGL,GAAQM,IAAQC,WAAWP,IAC1B,kBAACQ,EAAA,EAAD,CACEpB,QAASU,EACTW,UAAW,kBAAMV,GAAY,IAC7BW,OACE,kBAACC,EAAA,EAAD,CACE1B,KAAK,OACLX,KAAM,GACNa,QAAS,kBAAMY,GAAY,OAI/B,kBAACS,EAAA,EAAKI,KAAN,CACEC,MAAM,YACN1B,QAAS,kBAAM2B,IAAUC,UAAUf,MAErC,kBAACgB,EAAA,EAAD,MACA,kBAACR,EAAA,EAAKI,KAAN,CACEC,MAAM,YACN1B,QAAS,kBAAMmB,IAAQW,QAAQjB,OAIpCH,GACC,kBAACc,EAAA,EAAD,CACE1B,KAAK,SACLX,KAAM,GACNa,QAAS,kBAAMtB,EAAMqD,SAASrC,QAQ3BsC,oBACb,SACEC,EACAC,GAFF,MAMM,CACJlI,MAAOiI,EAAME,KAAKnI,MAClBoI,WAAYF,EAASE,WACrBC,MAAOH,EAASG,SAElB,KAZaL,EAzZf,SAAqBtD,GACnB,IAAM4D,EAAc5D,EAAM2D,MAAME,OAAS7D,EAAM2D,MAAME,OAAOD,YAAc,GACpEtI,EAAQ0E,EAAM1E,OAAS,GAFwB,EAIzB8E,mBAAyB,MAJA,WAIhDtC,EAJgD,KAIvCgG,EAJuC,OAKvB1D,oBAAkB,GALK,WAK9C4B,EAL8C,KAKrC+B,EALqC,OAM/B3D,mBAAiB,IANc,WAM9C4D,EAN8C,KAMzCC,EANyC,OAOvB7D,oBAAkB,GAPK,WAO9C8D,EAP8C,KAOrCC,EAPqC,KAQ/CR,EAAQS,qBAEdC,qBAAU,kBAAMrE,EAAM0D,WAAWY,WAAW,CAAEtB,MAAOY,MAAgB,IACrES,qBAAU,WACRE,MACC,IAUH,IAAMC,EAAoB,SAAC1G,GACzB,IAAM2G,EAAa,IAAIpI,GACrByB,EAAQ/D,KACR+D,EAAQxB,gBACRwB,EAAQvB,oBACRuB,EAAQtB,UAGVsH,EAAWW,IAMPF,EAAe,4BAAAzH,EAAAC,OAAA,2EAAAD,EAAA,MAEKT,GAAQO,IAAIgH,IAFjB,OAEX9F,EAFW,OAGjBgG,EAAWhG,GAHM,4EAAAhB,EAAA,MAOO2B,GAAOiG,KAAKd,IAPnB,QAOT9F,EAPS,OAQfgG,EAAWhG,GARI,kDAUf6G,QAAQC,MAAR,MAEA5E,EAAM0D,WAAWmB,SAAS,QAZX,wEAmCfC,EAAe,kBAAMX,GAAW,IAEtC,IAAKrG,EACH,OACE,kBAACyC,EAAA,EAAD,CAAmBC,WAAW,EAAMC,KAAK,QAAQC,MAAO9B,GAAOG,UAInE,IAAIgG,EFxJC,SACL9E,GAEA,IAAI+E,EAAM,GACV,IAAK,IAAIrH,KAAOsC,EACd+E,EAAIC,KAAK,CAAEC,KAAMvH,EAAKsC,SAAUA,EAAStC,KAE3C,OAAOqH,EEiJYG,CAAmBrH,EAAQvB,qBAOxC6I,EAAgB,SAACpE,GACrB,GAAIA,aAAiBqE,MAAO,CAAC,IAAD,MACTrE,EADS,GACnBrD,EADmB,KACd2H,EADc,KAE1BxH,EAAQvB,oBAAoBoB,GAAK4H,OAAOD,EAAG,GAEK,IAA5CxH,EAAQvB,oBAAoBoB,GAAK6H,eAC5B1H,EAAQvB,oBAAoBoB,QAGrCG,EAAQxB,gBAAgBiJ,OAAOvE,EAAO,GAGxCwD,EAAkB1G,IAsCd2H,EAAkB,SACtB1D,EACAf,GAEA,OACE,kBAACc,GAAD,CACEnE,IAAG,gBAAkBqD,EAAM7C,WAC3B6C,MAAOA,EACPgB,QAASA,EACTD,QAASA,EACTT,QAAS,SAACN,GAAD,OACPhB,EAAM0D,WAAWmB,SAAS,cAAe,CACvC/G,QAASA,EACTkD,MAAOA,KAGXqC,SAAU+B,KAKhB,OACE,kBAACM,EAAA,EAAD,KACE,kBAAChH,GAAIiH,UAAL,CAAeC,iBAAiB,WAC9B,kBAAClH,GAAImH,OAAL,CAAY9L,KAAK,YACd,kBACC,kBAACgG,GAAD,CACEI,WAAY,SAAC2F,GAAD,OACVL,EAAgBK,EAAIC,KAAMD,EAAI9E,QAEhCd,UAAW,oBAAApD,EAAAC,OAAA,yEAAYwH,KAAZ,6DACXtE,SAAUnC,EAAQxB,qBAIxB,kBAACoC,GAAImH,OAAL,CAAY9L,KAAK,gBACd,kBACC,kBAACgG,GAAD,CACEE,SAAU8E,EACV7E,UAAW,oBAAApD,EAAAC,OAAA,yEAAYwH,KAAZ,6DACXpE,WAAY,SAAC2F,GAGN,IAAD,EACuBA,EAAIC,KAAvBb,EADJ,EACIA,KAAMjF,EADV,EACUA,SACd,OACE,kBAAC,IAAK+F,UAAN,CAAgBhD,MAAOkC,EAAMe,GAAIH,EAAI9E,OAClCf,EAASiG,KAAI,SAACH,EAAsB/E,GAAvB,OACZyE,EAAgBM,EAAM,CAACb,EAAMlE,OAE9BgB,GACC,kBAACmE,EAAA,EAAD,CACE/E,KAAK,OACLE,QAAS,kBAnEA3D,EAmE4BuH,EAlEzDpH,EAAQvB,oBAAoBoB,GAAKsH,KAAKvF,SAEtC8E,EAAkB1G,GAHU,IAACH,GAoETyI,KAAK,YACL1F,MAAO9B,GAAOa,mBAEb,YAUnB,oCACGnE,IACE0G,EACC,kBAACN,GAAD,CACEG,OAAQ,kBAvJE,EAAA/E,EAAAC,OAAA,2EAAAD,EAAA,MAEZgB,EAAQuI,OAAO/K,IAFH,OAGlBkJ,EAAkB1G,GAHA,gDAKlBqG,GAAW,GAIXF,EAAO,KAAI9F,YACXwG,QAAQC,MAAR,MAVkB,QAYpBb,GAAY/B,GAZQ,iEAwJVJ,MAxGiB,WAAO,IAAD,EACjC,gBAAQ0E,uCAA6B3C,IAArC,EAA+C,WAC7C,IAAK,UACH7F,EAAQxB,gBAAgB2I,KAAKvF,IAC7B,MACF,IAAK,cACH5B,EAAQvB,oBAAoB,uBAAyB,CAACmD,IAI1D8E,EAAkB1G,MAiGV,kBAACmD,GAAD,CAASK,QAAS,kBAAMyC,GAAY/B,QAG1C,kBAACuE,EAAA,EAAD,CACEhF,QAAS2C,EACTtB,UAAWkC,EACX0B,OAAQ,CACNC,MAAO,OACPnF,QAASwD,IAGVd,O,koBChUF,IAAM0C,GAAqB,CAAEjD,KAAK,GAAD,GAAO,IAAI7H,GAAM,GAAI,KAAON,MAAO,ICD9DqL,GAAa,SAAClD,GAAD,MAA0B,CAClD3D,KAAM,cACN8G,QAASnD,IAGEoD,GAAY,iBAAO,CAC9B/G,KAAM,aACN8G,QAAS,KCPEE,GAAc,SAACC,GAAD,MAA4B,CACrDjH,KAAM,eACN8G,QAASG,ICKEC,GAAUC,YAAgB,CACrCF,MCN0B,WAGtB,IAFJxD,EAEG,uDAL8B,OAIjCiD,EACG,uCACH,OAAQA,EAAO1G,MACb,IAAK,eACH,OAAO0G,EAAOI,QAChB,QACE,OAAOrD,IDDXE,KHNyB,WAGrB,IAFJF,EAEG,uDAFKmD,GACRF,EACG,uCACH,OAAQA,EAAO1G,MACb,IAAK,cACH,OAAO,GAAP,GAAY0G,EAAOI,SACrB,IAAK,aACH,OAAO,GAAP,GAAYF,IACd,QACE,OAAOnD,MKyBP2D,GAA6B,CAEjCvN,MAAO,GACPE,SAAU,IAON+E,GAASC,IAAWC,OAAO,CAC/BqI,KAAM,CACJC,KAAM,EACNC,eAAgB,eAChBC,OAAQ,GACRC,SAAU,UAGZC,QAAS,CACPvI,SAAU,WACVwI,OAAQ,KAqLZ,IAQenE,eAAQ,MARI,SAACoE,GAAD,OACzBC,YACE,CACEhB,eAEFe,KAGWpE,EAlLf,SAAetD,GAAmC,IAAD,EACfI,oBAAS,GADM,WACxCwH,EADwC,KAC9BC,EAD8B,OAEfzH,oBAAS,GAFM,WAExC0H,EAFwC,KAE9BC,EAF8B,OAGzB3H,mBAAS,IAHgB,WAGxC4D,EAHwC,KAGnCC,EAHmC,OAIT7D,oBAAS,GAJA,WAIxC4H,EAJwC,KAI3BC,EAJ2B,KAOzCtO,EAAQuO,mBACRrO,EAAWqO,mBAR8B,EAmB3CC,aAAU,CACZC,iBAAkB5O,EAClB0N,cAAeA,GACfmB,SAAU,SAACC,GAAD,OAAYC,EAAMD,MAX5BA,EAX6C,EAW7CA,OACAE,EAZ6C,EAY7CA,aACAC,EAb6C,EAa7CA,WACAC,EAd6C,EAc7CA,OACAC,EAf6C,EAe7CA,QACAC,EAhB6C,EAgB7CA,aACAC,EAjB6C,EAiB7CA,cACAC,EAlB6C,EAkB7CA,cAOFzE,qBAAU,YACS,mBAAAvH,EAAAC,OAAA,kEAAAD,EAAA,MACKE,IAAaC,QAlDf,qBAiDH,QACTtD,EADS,UAGbkP,EAAc,QAASlP,GACvBkO,GAAY,IAJC,4DAQjBkB,KACC,IAeH,IAAMR,EAAQ,SAAOS,GAAP,uBAAAlM,EAAAC,OAAA,uDACJpD,EAAoBqP,EAApBrP,MAAOE,EAAamP,EAAbnP,SACP6J,EAA2B1D,EAA3B0D,WAAYiD,EAAe3G,EAAf2G,WAFR,oBAAA7J,EAAA,MAMElB,GAAM2M,MAAM5O,EAAOE,IANrB,OAMVsC,EANU,8DAQV4L,GAAY,GACZ9D,EAAO,KAAI9F,YATD,yCAcNyJ,EAdM,oCAAA9K,EAAA,MAeFE,IAAaY,QAxFH,mBAwF4BjE,IAfpC,mDAAAmD,EAAA,MAiBFE,IAAawB,WA1FH,qBAyER,2DAoBVmG,QAAQC,MAAM,iCAAd,MApBU,QAuBZ+B,EAAWxK,GAEXuH,EAAWgE,SACTuB,gBAAcC,MAAM,CAAElI,MAAO,EAAGmI,OAAQ,CAAC,CAAEpP,KAAM,YA1BvC,yEAoDd,OACE,kBAAC2L,EAAA,EAAD,CAAMhF,MAAO9B,GAAOuI,MAClB,kBAACzB,EAAA,EAAD,KACE,kBAAC0D,GAAA,EAAD,CACEC,WAAW,EACXC,gBAAgB,eAChBlD,KAAK,WACLxB,MAAO8D,EAAO/O,OAASgP,EAAQhP,MAC/B4P,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,UAC3B0M,MAAM,QACNgD,IAAK9P,EACL+P,MAAOpB,EAAO3O,MACdgQ,OAAQlB,EAAW,SACnBmB,aAAcpB,EAAa,WAE5BE,EAAO/O,OAASgP,EAAQhP,OACvB,kBAACkQ,GAAA,EAAD,CAAY/J,KAAK,SAAS4I,EAAO/O,QAGrC,kBAAC+L,EAAA,EAAD,KACE,kBAAC0D,GAAA,EAAD,CACEhD,KAAK,WACLK,MAAM,WACNgD,IAAK5P,EACL0P,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,SAC3B+P,gBAAiB9B,EACjBpD,MAAO8D,EAAO7O,UAAY8O,EAAQ9O,SAClC8P,OAAQlB,EAAW,YACnBiB,MAAOpB,EAAOzO,SACd+P,aAAcpB,EAAa,YAC3BuB,MACE,kBAACX,GAAA,EAAUI,KAAX,CACEzP,KAAMiO,EAAc,MAAQ,UAC5B1G,QAAS,kBAAM2G,GAAgBD,QAIpCU,EAAO7O,UAAY8O,EAAQ9O,UAC1B,kBAACgQ,GAAA,EAAD,CAAY/J,KAAK,SAAS4I,EAAO7O,WAGrC,kBAACmQ,GAAA,EAASjH,KAAV,CACE0D,MAAM,cACNpL,OAAQuM,EAAW,UAAY,YAC/BtG,QAAS,kBAAMuG,GAAaD,MAE9B,kBAACzB,EAAA,EAAD,CAAQC,KAAK,YAAY9E,QAASsH,GAAlC,UAGA,kBAACzC,EAAA,EAAD,CACEzF,MAAO9B,GAAO4I,QACdpB,KAAK,OACL9E,QAtEiB,oBAAAxE,EAAAC,OAAA,kEAAAD,EAAA,MACfgM,EAAc,UADC,eAEAnN,IAAjB+M,EAAO/O,MAFU,4CAAAmD,EAAA,MAIXlB,GAAM4L,QAAQc,EAAO3O,QAJV,OAKjBsK,EAAO,iBAAiBqE,EAAO3O,OAC/BoO,GAAY,GANK,kDAQjBpD,QAAQC,MAAM,kCAAd,MACAX,EAAO,KAAI9F,YACX4J,GAAY,GAVK,gCAanBA,GAAY,GACZ9D,EAAO,2CAdY,kEAuEjBgG,WAAW,GAJb,uBAQA,kBAAC1D,EAAA,EAAD,CACEhF,QAASuG,EACTlF,UAAW,kBAAMmF,GAAY,IAC7BvB,OAAQ,CAAEC,MAAO,KAAMnF,QAAS,kBAAMyG,GAAY,MAEjD/D,O,SC9LHkD,GAAgC,CACpCnN,KAAM,GACNJ,MAAO,GACPE,SAAU,GACVG,qBAAsB,IAGlB4E,GAASC,IAAWC,OAAO,CAC/BqI,KAAM,CACJC,KAAM,EACNC,eAAgB,eAChBC,OAAQ,GACRC,SAAU,UAEZpF,KAAM,CACJ+H,MAAO,OACPC,WAAY,UAsMhB,IAQe7G,eAAQ,MARI,SAACoE,GAAD,OACzBC,YACE,CACEhB,eAEFe,KAGWpE,EAjMf,SAAkBtD,GAChB,IAAM1E,EAAQ0E,EAAM2D,MAAME,OAAS7D,EAAM2D,MAAME,OAAOvI,MAAQ,GADZ,EAGZ8E,oBAAS,GAHG,WAG3C4H,EAH2C,KAG9BC,EAH8B,OAIJ7H,oBAAS,GAJL,WAI3CgK,EAJ2C,KAI1BC,EAJ0B,OAKlBjK,oBAAS,GALS,WAK3C0H,EAL2C,KAKjCC,EALiC,OAM5B3H,mBAAS,IANmB,WAM3C4D,EAN2C,KAMtCC,EANsC,OAOpB7D,mBAAoB,SAPA,WAO3CkK,EAP2C,KAOlCC,EAPkC,KAS5CxQ,EAAOmO,mBACPvO,EAAQuO,mBACRrO,EAAWqO,mBACXlO,EAAuBkO,mBAZqB,EAqB9CC,aAAU,CACZC,iBAAkBnO,EAClBiN,cAAeA,GACfmB,SAAU,SAACC,GAAD,OAAYkC,EAASlC,MAT/BA,EAfgD,EAehDA,OACAE,EAhBgD,EAgBhDA,aACAC,EAjBgD,EAiBhDA,WACAC,EAlBgD,EAkBhDA,OACAC,EAnBgD,EAmBhDA,QACAC,EApBgD,EAoBhDA,aAYI4B,EAAW,SAAOxB,GAAP,2BAAAlM,EAAAC,OAAA,uDACPhD,EAAgDiP,EAAhDjP,KAAMJ,EAA0CqP,EAA1CrP,MAAOE,EAAmCmP,EAAnCnP,SAAUG,EAAyBgP,EAAzBhP,qBACvB0J,EAA2B1D,EAA3B0D,WAAYiD,EAAe3G,EAAf2G,WAFL,oBAAA7J,EAAA,MAMDlB,GAAMkD,OAChB/E,EACAJ,EACAE,EACAG,EACAsB,IAXW,OAMba,EANa,8DAcb4L,GAAY,GACZ9D,EAAO,KAAI9F,YAfE,2BAmBfwI,EAAWxK,GAEXuH,EAAWgE,SACTuB,gBAAcC,MAAM,CAAElI,MAAO,EAAGmI,OAAQ,CAAC,CAAEpP,KAAM,YAtBpC,iEAkCX0Q,EAAmB,SAACzK,GAEC,IACjB0K,EAAc1K,EAAd0K,UAER,OAAIJ,IAAYI,GAAehC,EAAOgC,IAAe/B,EAAQ+B,GAIzDhC,EAAOgC,IAAc/B,EAAQ+B,GACxB,kBAACb,GAAA,EAAD,CAAY/J,KAAK,SAAS4I,EAAOgC,IAEjC,kBAACb,GAAA,EAAD,CAAY/J,KAAK,QAAQhG,EAAiB4Q,IAN1C,MAUX,OACE,kBAAChF,EAAA,EAAD,CAAMhF,MAAO9B,GAAOuI,MAClB,kBAACzB,EAAA,EAAD,KACE,kBAAC0D,GAAA,EAAD,CACEC,WAAW,EACXC,gBAAgB,eAChBqB,QAAS,kBAAMJ,EAAW,UAC1BnE,KAAK,WACLxB,MAAO8D,EAAO/O,OAASgP,EAAQhP,MAC/B4P,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,UAC3B0M,MAAM,QACNgD,IAAK9P,EACL+P,MAAOpB,EAAO3O,MACdiQ,aAAcpB,EAAa,SAC3BmB,OAAQlB,EAAW,WAErB,kBAACgC,EAAD,CAAkBC,UAAU,WAE9B,kBAAChF,EAAA,EAAD,KACE,kBAAC0D,GAAA,EAAD,CACEE,gBAAgB,OAChBqB,QAAS,kBAAMJ,EAAW,SAC1BnE,KAAK,WACLxB,MAAO8D,EAAO3O,MAAQ4O,EAAQ5O,KAC9BwP,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,YAC3B0M,MAAM,OACNgD,IAAK1P,EACL2P,MAAOpB,EAAOvO,KACd6P,aAAcpB,EAAa,QAC3BmB,OAAQlB,EAAW,UAErB,kBAACgC,EAAD,CAAkBC,UAAU,UAE9B,kBAAChF,EAAA,EAAD,KACE,kBAAC0D,GAAA,EAAD,CACEhD,KAAK,WACLK,MAAM,WACNkE,QAAS,kBAAMJ,EAAW,aAC1Bd,IAAK5P,EACL0P,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,SAC3B+P,gBAAiB9B,EACjBpD,MAAO8D,EAAO7O,UAAY8O,EAAQ9O,SAClC8P,OAAQlB,EAAW,YACnBiB,MAAOpB,EAAOzO,SACd+P,aAAcpB,EAAa,YAC3BuB,MACE,kBAACX,GAAA,EAAUI,KAAX,CACEzP,KAAMiO,EAAc,MAAQ,UAC5B1G,QAAS,kBAAM2G,GAAgBD,QAIrC,kBAACyC,EAAD,CAAkBC,UAAU,cAE9B,kBAAChF,EAAA,EAAD,KACE,kBAAC0D,GAAA,EAAD,CACEhD,KAAK,WACLK,MAAM,wBACNkE,QAAS,kBAAMJ,EAAW,yBAC1Bd,IAAKzP,EACLuP,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,gBAC3B+P,gBAAiBM,EACjBxF,MAAO8D,EAAO1O,sBAAwB2O,EAAQ3O,qBAC9C2P,OAAQlB,EAAW,wBACnBiB,MAAOpB,EAAOtO,qBACd4P,aAAcpB,EAAa,wBAC3BuB,MACE,kBAACX,GAAA,EAAUI,KAAX,CACEzP,KAAMqQ,EAAkB,MAAQ,UAChC9I,QAAS,kBAAM+I,GAAoBD,QAIzC,kBAACK,EAAD,CAAkBC,UAAU,0BAE9B,kBAAChF,EAAA,EAAD,KACE,kBAACkF,GAAA,EAAD,wFAGE,kBAACA,GAAA,EAAD,CACEtJ,QAAS,kBAAMmB,IAAQW,QZlLF,0BYmLrB1C,MAAO9B,GAAOuD,MAEb,IAJH,oBAHF,MAaF,kBAACgE,EAAA,EAAD,CAAQC,KAAK,YAAY9E,QAASsH,GAAlC,YAGA,kBAACrC,EAAA,EAAD,CACEhF,QAASuG,EACTlF,UAAW,kBAAMmF,GAAY,IAC7BvB,OAAQ,CAAEC,MAAO,KAAMnF,QAAS,kBAAMyG,GAAY,MAEjD/D,O,kDCxOH6G,GAAShM,IAAWC,OAAO,CAC/BC,QAAS,CAAEC,IAAK,MAAOC,SAAU,YACjC6L,eAAgB,CACd1L,QAAS,GACT2L,SAAU,GACVC,UAAW,UAEbC,UAAW,CACT7L,QAAS,IAEX8L,IAAK,CACH9L,QAAS,GACT+L,OAAQ,GACR3L,MAAO,OAET4L,kBAAmB,CACjB5L,MAAO,OACP2L,OAAQ,GACRE,gBAAiB,WAEnBC,kBAAmB,CACjBlE,KAAM,EACNmE,cAAe,MACflE,eAAgB,gBAChB7H,MAAO,OACP2L,OAAQ,GACRE,gBAAiB,UACjBpM,SAAU,WACVwI,OAAQ,EACR8B,KAAM,EACNQ,MAAO,EACPyB,aAAc,GAEhBC,UAAW,CACTT,UAAW,SACXd,MAAO,OACPa,SAAU,GACV3L,QAAS,GAEXsM,IAAK,GACLxM,IAAK,CACHD,SAAU,WACVqI,OAAQ,GACRyC,MAAO,EACPtC,OAAQ,GAGVN,KAAM,CACJC,KAAM,GAGRuE,YAAa,CACXvM,QAAS,GACTwM,WAAY,SAGd/O,KAAM,CACJuK,KAAM,KAgBJ1I,GAAMC,cAuCZ,SAASkN,GAAS7L,GAA0C,IAAD,EACzBI,mBAAS,MADgB,WAClD5C,EADkD,KACxCsO,EADwC,KAWzD,OATAzH,qBAAU,YACiB,mBAAAvH,EAAAC,OAAA,kEAAAD,EAAA,MACET,GAAQQ,QADV,OACnBkP,EADmB,OAEvBD,EAAYC,GAFW,4DAKzBC,KACC,IAEExO,EAOH,kBAACoD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACElE,KAAMa,EACNsD,aAAc,SAACC,EAAGC,GAAJ,OAAcA,EAAM7C,YAClCgC,WAAY,YAAe,IAAZ4F,EAAW,EAAXA,KACb,OACE,kBAAC,IAAKhD,KAAN,CACEC,MAAO+C,EAAKhM,KACZuH,QAAS,kBACPtB,EAAM0D,WAAWmB,SAAS,UAAW,CAAEjB,YAAamC,EAAKhM,QAE3DgQ,MAAO,kBACL,kBAACrE,EAAA,EAAD,CACEhF,MAAO,CACL0G,KAAM,EACNmE,cAAe,MACflE,eAAgB,aAGlB,kBAACvE,EAAA,EAAD,CACE1B,KAAK,WACLE,QAAS,kBAAM7C,GAAOZ,IAAIkI,EAAKhM,SAEhCiG,EAAM1E,OACL,kBAACwH,EAAA,EAAD,CACE1B,KAAK,SACLE,QAAS,kBAAMjF,GAAQD,OAAO2J,EAAKhM,KAAMiG,EAAM1E,iBAS9D0E,EAAM1E,OACL,kBAAC4F,EAAA,EAAD,CACEE,KAAK,OACLV,MAAOmK,GAAO3L,IACdoC,QAAS,kBAAMwK,EAAY,GAAD,YAAKtO,GAAL,CAAe,UA5C7C,kBAAC+C,EAAA,EAAD,CAAmBC,WAAW,EAAMC,KAAK,QAAQC,MAAOmK,GAAO9L,UAiErE,SAASkN,GAAOjM,GAAwC,IAAD,EAC3BI,mBAAS,MADkB,WAC9C8L,EAD8C,KACvCC,EADuC,OAEvBC,IAAMhM,UAAS,GAFQ,WAE9CmB,EAF8C,KAErC8K,EAFqC,KAGrDhI,qBAAU,WACRiI,MACC,IAEH,IAAMA,EAAiB,0BAAAxP,EAAAC,OAAA,oDAEjBiD,EAAMyD,KAAK5H,UAFM,kCAAAiB,EAAA,MAGLlB,GAAMiB,KAAKmD,EAAM1E,QAHZ,OAGnB4Q,EAHmB,6BAKnBA,EAAQ,CAAClM,EAAMyD,MALI,OAOrB0I,EAASD,GAPY,6DAyCvB,OAAKA,EAOH,kBAACtL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEH,MAAO,CAAE0G,KAAM,GACfzK,KAAMuP,EACNpL,aAAc,SAACC,EAAGC,GAAJ,OAAcA,EAAM7C,YAClCgC,WAAY,YAAe,IAAZ4F,EAAW,EAAXA,KACb,OACE,kBAAC,IAAKhD,KAAN,CACEC,MAAO+C,EAAKpM,MACZ2H,QAAS,WACPiL,KAAMC,MAAM,eAAgBzG,EAAKhM,KAAM,CACrC,CAAEmL,KAAM,KAAM5D,QAAS,kBAAMqD,QAAQ8H,IAAI,mBAG7C1C,MAAO,kBACL/J,EAAM1E,MACJ,oCACE,kBAACwH,EAAA,EAAD,CAAY1B,KAAK,SAASE,QAAS,kBA9CtC,SAACmC,GAMd,IAEE6I,IACA,WAqCuDI,MACzC,kBAAC5J,EAAA,EAAD,CACE1B,KAAK,SACLE,QAAS,kBA1DL3H,EA0DoBoM,EAAKpM,MA1DhC,EAAAmD,EAAAC,OAAA,2EAAAD,EAAA,MAEPlB,GAAMQ,OAAOzC,EAAOqG,EAAM1E,QAFnB,6DAMfgR,IANe,mEAAO3S,MA6DN,WAMd,kBAACuH,EAAA,EAAD,CACEE,KAAK,OACLV,MAAOmK,GAAO3L,IACdoC,QAAS,kBAAM+K,GAAY9K,MAE7B,kBAACoL,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAOrL,QAASA,EAASsL,sBAAuBhC,GAAOc,aACrD,kBAACf,GAAA,EAAD,8DAzCJ,kBAACrK,EAAA,EAAD,CAAmBC,WAAW,EAAMC,KAAK,QAAQC,MAAOmK,GAAO9L,UAgDtDuE,oBACb,SACEC,EACAC,GAFF,MAMM,CACJE,WAAYF,EAASE,WACrBC,MAAOH,EAASG,MAChBF,KAAMF,EAAME,KAAKA,KACjBnI,MAAOiI,EAAME,KAAKnI,SAEpB,KAbagI,EArNf,SAActD,GACZ,IAAM1E,EAAQ0E,EAAM1E,MAEpB,OACE,kBAACoK,EAAA,EAAD,CAAMhF,MAAOmK,GAAO1D,MAChB7L,EAGA,kBAAC,GAAIqK,UAAL,CAAeC,iBAAiB,YAC9B,kBAAC,GAAIC,OAAL,CAAY9L,KAAK,aACd,kBAAM,kBAAC8R,GAAD,CAAUnI,WAAY1D,EAAM0D,WAAYpI,MAAOA,OAEvDA,GACC,kBAAC,GAAIuK,OAAL,CAAY9L,KAAK,WACd,kBAAM,kBAACkS,GAAD,CAAQ3Q,MAAOA,EAAOmI,KAAMzD,EAAMyD,WAR/C,kBAACoI,GAAD,CAAUnI,WAAY1D,EAAM0D,WAAYpI,MAAOA,Q,UChFjDsD,GAASC,IAAWC,OAAO,CAC/BqI,KAAM,CAAEC,KAAM,EAAGC,eAAgB,gBAEjCnI,IAAK,CAAED,SAAU,WAAYwI,OAAQ,EAAGsC,MAAO,EAAGzC,OAAQ,IAE1DwF,MAAO,CACLC,kBAAmB,GACnBzF,OAAQ,KAgBG,SAAS0F,GAAYhN,GAClC,IAAMgB,EAAQhB,EAAM2D,MAAME,OAAO7C,MAC3BlD,EAAYkC,EAAM2D,MAAME,OAAxB/F,QAEAmP,EAAyBjM,aAAiBqE,MAE1CtD,EACJf,aAAiBqE,MACbvH,EAAQvB,oBAAoByE,EAAM,IAAIA,EAAM,IAC5ClD,EAAQxB,gBAAgB0E,GACxBkM,EAAmBlM,aAAiBqE,MAAQrE,EAAM,GAAK,GAE7DqD,qBAAU,kBAAMrE,EAAM0D,WAAWY,WAAW,CAAEtB,MAAOjB,EAAQpC,YAAY,IAZL,MAc1CS,mBAAiB8M,GAdyB,WAc7DlK,EAd6D,KActDmK,EAdsD,OAetC/M,mBAAiB2B,EAAQpC,SAfa,WAe7DA,EAf6D,KAepDyN,EAfoD,OAgB5ChN,mBAAiB2B,EAAQnC,aAhBmB,WAgB7D7B,EAhB6D,KAgBvDsP,EAhBuD,OAiBtCjN,mBAAiB2B,EAAQlC,OAAOlD,MAjBM,WAiB7D2Q,EAjB6D,KAiBpDC,EAjBoD,OAkBtCnN,mBAAiB2B,EAAQlC,OAAOC,MAlBM,WAkB7D0N,EAlB6D,KAkBpDC,EAlBoD,KAmDpE,OACE,kBAAC7M,EAAA,EAAD,CAAcF,MAAO9B,GAAOuI,MACzB8F,GACC,kBAAC7D,GAAA,EAAD,CACE1I,MAAO9B,GAAOkO,MACdpD,MAAO1G,EACP0K,YAAY,QACZjH,MAAM,QACNL,KAAK,WACLwD,aAAc,SAAC1E,GAAD,OAAUiI,EAASjI,MAGpC+H,GAAiB,kBAAC9J,EAAA,EAAD,MAClB,kBAACiG,GAAA,EAAD,CACE1I,MAAO9B,GAAOkO,MACdpD,MAAO/J,EACP+N,YAAY,UACZjH,MAAM,UACNL,KAAK,WACLmD,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,eAC3B6P,aAAc,SAAC1E,GAAD,OAAUkI,EAAWlI,MAErC,kBAACkE,GAAA,EAAD,CACE1I,MAAO9B,GAAOkO,MACdpD,MAAO3L,EACPqI,KAAK,WACLsH,YAAY,cACZjH,MAAM,cACN8C,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,iBAC3B4T,cAAe,EACf/D,aAAc,SAAC1E,GAAD,OAAUmI,EAAQnI,IAChC0I,WAAW,IAEb,kBAACzK,EAAA,EAAD,MACA,kBAACb,EAAA,EAAD,CAAO5B,MAAO,CAAE4G,OAAQ,KAAxB,eACA,kBAACuG,GAAA,EAAY1M,MAAb,CACE2M,cAAe,SAACpE,GAAD,OAAW+D,EAAW/D,IACrCA,MAAO8D,GAEP,kBAACK,GAAA,EAAY9K,KAAb,CAAkB0D,MAAM,OAAOiD,MAAM,UAEvC,kBAACvG,EAAA,EAAD,MACA,kBAACiG,GAAA,EAAD,CACE1I,MAAO9B,GAAOkO,MACdpD,MAAO4D,EACP7G,MAAM,SACNiH,YAAY,qBACZnE,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,SAC3BqM,KAAK,WACLwD,aAAc,SAAC1E,GAAD,OAAUqI,EAAWrI,MAErC,kBAAChE,EAAA,EAAD,CAAKR,MAAO9B,GAAOM,IAAKkC,KAAK,QAAQE,QA9EnB,WACpB,IAAMyM,EAAa,CACjBpO,QAASA,EACTC,YAAa7B,EACb8B,OAAQ,CACNlD,KAAM2Q,EACNxN,KAAM0N,IAIV,GAAIxM,aAAiBqE,MAAO,CAAC,IAAD,MACTrE,EADS,GACnBrD,EADmB,KACd2H,EADc,KAGtB0I,EAAclQ,EAAQvB,oBAAoBoB,GAC9CqQ,EAAY1I,GAAKyI,EAEb/K,IAAUhC,EAAM,YACXlD,EAAQvB,oBAAoBoB,GACnCG,EAAQvB,oBAAoByG,GAASgL,QAGvClQ,EAAQxB,gBAAgB0E,GAAS+M,EAGnC/N,EAAM0D,WAAWmB,SAAS,UAAW,CAAEjB,YAAa9F,EAAQ/D,WC3DhE,IAAMmN,GAAgC,CACpCrN,SAAU,GACVG,qBAAsB,IAGlBiU,GAA2BxU,MAAaC,MAAM,CAGlDG,SAAUJ,MACPG,SAAS,YACTM,IAAI,EAAG,iCACPC,IAAI,GAAI,YACRC,QACC,4DACA,0GAGJJ,qBAAsBP,MACnBG,SAAS,YACTS,MAAM,CAACZ,IAAQ,YAAa,MAAO,yBAGlCmF,GAASC,IAAWC,OAAO,CAC/BqI,KAAM,CAAEC,KAAM,EAAGC,eAAgB,eAAgBE,SAAU,UAE3DuF,MAAO,CAAExF,OAAQ,EAAGlI,QAAS,IAE7B4D,MAAO,CAAEkL,UAAW,YAYP,SAASC,GAASnO,GAAmC,IAC1D2D,EAAsB3D,EAAtB2D,MAAOD,EAAe1D,EAAf0D,WACT/J,EAAQgK,EAAME,OAASF,EAAME,OAAOlK,MAAQ,GAC5C2B,EAAQqI,EAAME,OAASF,EAAME,OAAOvI,MAAQ,GAHe,EAK3C8E,mBAAS,IALkC,WAK1DgO,EAL0D,KAKrDC,EALqD,OAM3BjO,oBAAS,GANkB,WAM1D4H,EAN0D,KAM7CC,EAN6C,OAOnB7H,oBAAS,GAPU,WAO1DgK,EAP0D,KAOzCC,EAPyC,KAU3DxQ,EAAWqO,mBACXlO,EAAuBkO,mBAXoC,EAoB7DC,aAAU,CACZC,iBAAkB6F,GAClB/G,cAAeA,GACfmB,SAAU,SAACC,GAAD,OAAYgG,EAAchG,MATpCA,EAd+D,EAc/DA,OACAE,EAf+D,EAe/DA,aACAC,EAhB+D,EAgB/DA,WACAC,EAjB+D,EAiB/DA,OACAC,EAlB+D,EAkB/DA,QACAC,EAnB+D,EAmB/DA,aAOI0F,EAAgB,SAAOhG,GAAP,SAAAxL,EAAAC,OAAA,2EAAAD,EAAA,MAEZlB,GAAM2S,eACV5U,EACA2O,EAAOzO,SACPyO,EAAOtO,qBACPsB,IANgB,OAQlBoI,EAAWmB,SAAS,SARF,gDAUlBwJ,EAAO,KAAIlQ,YACXwG,QAAQC,MAAM,6BAAd,MAXkB,iEAetB,OACE,kBAACc,EAAA,EAAD,CAAMhF,MAAO9B,GAAOuI,MAClB,kBAAC7E,EAAA,EAAD,CAAO5B,MAAO9B,GAAOoE,OAArB,gCACA,kBAAC0C,EAAA,EAAD,CAAMhF,MAAO9B,GAAOkO,OAClB,kBAAC1D,GAAA,EAAD,CACEhD,KAAK,WACLK,MAAM,WACNgD,IAAK5P,EACL0P,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,SAC3B+P,gBAAiB9B,EACjBpD,MAAO8D,EAAO7O,UAAY8O,EAAQ9O,SAClC8P,OAAQlB,EAAW,YACnBiB,MAAOpB,EAAOzO,SACd+P,aAAcpB,EAAa,YAC3BuB,MACE,kBAACX,GAAA,EAAUI,KAAX,CACEzP,KAAMiO,EAAc,MAAQ,UAC5B1G,QAAS,kBAAM2G,GAAgBD,QAIpCU,EAAO7O,UAAY8O,EAAQ9O,UAC1B,kBAACgQ,GAAA,EAAD,CAAY/J,KAAK,SAAS4I,EAAO7O,WAGrC,kBAAC6L,EAAA,EAAD,CAAMhF,MAAO9B,GAAOkO,OAClB,kBAAC1D,GAAA,EAAD,CACEhD,KAAK,WACLK,MAAM,wBACNgD,IAAKzP,EACLuP,KAAM,kBAACH,GAAA,EAAUI,KAAX,CAAgBzP,KAAK,gBAC3B+P,gBAAiBM,EACjBxF,MAAO8D,EAAO1O,sBAAwB2O,EAAQ3O,qBAC9C2P,OAAQlB,EAAW,wBACnBiB,MAAOpB,EAAOtO,qBACd4P,aAAcpB,EAAa,wBAC3BuB,MACE,kBAACX,GAAA,EAAUI,KAAX,CACEzP,KAAMqQ,EAAkB,MAAQ,UAChC9I,QAAS,kBAAM+I,GAAoBD,QAIxC1B,EAAO1O,sBAAwB2O,EAAQ3O,sBACtC,kBAAC6P,GAAA,EAAD,CAAY/J,KAAK,SAAS4I,EAAO1O,uBAGrC,kBAACmM,EAAA,EAAD,CAAQC,KAAK,YAAY9E,QAASsH,GAAlC,WAGA,kBAACrC,EAAA,EAAD,CACEhF,QAAiB,KAAR6M,EACTxL,UAAW,kBAAMyL,EAAO,KACxB7H,OAAQ,CAAEC,MAAO,KAAMnF,QAAS,kBAAM+M,EAAO,OAE5CD,I,inBCvKF,IAAMI,GAAU,SAClBC,MADkB,IAErBC,UAAW,EACXC,OAAO,SACFF,KAAaE,QADZ,IAEJC,QAAS,UACTC,OAAQ,cAICC,GAAS,SACjBC,MADiB,IAEpBL,UAAW,EACXC,OAAO,SACFI,KAAUJ,QADT,IAEJC,QAAS,UACTC,OAAQ,cCuDZ,IAQevL,gBACb,SAACC,GAAD,MAAmB,CAAEwD,MAAOxD,EAAMwD,UATT,SAACW,GAAD,OACzBC,YACE,CACEb,gBAEFY,KAGWpE,EAzDf,SAAsBtD,GAAmC,IAC/C8G,EAAuB9G,EAAvB8G,YAAaC,EAAU/G,EAAV+G,MA+BrB,OA7BA1C,qBAAU,YACS,mBAAAvH,EAAAC,OAAA,2EAAAD,EAAA,MAGEE,IAAaC,QDLR,WCEP,OAGb8J,EAHa,sDAKbA,EAAQ,QALK,OAQVA,IACHA,EAAQ,SAGVD,EAAYC,GAZG,gEAejBiI,KACC,IAaD,kBAACtJ,EAAA,EAAD,KACE,kBAAC,IAAK3C,KAAN,CACEC,MAAM,aACN1B,QAde,0BAAAxE,EAAAC,OAAA,uDAEnB+J,EADMmI,EAAqB,SAAVlI,EAAmB,QAAU,QAD3B,oBAAAjK,EAAA,MAIXE,IAAaY,QDxBG,SCwBmBqR,IAJxB,uDAMjBtK,QAAQ8H,IAAI,uBANK,iEAeflD,KAAM,SAACvJ,GAAD,OAAW,kBAAC8C,EAAA,EAAD,QAAgB9C,EAAhB,CAAuBoB,KAAK,mBAC7C2I,MAAO,SAAC/J,GAAD,OACL,kBAACgK,GAAA,EAAD,QACMhK,EADN,CAEE3E,OAAkB,SAAV0L,EAAmB,UAAY,sB,0CCtD7CnI,GAASC,IAAWC,OAAO,CAG/BoQ,SAAU,CACR3F,MAAO,KAYI,SAAS4F,KAA0C,IAAD,EAC/B/O,oBAAS,GADsB,WACxDgP,EADwD,KAC9CC,EAD8C,OAEnCjP,mBAA8B,IAAIlD,KAFC,WAExDC,EAFwD,KAEhDmS,EAFgD,KAIzDC,EAAc,0BAAAzS,EAAAC,OAAA,2EAAAD,EAAA,MAGD2B,GAAO5B,QAHN,OAGhBM,EAHgB,8DAKhBwH,QAAQC,MAAM,wBAAd,MALgB,8BASbzH,EATa,mDAalBmS,EAAUnS,GAbQ,iEAgBpBkH,qBAAU,WACRkL,MACC,IAEHlL,qBAAU,WACR,IAAMmL,EAAQC,aAAY,WACxBH,EAAU,IAAIpS,IAAIC,EAAOG,cACxB,KACH,OAAO,kBAAMoS,cAAcF,OAG7B,IAAMG,EAActK,MAAMuK,KAAKzS,EAAOG,WAuCtC,OAAoB,IAAhBH,EAAOsD,KACF,KAIP,kBAACiF,EAAA,EAAD,KACE,kBAAC,IAAKM,UAAN,CACEoJ,SAAUA,EACV9N,QAAS,kBAAM+N,GAAaD,IAC5BpM,MAAM,sBACNuG,KAAM,SAACvJ,GAAD,OACJ,kBAAC,IAAKwJ,KAAN,QAAexJ,EAAf,CAAsBoB,KAAK,WAAWV,MAAO9B,GAAOsQ,cAGtD,kBAACrO,EAAA,EAAD,CACElE,KAAMgT,EACN7O,aAAc,SAACC,EAAGC,GAAJ,OAAsBA,EAAM7C,YAC1CgC,WAtDkB,SAACH,GAAuC,IACxD+F,EAAS/F,EAAT+F,KADuD,MAEtCA,EAFsC,GAExDhM,EAFwD,KAElDyC,EAFkD,KAiB/D,OACE,kBAAC,IAAKuG,KAAN,CACEC,MAAOjJ,EACP8V,YAAW,iBAAmBC,OAAQ5R,GAAG4R,KAAMC,KAAKvT,IACpDuN,MAAO,SAAC/J,GAAD,OACL,kBAAC8C,EAAA,EAAD,QAAgB9C,EAAhB,CAAuBoB,KAAK,SAASE,QAAS,kBAlBrC,SAAOvH,GAAP,SAAA+C,EAAAC,OAAA,uDACbI,EAAOf,OAAOrC,GADD,oBAAA+C,EAAA,MAIL2B,GAAOuR,OAAOjW,IAJT,8DAMX4K,QAAQC,MAAM,wCAAd,MANW,2BAUb0K,EAAU,IAAIpS,IAAIC,EAAOG,YAVZ,gEAkB2C0S,CAAOjW,cAmC/D,kBAACoM,EAAA,EAAD,CAAQC,KAAK,YAAY9E,QAAS,kBA7BvB,EAAAxE,EAAAC,OAAA,2EAAAD,EAAA,MAEL2B,GAAO4H,UAFF,OAGXkJ,IAHW,+CAKX5K,QAAQC,MAAM,yCAAd,MALW,iEA6BX,eAlGNkL,KAAMG,OAAOC,MCRb,IAAMtR,GAASC,IAAWC,OAAO,CAC/BqR,UAAW,CACTpG,OAAQ,GAGVmF,SAAU,CACR3F,MAAO,KASI,SAAS6G,KACtB,OACE,kBAAC1K,EAAA,EAAD,KACE,kBAAC,GAAD,MACA,kBAACvC,EAAA,EAAD,MACA,kBAAC,IAAKJ,KAAN,CACEC,MAAM,aACN1B,QAAS,kBAAMmB,IAAQW,QnB2BF,0BmB1BrBmG,KAAM,SAACvJ,GAAD,OACJ,kBAAC,IAAKwJ,KAAN,QACMxJ,EADN,CAEEU,MAAO9B,GAAOsQ,SACd9N,KAAK,4BAGT2I,MAAO,SAAC/J,GAAD,OACL,kBAAC8C,EAAA,EAAD,QAAgB9C,EAAhB,CAAuBoB,KAAK,MAAMV,MAAO9B,GAAOuR,gBAGpD,kBAAChN,EAAA,EAAD,MACA,kBAACgM,GAAD,OC8BN,IAQMkB,GAAe/M,aACnB,SACEC,EACAC,GAFF,MAQM,CACJzJ,KAAMwJ,EAAME,KAAKA,KAAK1J,KACtB2J,WAAYF,EAASE,eAnBE,SAACgE,GAAD,OACzBC,YACE,CACEd,cAEFa,KAGiBpE,EAxDrB,SAA2BtD,GAAmC,IACpDjG,EAAgCiG,EAAhCjG,KAAM2J,EAA0B1D,EAA1B0D,WAAYmD,EAAc7G,EAAd6G,UADiC,EAGnCzG,oBAAS,GAH0B,WAGpDkQ,EAHoD,KAG9CC,EAH8C,KAK3D,OACE,kBAAC5N,EAAA,EAAD,CACEpB,QAAS+O,EACT1N,UAAW,kBAAM2N,GAAQ,IACzB1N,OACW,KAAT9I,EACE,kBAAC+I,EAAA,EAAD,CAAY1B,KAAK,gBAAgBE,QAAS,kBAAMiP,GAAQ,MAExD,kBAACpK,EAAA,EAAD,CAAQ7E,QAAS,kBAAMiP,GAAQ,KAC7B,kBAAC,IAAO3F,KAAR,CAAanK,KAAM,GAAIgG,MAAO1M,EAAKyW,OAAO,EAAG,OAKnD,kBAAC7N,EAAA,EAAKI,KAAN,CACEzB,QAAS,WACPoC,EAAWmB,SAAS,YACpB0L,GAAQ,IAEVvN,MAAM,aAEE,KAATjJ,EACC,kBAAC4I,EAAA,EAAKI,KAAN,CACEC,MAAM,SACN1B,QAAS,WACPoC,EAAWmB,SAAS,SACpB0L,GAAQ,MAIZ,kBAAC5N,EAAA,EAAKI,KAAN,CACEzB,QAAS,WACPuF,IACAnD,EAAWmB,SAAS,QACpB0L,GAAQ,IAEVvN,MAAM,gBA+BD,mBAAGU,EAAH,EAAGA,WAAH,MAAqB,CAClC+M,YAAa,kBAAM,kBAACJ,GAAD,CAAc3M,WAAYA,OCrEzCgN,GAAQC,YAAY3J,IA0E1B,IAAM4J,GAAkBtN,aACtB,SAACC,GAAD,MAAmB,CACjBwD,MAAOxD,EAAMwD,SAEf,KAJsBzD,EAhCxB,SAAmBtD,GAA4C,IACrD+G,EAAU/G,EAAV+G,MAEF8J,EAAQC,cAKd,OACE,kBAACC,EAAA,EAAD,CACEC,QANY,CACdC,SAAU,CAAC,MAMTlK,MAAiB,SAAVA,EAAmBgI,IAAYN,KAEtC,kBAAC,IAAD,CAAe1H,MAAiB,SAAVA,EAAmB+H,GAAYN,IACnD,kBAACqC,EAAMlL,UAAP,CAAiBC,iBAAiB,QAChC,kBAACiL,EAAMhL,OAAP,CACE9L,KAAK,UACLmX,UAAWC,GACXC,QAASC,KAEX,kBAACR,EAAMhL,OAAP,CAAc9L,KAAK,OAAOmX,UAAWI,GAAMF,QAASC,KACpD,kBAACR,EAAMhL,OAAP,CAAc9L,KAAK,QAAQmX,UAAWK,KACtC,kBAACV,EAAMhL,OAAP,CAAc9L,KAAK,WAAWmX,UAAWM,KACzC,kBAACX,EAAMhL,OAAP,CAAc9L,KAAK,cAAcmX,UAAWlE,KAC5C,kBAAC6D,EAAMhL,OAAP,CAAc9L,KAAK,WAAWmX,UAAWd,KACzC,kBAACS,EAAMhL,OAAP,CAAc9L,KAAK,WAAWmX,UAAW/C,WAcpCsD,uBA/Ef,WAoBE,OAnBApN,qBAAU,YACS,mBAAAvH,EAAAC,OAAA,2EAAAD,EAAA,MAGEE,IAAaC,QLbR,WKUP,OAGb8J,EAHa,sDAKbA,EAAQ,QALK,OAQVA,IACHA,EAAQ,SAGV2J,GAAMhJ,SAASZ,GAAYC,IAZZ,gEAejBiI,KACC,IAGD,kBAAC,IAAD,CAAU0B,MAAOA,IACf,kBAACE,GAAD,Y","file":"static/js/app.eb3690aa.chunk.js","sourcesContent":["import * as Yup from \"yup\";\n\n// export const API_URL = \"http://localhost:5000/api/v1\";\nexport const API_URL = \"https://www.osumc-cultural-awareness.com/api/v1\";\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login not nearly as extensive as Register,\n * but performs basic validation.\n */\nexport const LoginValidationSchema = Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n\n/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport const RegisterHelpText = {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need to verify that you own this email account.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check you know the password\",\n};\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport const RegisterValidationSchema = Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n\nexport const TermsOfServiceURL = \"http://www.google.com\";\n\nexport const disclaimerURL = \"http://www.google.com\";\n","import { API_URL } from \"../constants\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  async update(\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${this.email}`,\n      {\n        email: this.email,\n        name: this.name,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * update an {@link Admin} only allowing them to update\n   * their password.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async updatePassword(\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${email}`,\n      {\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * recover an {@link Admin} with their email.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin to recover\n   *\n   * @returns {Promise<string>} server response\n   */\n  static async recover(email: string): Promise<string> {\n    const res = await Api.post(\"/admins/recover\", { email: email });\n    return res[\"msg\"];\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * specializedToArray convert a Map<string, GeneralInsight> to an Array.\n *\n * @param {SpecializedInsight} Map of Specialized Insights\n *\n * @returns {{text: string; insights: GeneralInsight[]}[]} where `text` is the title.\n */\nexport function specializedToArray(\n  insights: SpecializedInsight\n): { text: string; insights: GeneralInsight[] }[] {\n  let ret = [];\n  for (let key in insights) {\n    ret.push({ text: key, insights: insights[key] });\n  }\n  return ret;\n}\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   * @param {number} modified Epoch timestamp\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight,\n    public modified: number\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(name: string): Promise<Culture> {\n    let json = await Api.get(`/cultures/${name}`);\n\n    return new this(\n      json[\"name\"],\n      json[\"general_insights\"],\n      json[\"specialized_insights\"],\n      json[\"modified\"]\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<{ name: string; modified: number }[]>}\n   */\n  static async list(): Promise<{ name: string; modified: number }[]> {\n    let json = await Api.get(\"/cultures\");\n\n    return json[\"cultures\"];\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async update(token: string): Promise<void> {\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: this.specializedInsights,\n      name: this.name,\n    };\n\n    await Api.put(`/cultures/${this.name}`, data, token);\n  }\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  const LOCATION: string = \"@ledger\";\n\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(\n      async (culture: { name: string; modified: number }) => {\n        const { name, modified } = culture;\n        if (cultures.has(name) && cultures.get(name) < modified) {\n          add(name);\n        }\n      }\n    );\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(LOCATION);\n    if (!data) {\n      return new Map();\n    }\n\n    let ledger = JSON.parse(data)[\"cultures\"];\n    return new Map(Object.entries(ledger));\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * saveLedger save the ledger to storage\n   *\n   * @param {Map} cultures to save\n   */\n  function saveLedger(cultures: Map<string, number>) {\n    let ledger = { cultures: {} };\n    cultures.forEach((val, key) => (ledger.cultures[key] = val));\n\n    AsyncStorage.setItem(LOCATION, JSON.stringify(ledger));\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const info = await Culture.get(culture);\n    const compressed = Pako.deflate(JSON.stringify(info), { to: \"string\" });\n    AsyncStorage.setItem(culture, compressed.toString());\n\n    let cultures = await list();\n    cultures.set(culture, info.modified);\n    saveLedger(cultures);\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    let cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n\n    cultures.delete(culture);\n    saveLedger(cultures);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  FlatList,\n  SafeAreaView,\n  View,\n  Linking,\n  // Clipboard is deprecated, but necessary because of incompatibility with Expo\n  // See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\n  Clipboard,\n} from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  Card,\n  ActivityIndicator,\n  IconButton,\n  FAB,\n  Divider,\n  List,\n  Paragraph,\n  Button,\n  Title,\n  Snackbar,\n  Menu,\n} from \"react-native-paper\";\n\nimport {\n  Culture,\n  GeneralInsight,\n  SpecializedInsight,\n  specializedToArray,\n  Ledger,\n} from \"../api\";\n\nimport { Routes } from \"../routes\";\nimport { Store } from \"../redux\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  General: { insights: GeneralInsight[] };\n  Specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst Styles = StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  fab: {\n    // TODO: Emulate Fixed for the Floating Action Button\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  editInput: {\n    width: \"100%\",\n  },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n});\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [err, setErr] = useState<string>(\"\");\n  const [showErr, setShowErr] = useState<boolean>(false);\n  const route = useRoute();\n\n  useEffect(() => props.navigation.setOptions({ title: cultureName }), []);\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights,\n      culture.modified\n    );\n\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        // TODO: Display Magical Unicorn Culture\n        props.navigation.navigate(\"Home\");\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token);\n      setCultureInPlace(culture);\n    } catch (err) {\n      setShowErr(true);\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setErr(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setShowErr(false);\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  let specInsights = specializedToArray(culture.specializedInsights);\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      culture.specializedInsights[key].splice(i, 1);\n\n      if (culture.specializedInsights[key].length === 0) {\n        delete culture.specializedInsights[key];\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"General\") {\n      case \"General\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"Specialized\":\n        culture.specializedInsights[\"Specialized Insight\"] = [ExampleInsight];\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights[key].push(ExampleInsight);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  return (\n    <View>\n      <Tab.Navigator initialRouteName=\"General\">\n        <Tab.Screen name=\"General\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={async () => fetchCulture()}\n              insights={culture.generalInsights}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Specialized\">\n          {() => (\n            <Insights\n              insights={specInsights}\n              onRefresh={async () => fetchCulture()}\n              renderItem={(row: {\n                item: { text: string; insights: GeneralInsight[] };\n                index: number;\n              }) => {\n                const { text, insights } = row.item;\n                return (\n                  <List.Accordion title={text} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [text, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(text)}\n                        mode=\"contained\"\n                        style={Styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <>\n        {token &&\n          (editing ? (\n            <ToolsFAB\n              onSave={() => updateCulture()}\n              onAdd={addInsightOrCategory}\n            />\n          ) : (\n            <EditFAB onPress={() => setEditing(!editing)} />\n          ))}\n      </>\n      <Snackbar\n        visible={showErr}\n        onDismiss={hideSnackbar}\n        action={{\n          label: \"Hide\",\n          onPress: hideSnackbar,\n        }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: { text: string; insights: GeneralInsight[] }[] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    onRefresh();\n    setRefreshing(true);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n\n/**\n * Properties for {@link EditFAB}\n */\ntype EditFABProps = {\n  // onPress handles when the FAB is pressed.\n  onPress: () => void;\n};\n\n/**\n * EditFAB displays a {@link FAB} that is labeled \"edit\" and has a pencil icon.\n *\n * @param {EditFABProps} props\n * @returns {React.ReactElement} React component\n */\nfunction EditFAB(props: EditFABProps): React.ReactElement {\n  return (\n    <FAB.Group\n      style={Styles.fab}\n      icon=\"pencil\"\n      open={false}\n      onPress={() => props.onPress()}\n      visible={true}\n      actions={[]}\n      onStateChange={() => props.onPress()}\n    />\n  );\n}\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nfunction ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      style={Styles.fab}\n      open={open}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nfunction InsightCard(props: InsightCardProps): React.ReactElement {\n  const { insight, index, editing, onPress } = props;\n  const [showMenu, setShowMenu] = useState(false);\n  const link = insight.source.data;\n\n  return (\n    <Card style={Styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <Menu\n            visible={showMenu}\n            onDismiss={() => setShowMenu(false)}\n            anchor={\n              <IconButton\n                icon=\"link\"\n                size={20}\n                onPress={() => setShowMenu(true)}\n              />\n            }\n          >\n            <Menu.Item\n              title=\"Copy link\"\n              onPress={() => Clipboard.setString(link)}\n            />\n            <Divider />\n            <Menu.Item\n              title=\"Open link\"\n              onPress={() => Linking.openURL(link)}\n            />\n          </Menu>\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => props.onDelete(index)}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import { Admin } from \"../api/admin\";\nimport { Store } from \".\";\n\nexport const USER_INITIAL_STATE = { user: { ...new Admin(\"\", \"\") }, token: \"\" };\n\nexport const userReducer = (\n  state = USER_INITIAL_STATE,\n  action: { type: string; payload: Store[\"user\"] }\n) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    case \"RESET_USER\":\n      return { ...USER_INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { Store } from \".\";\n\nexport const updateUser = (user: Store[\"user\"]) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n\nexport const resetUser = () => ({\n  type: \"RESET_USER\",\n  payload: {},\n});\n","import { Store } from \".\";\n\nexport const updateTheme = (theme: Store[\"theme\"]) => ({\n  type: \"UPDATE_THEME\",\n  payload: theme,\n});\n","import { combineReducers } from \"redux\";\n\nimport { USER_INITIAL_STATE, userReducer } from \"./UserReducer\";\nimport { THEME_INITIAL_STATE, themeReducer } from \"./ThemeReducer\";\nimport { updateUser, resetUser } from \"./UserAction\";\nimport { updateTheme } from \"./ThemeAction\";\n\nimport { ThemeType } from \"../theme\";\n\nexport const Reducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n});\n\nexport type Store = {\n  user: {\n    user: { name: string; email: string; superUser: boolean };\n    token: string;\n  };\n  theme: ThemeType;\n};\n\nexport {\n  USER_INITIAL_STATE,\n  THEME_INITIAL_STATE,\n  updateUser,\n  resetUser,\n  updateTheme,\n};\n","import { ThemeType } from \"../theme\";\n\nexport const THEME_INITIAL_STATE = \"Dark\";\n\nexport const themeReducer = (\n  state = THEME_INITIAL_STATE,\n  action: { type: string; payload: ThemeType }\n) => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { View, StyleSheet } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../api\";\nimport { updateUser, Store } from \"../redux\";\nimport { Routes } from \"../routes\";\nimport { LoginValidationSchema } from \"../constants\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\n// Used for {@link AsyncStorage} to store a user's email\n// locally on their device.\nconst RememberedEmail = \"@rememberedEmail\";\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [snackbar, setSnackbar] = useState(false);\n  const [err, setErr] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: LoginValidationSchema,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setSnackbar(true);\n      setErr(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email === undefined) {\n      try {\n        await Admin.recover(values.email);\n        setErr(`Sent email to ${values.email}`);\n        setSnackbar(true);\n      } catch (err) {\n        console.error(\"Failed to send recovery email: \", err);\n        setErr(err.toString());\n        setSnackbar(true);\n      }\n    } else {\n      setSnackbar(true);\n      setErr(\"Account recovery requires a valid Email\");\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={Styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={snackbar}\n        onDismiss={() => setSnackbar(false)}\n        action={{ label: \"Ok\", onPress: () => setSnackbar(false) }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../api\";\nimport { updateUser, Store } from \"../redux\";\nimport { Routes } from \"../routes\";\nimport {\n  RegisterHelpText,\n  RegisterValidationSchema,\n  TermsOfServiceURL,\n} from \"../constants\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [snackbar, setSnackbar] = useState(false);\n  const [err, setErr] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: RegisterValidationSchema,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setSnackbar(true);\n      setErr(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={Styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={snackbar}\n        onDismiss={() => setSnackbar(false)}\n        action={{ label: \"Ok\", onPress: () => setSnackbar(false) }}\n      >\n        {err}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, View, FlatList, SafeAreaView, Alert } from \"react-native\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  ActivityIndicator,\n  List,\n  IconButton,\n  FAB,\n  Portal,\n  Modal,\n  Text,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../routes\";\n\nimport { Store } from \"../redux\";\nimport { Admin, Culture, Ledger } from \"../api\";\n\nconst styles = StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n  emptyListStyle: {\n    padding: 10,\n    fontSize: 18,\n    textAlign: \"center\",\n  },\n  itemStyle: {\n    padding: 10,\n  },\n  img: {\n    padding: 35,\n    height: 70,\n    width: \"25%\",\n  },\n  headerFooterStyle: {\n    width: \"100%\",\n    height: 45,\n    backgroundColor: \"#606070\",\n  },\n  bottomFooterStyle: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    height: 70,\n    backgroundColor: \"#606070\",\n    position: \"absolute\",\n    bottom: 0,\n    left: 0,\n    right: 0,\n    marginBottom: 0,\n  },\n  textStyle: {\n    textAlign: \"center\",\n    color: \"#fff\",\n    fontSize: 18,\n    padding: 7,\n  },\n  btn: {},\n  fab: {\n    position: \"absolute\",\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n\n  view: {\n    flex: 1,\n  },\n\n  inviteModal: {\n    padding: 20,\n    background: \"white\",\n  },\n\n  list: {\n    flex: 1,\n  },\n});\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const token = props.token;\n\n  return (\n    <View style={styles.view}>\n      {!token ? (\n        <Cultures navigation={props.navigation} token={token} />\n      ) : (\n        <Tab.Navigator initialRouteName=\"Cultures\">\n          <Tab.Screen name=\"Cultures\">\n            {() => <Cultures navigation={props.navigation} token={token} />}\n          </Tab.Screen>\n          {token && (\n            <Tab.Screen name=\"Admins\">\n              {() => <Admins token={token} user={props.user} />}\n            </Tab.Screen>\n          )}\n        </Tab.Navigator>\n      )}\n    </View>\n  );\n}\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Cultures(props: CultureProps): React.ReactElement {\n  const [cultures, setCultures] = useState(null);\n  useEffect(() => {\n    const fetchCultureData = async () => {\n      let cultureNames = await Culture.list();\n      setCultures(cultureNames);\n    };\n\n    fetchCultureData();\n  }, []);\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={cultures}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: item.name })\n              }\n              right={() => (\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  <IconButton\n                    icon=\"download\"\n                    onPress={() => Ledger.add(item.name)}\n                  />\n                  {props.token && (\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => Culture.delete(item.name, props.token)}\n                    />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n      {props.token && (\n        <FAB\n          icon=\"plus\"\n          style={styles.fab}\n          onPress={() => setCultures([...cultures, \"\"])}\n        ></FAB>\n      )}\n    </SafeAreaView>\n  );\n}\n\n/**\n * Properties for {@link Users}\n */\ntype AdminProps = {\n  token: string;\n  user: Admin;\n};\n\n/**\n * Component that displays a list of components of either {@link Users}\n *\n * @param {AdminProps} props\n * @returns {React.ReactElement} React component\n */\nfunction Admins(props: AdminProps): React.ReactElement {\n  const [users, setUsers] = useState(null);\n  const [visible, setVisible] = React.useState(false);\n  useEffect(() => {\n    fetchAdminData();\n  }, []);\n\n  const fetchAdminData = async () => {\n    let users;\n    if (props.user.superUser) {\n      users = await Admin.list(props.token);\n    } else {\n      users = [props.user];\n    }\n    setUsers(users);\n  };\n\n  const onDelete = async (email: string) => {\n    try {\n      await Admin.delete(email, props.token);\n    } catch {\n      // show error message\n    }\n    fetchAdminData();\n  };\n\n  const onEdit = (user: {\n    email: string;\n    name: string;\n    superUser: boolean;\n  }) => {\n    //TODO: update Admin.update() perams\n    try {\n      //Admin.update(email, props.token)\n      fetchAdminData();\n    } catch {\n      // show error message\n    }\n  };\n\n  const onInvite = async (email: string) => {\n    try {\n      await Admin.invite(email, props.token);\n    } catch (err) {\n      // show error message\n    }\n  };\n\n  if (!users) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        style={{ flex: 1 }}\n        data={users}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.email}\n              onPress={() => {\n                Alert.alert(\"user pressed\", item.name, [\n                  { text: \"OK\", onPress: () => console.log(\"OK Pressed\") },\n                ]);\n              }}\n              right={() =>\n                props.token ? (\n                  <>\n                    <IconButton icon=\"pencil\" onPress={() => onEdit(item)} />\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => onDelete(item.email)}\n                    />\n                  </>\n                ) : null\n              }\n            />\n          );\n        }}\n      />\n      <FAB\n        icon=\"plus\"\n        style={styles.fab}\n        onPress={() => setVisible(!visible)}\n      />\n      <Portal>\n        <Modal visible={visible} contentContainerStyle={styles.inviteModal}>\n          <Text>Example Modal. Click outside this area to dismiss.</Text>\n        </Modal>\n      </Portal>\n    </SafeAreaView>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n  }),\n  null\n)(Home);\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../api\";\n\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights[index[0]][index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights[key];\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        delete culture.specializedInsights[key];\n        culture.specializedInsights[title] = specialized;\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    props.navigation.navigate(\"Culture\", { cultureName: culture.name });\n  };\n\n  return (\n    <SafeAreaView style={Styles.view}>\n      {isSpecialized && (\n        <TextInput\n          style={Styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={Styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={Styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={Styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <FAB style={Styles.fab} icon=\"check\" onPress={updateCulture} />\n    </SafeAreaView>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Snackbar,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../routes\";\nimport { Admin } from \"../api\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Recovery\">;\n  route: RouteProp<Routes, \"Recovery\">;\n};\n\n/**\n * Recovery screen fields for Formik.\n */\ntype RecoveryFields = {\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Recovery fields for Formik.\n */\nconst initialValues: RecoveryFields = {\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst RecoveryValidationSchema = Yup.object().shape({\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  input: { margin: 5, padding: 15 },\n\n  title: { alignSelf: \"center\" },\n});\n\n/**\n * Recovery page for Admin account Recovery.\n *\n * @remark ONLY accessible from Email, navigating to this route normally should\n * never happen.\n *\n * @param {Props} props properties\n * @returns {React.ReactElement} React Component\n */\nexport default function Recovery(props: Props): React.ReactElement {\n  const { route, navigation } = props;\n  const email = route.params ? route.params.email : \"\";\n  const token = route.params ? route.params.token : \"\";\n\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n\n  // useRefs for Formik Validation\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: RecoveryValidationSchema,\n    initialValues: initialValues,\n    onSubmit: (values) => updateAccount(values),\n  });\n\n  const updateAccount = async (values: RecoveryFields) => {\n    try {\n      await Admin.updatePassword(\n        email,\n        values.password,\n        values.passwordConfirmation,\n        token\n      );\n      navigation.navigate(\"Login\");\n    } catch (err) {\n      setMsg(err.toString());\n      console.error(\"Failed to update account: \", err);\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <Title style={Styles.title}>Let's create a new password!</Title>\n      <View style={Styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <View style={Styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        {errors.passwordConfirmation && touched.passwordConfirmation && (\n          <HelperText type=\"error\">{errors.passwordConfirmation}</HelperText>\n        )}\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Recover\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n","import { DefaultTheme, DarkTheme } from \"react-native-paper\";\n\nexport const lightTheme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport const darkTheme = {\n  ...DarkTheme,\n  roundness: 2,\n  colors: {\n    ...DarkTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport type ThemeType = \"Dark\" | \"Light\";\n\n// Location for {@link AsyncStorage} to store theme\n// \"Light\" or \"Dark\"\nexport const ThemeStorage = \"@theme\";\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton, Colors } from \"react-native-paper\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Store, updateTheme } from \"../redux\";\nimport { ThemeStorage, ThemeType } from \"../theme\";\n\ntype Props = {\n  updateTheme: (type: ThemeType) => void;\n  theme: ThemeType;\n};\n\n/**\n * ThemeToggler toggle between Dark and Light Theme\n * when changed updates the Redux store and saves it to local storage.\n *\n * @param {Props} props\n *\n * @returns {React.ReactElement}\n */\nfunction ThemeToggler(props: Props): React.ReactElement {\n  const { updateTheme, theme } = props;\n\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(ThemeStorage)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      updateTheme(theme);\n    };\n\n    getTheme();\n  }, []);\n\n  const handleChange = async () => {\n    const newTheme = theme === \"Dark\" ? \"Light\" : \"Dark\";\n    updateTheme(newTheme);\n    try {\n      await AsyncStorage.setItem(ThemeStorage, newTheme);\n    } catch (err) {\n      console.log(\"failed to set theme\");\n    }\n  };\n\n  return (\n    <View>\n      <List.Item\n        title=\"Dark Theme\"\n        onPress={handleChange}\n        left={(props) => <IconButton {...props} icon=\"brightness-6\" />}\n        right={(props) => (\n          <Checkbox\n            {...props}\n            status={theme === \"Dark\" ? \"checked\" : \"unchecked\"}\n          />\n        )}\n      />\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateTheme,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (state: Store) => ({ theme: state.theme }),\n  mapDispatchToProps\n)(ThemeToggler);\n","import React, { useState, useEffect } from \"react\";\nimport { View, FlatList, StyleSheet } from \"react-native\";\n\nimport { List, Button, IconButton } from \"react-native-paper\";\n// is importing Dayjs really worth it for something as simple as relative times?\n// Not sure, but it's the easiest thing to do and is well maintained.\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { Ledger } from \"../api\";\n\nconst Styles = StyleSheet.create({\n  // HACK: This is so that icons line up with other icons on the\n  // Settings page.\n  leftIcon: {\n    left: -5,\n  },\n});\n\ndayjs.extend(relativeTime);\n\n/**\n * DownloadedCultures displays downloaded Cultures, allowing users to update all of them\n * or delete individual ones.\n *\n * @returns {React.ReactElement}\n */\nexport default function DownloadedCultures(): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [ledger, setLedger] = useState<Map<string, number>>(new Map());\n\n  const fetchLedger = async () => {\n    let ledger: Map<string, number>;\n    try {\n      ledger = await Ledger.list();\n    } catch (err) {\n      console.error(\"Failed to load ledger\", err);\n      return;\n    }\n\n    if (!ledger) {\n      return;\n    }\n\n    setLedger(ledger);\n  };\n\n  useEffect(() => {\n    fetchLedger();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLedger(new Map(ledger.entries()));\n    }, 60000);\n    return () => clearInterval(timer);\n  });\n\n  const ledgerArray = Array.from(ledger.entries());\n\n  const DownloadedCulture = (props: { item: [string, number] }) => {\n    const { item } = props;\n    const [name, modified] = item;\n\n    const remove = async (name: string) => {\n      ledger.delete(name);\n\n      try {\n        await Ledger.remove(name);\n      } catch (err) {\n        console.error(\"Failed to remove downloaded culture: \", err);\n        return;\n      }\n\n      setLedger(new Map(ledger.entries()));\n    };\n\n    return (\n      <List.Item\n        title={name}\n        description={`Last modified ${dayjs().to(dayjs.unix(modified))}`}\n        right={(props) => (\n          <IconButton {...props} icon=\"delete\" onPress={() => remove(name)} />\n        )}\n      />\n    );\n  };\n\n  const update = async () => {\n    try {\n      await Ledger.update();\n      fetchLedger();\n    } catch (err) {\n      console.error(\"Failed to update downloaded cultures: \", err);\n    }\n  };\n\n  if (ledger.size === 0) {\n    return null;\n  }\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Downloaded Cultures\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"download\" style={Styles.leftIcon} />\n        )}\n      >\n        <FlatList\n          data={ledgerArray}\n          keyExtractor={(_, index: number) => index.toString()}\n          renderItem={DownloadedCulture}\n        />\n      </List.Accordion>\n      <Button mode=\"contained\" onPress={() => update()}>\n        Update All\n      </Button>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { View, StyleSheet, Linking } from \"react-native\";\n\nimport { Divider, List, IconButton } from \"react-native-paper\";\n\nimport ThemeToggler from \"./ThemeToggler\";\nimport DownloadedCultures from \"./DownloadedCultures\";\nimport { disclaimerURL } from \"../constants\";\n\n// HACK: This is so that icons line up with other icons on the\n// Settings page.\nconst Styles = StyleSheet.create({\n  rightIcon: {\n    right: -5,\n  },\n\n  leftIcon: {\n    left: -5,\n  },\n});\n\n/**\n * Settings page displays downloaded cultures, disclaimer, and dark theme toggler.\n *\n * @returns {React.ReactElement}\n */\nexport default function Settings(): React.ReactElement {\n  return (\n    <View>\n      <ThemeToggler />\n      <Divider />\n      <List.Item\n        title=\"Disclaimer\"\n        onPress={() => Linking.openURL(disclaimerURL)}\n        left={(props) => (\n          <List.Icon\n            {...props}\n            style={Styles.leftIcon}\n            icon=\"file-document-outline\"\n          />\n        )}\n        right={(props) => (\n          <IconButton {...props} icon=\"eye\" style={Styles.rightIcon} />\n        )}\n      />\n      <Divider />\n      <DownloadedCultures />\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport { IconButton, Avatar, Button, Menu } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { resetUser, Store } from \"../redux\";\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  // name of Admin\n  name: string;\n  navigation: StackNavigationProp<\n    Routes,\n    \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n  >;\n  // Redux action in order to reset the User\n  resetUser: () => void;\n};\n\n/**\n * RightHeaderButton right header button displays '...' if not logged in\n * and an avatar if logged in. Allows the user to navigate to Settings page or log out.\n *\n * @param {Props} props\n * @returns {React.ReactElement}\n */\nfunction RightHeaderButton(props: Props): React.ReactElement {\n  const { name, navigation, resetUser } = props;\n\n  const [menu, setMenu] = useState(false);\n\n  return (\n    <Menu\n      visible={menu}\n      onDismiss={() => setMenu(false)}\n      anchor={\n        name === \"\" ? (\n          <IconButton icon=\"dots-vertical\" onPress={() => setMenu(true)} />\n        ) : (\n          <Button onPress={() => setMenu(true)}>\n            <Avatar.Text size={32} label={name.substr(0, 2)} />\n          </Button>\n        )\n      }\n    >\n      <Menu.Item\n        onPress={() => {\n          navigation.navigate(\"Settings\");\n          setMenu(false);\n        }}\n        title=\"Settings\"\n      />\n      {name === \"\" ? (\n        <Menu.Item\n          title=\"Log in\"\n          onPress={() => {\n            navigation.navigate(\"Login\");\n            setMenu(false);\n          }}\n        />\n      ) : (\n        <Menu.Item\n          onPress={() => {\n            resetUser();\n            navigation.navigate(\"Home\");\n            setMenu(false);\n          }}\n          title=\"Log out\"\n        />\n      )}\n    </Menu>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      resetUser,\n    },\n    dispatch\n  );\n\nconst HeaderButton = connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<\n        Routes,\n        \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n      >;\n    }\n  ) => ({\n    name: state.user.user.name,\n    navigation: ownProps.navigation,\n  }),\n  mapDispatchToProps\n)(RightHeaderButton);\n\nexport default ({ navigation }) => ({\n  headerRight: () => <HeaderButton navigation={navigation} />,\n});\n","import React, { useEffect } from \"react\";\n\nimport \"react-native-gesture-handler\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { connect } from \"react-redux\";\n\nimport {\n  NavigationContainer,\n  DarkTheme,\n  DefaultTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport {\n  Home,\n  Login,\n  CultureView,\n  EditInsight,\n  Register,\n  Recovery,\n  Settings,\n  Header,\n} from \"./views\";\n\nimport { Routes } from \"./routes\";\nimport { lightTheme, darkTheme, ThemeStorage, ThemeType } from \"./theme\";\nimport { Reducer, updateTheme, Store } from \"./redux\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(ThemeStorage)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      store.dispatch(updateTheme(theme));\n    };\n\n    getTheme();\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <NavigatorScreen />\n    </Provider>\n  );\n}\n\ntype NavigatorProps = {\n  theme: ThemeType;\n};\n\n/**\n * Navigator contained inside of {@link App} manages navigation and theming.\n *\n * @remark This component isn't just inside of {@link App} because it needs to connect\n * to the Redux store in order to properly re-render when a change to the theme is done.\n *\n * @param {NavigatorProps} props\n * @returns {React.ReactElement}\n */\nfunction Navigator(props: NavigatorProps): React.ReactElement {\n  const { theme } = props;\n\n  const Stack = createStackNavigator<Routes>();\n  const linking = {\n    prefixes: [\"/\"],\n  };\n\n  return (\n    <NavigationContainer\n      linking={linking}\n      theme={theme === \"Dark\" ? DarkTheme : DefaultTheme}\n    >\n      <PaperProvider theme={theme === \"Dark\" ? darkTheme : lightTheme}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen\n            name=\"Culture\"\n            component={CultureView}\n            options={Header}\n          />\n          <Stack.Screen name=\"Home\" component={Home} options={Header} />\n          <Stack.Screen name=\"Login\" component={Login} />\n          <Stack.Screen name=\"Register\" component={Register} />\n          <Stack.Screen name=\"EditInsight\" component={EditInsight} />\n          <Stack.Screen name=\"Settings\" component={Settings} />\n          <Stack.Screen name=\"Recovery\" component={Recovery} />\n        </Stack.Navigator>\n      </PaperProvider>\n    </NavigationContainer>\n  );\n}\n\nconst NavigatorScreen = connect(\n  (state: Store) => ({\n    theme: state.theme,\n  }),\n  null\n)(Navigator);\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}