{"version":3,"sources":["frontend/views/Culture/EditFab.tsx","frontend/views/Culture/style.ts","frontend/views/Culture/InsightCard.tsx","frontend/views/Culture/Insights.tsx","frontend/views/Culture/ToolsFAB.tsx","frontend/lib/api.ts","frontend/lib/ledger.ts","frontend/lib/feedback.ts","frontend/lib/admin.ts","frontend/lib/culture.ts","frontend/views/Culture/Culture.tsx","frontend/views/Culture/index.ts","frontend/redux/UserReducer.ts","frontend/redux/UserAction.ts","frontend/redux/ThemeAction.ts","frontend/redux/index.ts","frontend/redux/ThemeReducer.ts","frontend/views/Login/validation.ts","frontend/views/Login/Login.tsx","frontend/views/Login/index.ts","frontend/views/Register/explanationText.ts","frontend/views/Register/validation.ts","frontend/views/Register/Register.tsx","frontend/views/Register/index.ts","frontend/constants.ts","frontend/views/Home/styles.ts","frontend/views/Home/Cultures.tsx","frontend/views/Home/Admins.tsx","frontend/views/Home/Home.tsx","frontend/views/Home/index.ts","frontend/views/EditInsight/EditInsight.tsx","frontend/views/EditInsight/index.ts","frontend/views/Recovery/validation.ts","frontend/views/Recovery/Recovery.tsx","frontend/views/Recovery/index.ts","frontend/theme.ts","frontend/views/Settings/ThemeToggler.tsx","frontend/views/Settings/DownloadedCultures.tsx","frontend/views/Settings/Feedback.tsx","frontend/views/Settings/AccountSettings.tsx","frontend/views/Settings/Settings.tsx","frontend/views/Settings/index.ts","frontend/views/Header.tsx","frontend/routes.ts","frontend/App.tsx"],"names":["EditFAB","props","FAB","Group","icon","style","Platform","OS","position","undefined","open","onPress","visible","actions","onStateChange","StyleSheet","create","spinner","top","specialAddInsight","padding","marginVertical","marginHorizontal","view","flex","card","InsightCard","insight","index","editing","onAction","link","source","data","Card","Styles","Content","Title","summary","Paragraph","information","Actions","Linking","canOpenURL","IconButton","size","Clipboard","setString","type","openURL","onDelete","Insights","insights","onRefresh","renderItem","useState","refreshing","setRefreshing","ActivityIndicator","animating","refresh","SafeAreaView","FlatList","keyExtractor","_","toString","ToolsFAB","setOpen","onAdd","onSave","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","API_URL","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","Admin","name","email","superUser","password","passwordConfirmation","put","this","password_confirmation","getAuth","post","res","delete","Culture","generalInsights","specializedInsights","modified","general_insights","specialized_insights","specializedInsightsObj","forEach","val","key","culture","get","Map","Object","entries","list","a","async","AsyncStorage","getItem","ledger","parse","saveLedger","cultures","setItem","add","info","compressed","Pako","to","set","updatedCultures","has","storedData","removeItem","Ledger","Feedback","feedback","Tab","createMaterialTopTabNavigator","ExampleInsight","connect","state","ownProps","user","navigation","route","cultureName","params","setCulture","setEditing","msg","setMsg","banner","setBanner","dirty","setDirty","useRoute","useEffect","setOptions","title","fetchCulture","React","addListener","e","preventDefault","confirm","dispatch","action","Alert","alert","text","cancelable","setCultureInPlace","newCulture","read","console","error","Date","now","navigate","hideSnackbar","onCardAction","deleteInsight","Array","i","splice","length","InsightCardView","View","Banner","label","Navigator","initialRouteName","Screen","row","item","from","Accordion","id","map","Button","mode","update","setParams","prevName","getFocusedRouteNameFromRoute","push","Portal","Snackbar","onDismiss","USER_INITIAL_STATE","updateUser","payload","resetUser","updateTheme","theme","Reducer","combineReducers","Yup","shape","required","initialValues","justifyContent","margin","overflow","recover","bottom","Login","bindActionCreators","remember","setRemember","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","Validation","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","getEmail","fields","CommonActions","reset","routes","TextInput","autoFocus","textContentType","left","Icon","ref","value","onBlur","onChangeText","HelperText","secureTextEntry","right","Checkbox","Item","uppercase","min","max","matches","oneOf","color","fontWeight","Register","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","RegisterHelpText","onFocus","Text","inviteModal","backgroundColor","Cultures","styles","flexDirection","Admins","admins","log","onEdit","Home","setCultures","setAdmins","setInviteModal","fetchCultures","useWindowDimensions","useSafeAreaInsets","cultureNames","fetchAdmins","fabStyles","Modal","fab","input","paddingHorizontal","EditInsight","isSpecialized","category","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","setCultureName","placeholder","Divider","numberOfLines","multiline","RadioButton","onValueChange","newInsight","specialized","alignSelf","Recovery","updateAccount","updatePassword","lightTheme","DefaultTheme","roundness","colors","primary","accent","darkTheme","DarkTheme","getTheme","newTheme","leftIcon","DownloadedCultures","expanded","setExpanded","setLedger","fetchLedger","timer","setInterval","clearInterval","ledgerArray","description","dayjs","unix","remove","onUpdateFinish","extend","relativeTime","characterCounter","fontSize","paddingRight","paddingBottom","button","setFeedback","setState","FeedbackSender","send","AccountSettings","logout","rememberEmail","rightIcon","Settings","openLink","ScrollView","err","ripple","marginRight","HeaderButton","TouchableRipple","headerRight","prefixes","config","screens","path","decodeURI","general","store","createStore","NavigatorScreen","Stack","createStackNavigator","NavigationContainer","linking","component","options","Header","registerRootComponent"],"mappings":"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","file":"static/js/app.1c984009.chunk.js","sourcesContent":["import React from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { FAB } from \"react-native-paper\";\n\n/**\n * Properties for {@link EditFAB}\n */\ntype EditFABProps = {\n  // onPress handles when the FAB is pressed.\n  onPress: () => void;\n};\n\n/**\n * EditFAB displays a {@link FAB} that is labeled \"edit\" and has a pencil icon.\n *\n * @param {EditFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function EditFAB(props: EditFABProps): React.ReactElement {\n  return (\n    <FAB.Group\n      icon=\"pencil\"\n      style={Platform.OS === \"web\" ? ({ position: \"fixed\" } as any) : undefined}\n      open={false}\n      onPress={() => props.onPress()}\n      visible={true}\n      actions={[]}\n      onStateChange={() => props.onPress()}\n    />\n  );\n}\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  view: {\n    flex: 1,\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n});\n","import React from \"react\";\n\n// Clipboard is deprecated, but necessary because of incompatibility with Expo\n// See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\nimport { Linking, Clipboard } from \"react-native\";\n\nimport { Card, IconButton, Paragraph, Title } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport Styles from \"./style\";\n\nexport type Action =\n  | \"copy\"\n  | { type: \"open\"; link: string }\n  | { type: \"delete\"; summary: string };\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n  // callback when an action is performed on an insight\n  //\n  // includes: Copying, Deleting, and Opening\n  onAction: (action: Action) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function InsightCard(\n  props: InsightCardProps\n): React.ReactElement {\n  const { insight, index, editing, onPress, onAction } = props;\n  const link = insight.source.data;\n\n  return (\n    <Card style={Styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"link\"\n            size={20}\n            onPress={() => {\n              onAction(\"copy\");\n              Clipboard.setString(link);\n            }}\n          />\n        )}\n        {link && Linking.canOpenURL(link) && (\n          <IconButton\n            icon=\"login-variant\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"open\", link: link });\n              Linking.openURL(link);\n            }}\n          />\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => {\n              onAction({ type: \"delete\", summary: insight.summary });\n              props.onDelete(index);\n            }}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FlatList, SafeAreaView } from \"react-native\";\n\nimport { ActivityIndicator } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport Styles from \"./style\";\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: [string, GeneralInsight[]][] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    setRefreshing(true);\n    onRefresh();\n    setRefreshing(false);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { FAB } from \"react-native-paper\";\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FAB.Group\n      visible={true}\n      open={open}\n      style={Platform.OS === \"web\" ? ({ position: \"fixed\" } as any) : undefined}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n","import { API_URL } from \"../../env.json\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  const LOCATION: string = \"@ledger\";\n\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(\n      async (culture: { name: string; modified: number }) => {\n        const { name, modified } = culture;\n        if (cultures.has(name) && cultures.get(name) < modified) {\n          add(name);\n        }\n      }\n    );\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(LOCATION);\n    if (!data) {\n      return new Map();\n    }\n\n    let ledger = JSON.parse(data)[\"cultures\"];\n    return new Map(Object.entries(ledger));\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    if (!storedData) {\n      throw new Error(`${culture}: culture download not found`);\n    }\n\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * saveLedger save the ledger to storage\n   *\n   * @param {Map} cultures to save\n   */\n  function saveLedger(cultures: Map<string, number>) {\n    let ledger = { cultures: {} };\n    cultures.forEach((val, key) => (ledger.cultures[key] = val));\n\n    AsyncStorage.setItem(LOCATION, JSON.stringify(ledger));\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const info = await Culture.get(culture);\n    const compressed = Pako.deflate(JSON.stringify(info), { to: \"string\" });\n    AsyncStorage.setItem(culture, compressed.toString());\n\n    let cultures = await list();\n    cultures.set(culture, info.modified);\n    saveLedger(cultures);\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    let cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n\n    cultures.delete(culture);\n    saveLedger(cultures);\n  }\n}\n","import { Api } from \"./api\";\n\nexport namespace Feedback {\n  /**\n   * send feedback to owner.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} feedback - to send\n   * @returns {Promise<void>}\n   */\n  export async function send(feedback: string): Promise<void> {\n    await Api.post(\"/feedback\", { feedback: feedback });\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  async update(\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${this.email}`,\n      {\n        email: this.email,\n        name: this.name,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * update an {@link Admin} only allowing them to update\n   * their password.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async updatePassword(\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${email}`,\n      {\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * recover an {@link Admin} with their email.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin to recover\n   *\n   * @returns {Promise<string>} server response\n   */\n  static async recover(email: string): Promise<string> {\n    const res = await Api.post(\"/admins/recover\", { email: email });\n    return res[\"msg\"];\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   * @param {number} modified Epoch timestamp\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight,\n    public modified: number\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(culture: string): Promise<Culture> {\n    let json = await Api.get(`/cultures/${culture}`);\n\n    const { name, general_insights, specialized_insights, modified } = json;\n\n    return new this(\n      name,\n      general_insights,\n      new Map(Object.entries(specialized_insights)),\n      modified\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<{ name: string; modified: number }[]>}\n   */\n  static async list(): Promise<{ name: string; modified: number }[]> {\n    let json = await Api.get(\"/cultures\");\n\n    return json[\"cultures\"];\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async update(token: string): Promise<void> {\n    let specializedInsightsObj = {};\n    this.specializedInsights.forEach(\n      (val, key) => (specializedInsightsObj[key] = val)\n    );\n\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: specializedInsightsObj,\n      name: this.name,\n    };\n\n    await Api.put(`/cultures/${this.name}`, data, token);\n  }\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { View, Alert, Platform } from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport {\n  ActivityIndicator,\n  List,\n  Button,\n  Snackbar,\n  Portal,\n  Banner,\n} from \"react-native-paper\";\n\nimport EditFAB from \"./EditFab\";\nimport InsightCard, { Action } from \"./InsightCard\";\nimport Insights from \"./Insights\";\nimport ToolsFAB from \"./ToolsFAB\";\nimport Styles from \"./style\";\n\nimport { Culture, GeneralInsight, SpecializedInsight, Ledger } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\nimport { Store } from \"../../redux\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  general: { insights: GeneralInsight[] };\n  specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\nconst adminNewCultureBanner = `Welcome to a brand new Culture!\n\n1. To add a new insight hit the tool button\n2. To edit an insight click on it\n3. Don't forget to save!\n`;\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n  const navigation = props.navigation;\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const [banner, setBanner] = useState(false);\n  const [dirty, setDirty] = useState(props.route.params.dirty || false);\n  const route = useRoute();\n\n  useEffect(() => props.navigation.setOptions({ title: cultureName }), [\n    cultureName,\n  ]);\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  // Prevent leaving with unsaved changes\n  React.useEffect(\n    () =>\n      navigation.addListener(\"beforeRemove\", (e) => {\n        const unsaved = dirty || props.route.params.dirty;\n\n        if (!unsaved) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if (Platform.OS === \"web\") {\n          // @ts-ignore\n          const leave = confirm(\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\"\n          );\n\n          if (leave) {\n            navigation.dispatch(e.data.action);\n          }\n        } else {\n          Alert.alert(\n            \"Discard changes?\",\n            \"You have unsaved changes. Are you sure you want to discard them and leave the screen?\",\n            [\n              { text: \"Don't leave\", style: \"cancel\", onPress: () => {} },\n              {\n                text: \"Discard\",\n                style: \"destructive\",\n                onPress: () => navigation.dispatch(e.data.action),\n              },\n            ],\n            { cancelable: false }\n          );\n        }\n      }),\n    [navigation, dirty, props.route.params.dirty]\n  );\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights,\n      culture.modified\n    );\n\n    setDirty(true);\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        if (!token) {\n          // TODO: Display Magical Unicorn Culture\n          props.navigation.navigate(\"Home\");\n        } else {\n          setBanner(true);\n          setEditing(true);\n          setCulture(new Culture(cultureName, [], new Map(), Date.now()));\n        }\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token);\n      setCultureInPlace(culture);\n      setDirty(false);\n      navigation.setParams({\n        cultureName: cultureName,\n        dirty: false,\n        prevName: props.route.params.prevName,\n      });\n\n      if (props.route.params.prevName) {\n        try {\n          await Culture.delete(props.route.params.prevName, token);\n        } catch (err) {\n          setMsg(err.toString());\n        }\n      }\n    } catch (err) {\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setMsg(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  const onCardAction = (action: Action) => {\n    if (action === \"copy\") {\n      setMsg(\"Link copied!\");\n      return;\n    }\n\n    switch (action.type) {\n      case \"open\":\n        setMsg(`Opening ${action.link}`);\n        break;\n      case \"delete\":\n        setMsg(`Deleting ${action.summary}`);\n    }\n  };\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      const val = culture.specializedInsights.get(key);\n      val.splice(i, 1);\n\n      culture.specializedInsights.set(key, val);\n\n      if (val.length === 0) {\n        culture.specializedInsights.delete(key);\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"general\") {\n      case \"general\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"specialized\":\n        culture.specializedInsights.set(\"Specialized Insight\", [\n          ExampleInsight,\n        ]);\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights.set(key, [\n      ...culture.specializedInsights.get(key),\n      ExampleInsight,\n    ]);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onAction={onCardAction}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  return (\n    <View style={Styles.view}>\n      {token !== \"\" && (\n        <Banner\n          icon=\"alert\"\n          visible={banner}\n          actions={[{ label: \"Ok\", onPress: () => setBanner(false) }]}\n        >\n          {adminNewCultureBanner}\n        </Banner>\n      )}\n      <Tab.Navigator initialRouteName=\"general\">\n        <Tab.Screen name=\"general\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              insights={culture.generalInsights}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"specialized\">\n          {() => (\n            <Insights\n              insights={Array.from(culture.specializedInsights.entries())}\n              onRefresh={() => {\n                fetchCulture();\n                setDirty(false);\n              }}\n              renderItem={(row: {\n                item: [string, GeneralInsight[]];\n                index: number;\n              }) => {\n                const [title, insights] = row.item;\n                return (\n                  <List.Accordion title={title} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [title, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(title)}\n                        mode=\"contained\"\n                        style={Styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      {token !== \"\" && editing && (\n        <ToolsFAB onSave={() => updateCulture()} onAdd={addInsightOrCategory} />\n      )}\n      {token !== \"\" && !editing && (\n        <EditFAB onPress={() => setEditing(!editing)} />\n      )}\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={hideSnackbar}\n          action={{\n            label: \"Ok\",\n            onPress: hideSnackbar,\n          }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import Culture from \"./Culture\";\n\nexport default Culture;\n","import { Admin } from \"../lib\";\nimport { Store } from \".\";\n\nexport const USER_INITIAL_STATE = { user: { ...new Admin(\"\", \"\") }, token: \"\" };\n\nexport const userReducer = (\n  state = USER_INITIAL_STATE,\n  action: { type: string; payload: Store[\"user\"] }\n) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    case \"RESET_USER\":\n      return { ...USER_INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { Store } from \".\";\n\nexport const updateUser = (user: Store[\"user\"]) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n\nexport const resetUser = () => ({\n  type: \"RESET_USER\",\n  payload: {},\n});\n","import { Store } from \".\";\n\nexport const updateTheme = (theme: Store[\"theme\"]) => ({\n  type: \"UPDATE_THEME\",\n  payload: theme,\n});\n","import { combineReducers } from \"redux\";\n\nimport { USER_INITIAL_STATE, userReducer } from \"./UserReducer\";\nimport { THEME_INITIAL_STATE, themeReducer } from \"./ThemeReducer\";\nimport { updateUser, resetUser } from \"./UserAction\";\nimport { updateTheme } from \"./ThemeAction\";\n\nimport { ThemeType } from \"../theme\";\n\nexport const Reducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n});\n\nexport type Store = {\n  user: {\n    user: { name: string; email: string; superUser: boolean };\n    token: string;\n  };\n  theme: ThemeType;\n};\n\nexport {\n  USER_INITIAL_STATE,\n  THEME_INITIAL_STATE,\n  updateUser,\n  resetUser,\n  updateTheme,\n};\n","import { ThemeType } from \"../theme\";\n\nexport const THEME_INITIAL_STATE = \"Dark\";\n\nexport const themeReducer = (\n  state = THEME_INITIAL_STATE,\n  action: { type: string; payload: ThemeType }\n) => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import * as Yup from \"yup\";\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login\n * performs basic validation.\n */\nexport default Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\n// Used for {@link AsyncStorage} to store a user's email\n// locally on their device.\nconst RememberedEmail = \"@rememberedEmail\";\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email === undefined) {\n      try {\n        await Admin.recover(values.email);\n        setMsg(`Sent email to ${values.email}`);\n      } catch (err) {\n        console.error(\"Failed to send recovery email: \", err);\n        setMsg(err.toString());\n      }\n    } else {\n      setMsg(\"Account recovery requires a valid Email\");\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={Styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import Login from \"./Login\";\n\nexport default Login;\n","/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport default {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need this if you ever forget your password.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check that you know the password.\",\n};\n","import * as Yup from \"yup\";\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport default Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { TermsOfServiceURL } from \"../../constants\";\n\nimport RegisterHelpText from \"./explanationText\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [msg, setMsg] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={Styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import Register from \"./Register\";\n\nexport default Register;\n","export const TermsOfServiceURL = \"http://www.google.com\";\n\nexport const disclaimerURL = \"http://www.google.com\";\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  view: {\n    flex: 1,\n  },\n\n  inviteModal: {\n    padding: 20,\n    backgroundColor: \"white\",\n  },\n\n  list: {\n    flex: 1,\n  },\n});\n","import React from \"react\";\nimport { View, FlatList } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { ActivityIndicator, List, IconButton } from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\n\nimport { Culture, Ledger } from \"../../lib\";\n\nimport styles from \"./styles\";\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n  cultures: Culture[];\n  onRefresh: () => void;\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Cultures(props: CultureProps): React.ReactElement {\n  const { cultures, onRefresh, token } = props;\n\n  if (!cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const deleteCulture = async (culture: Culture) => {\n    try {\n      await Culture.delete(culture.name, token);\n    } catch (err) {\n      console.error(\"Failed to delete culture\", err);\n    }\n    onRefresh();\n  };\n\n  return (\n    <View>\n      <FlatList\n        data={cultures}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: item.name })\n              }\n              right={() => (\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  <IconButton\n                    icon=\"download\"\n                    onPress={() => Ledger.add(item.name)}\n                  />\n                  {token !== \"\" && (\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => deleteCulture(item)}\n                    />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import React from \"react\";\nimport { FlatList, Alert, View } from \"react-native\";\n\nimport { List, IconButton } from \"react-native-paper\";\n\nimport { Admin } from \"../../lib\";\n\n/**\n * Properties for {@link Admins}\n */\ntype AdminProps = {\n  token: string;\n  admins: Admin[];\n  // Refresh admins\n  onRefresh: () => void;\n};\n\n/**\n * Component that displays a list of components of {@link Admin}\n *\n * @param {AdminProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Admins(props: AdminProps): React.ReactElement {\n  const { token, admins, onRefresh } = props;\n\n  const onDelete = async (email: string) => {\n    try {\n      await Admin.delete(email, token);\n    } catch {\n      // show error message\n    }\n    onRefresh();\n  };\n\n  const onEdit = (user: {\n    email: string;\n    name: string;\n    superUser: boolean;\n  }) => {\n    //TODO: update Admin.update() params\n    try {\n      //Admin.update(email, token)\n      onRefresh();\n    } catch {\n      // show error message\n    }\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <FlatList\n        data={admins}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.email}\n              onPress={() => {\n                Alert.alert(\"user pressed\", item.name, [\n                  { text: \"OK\", onPress: () => console.log(\"OK Pressed\") },\n                ]);\n              }}\n              right={() =>\n                props.token !== \"\" && (\n                  <View style={{ flexDirection: \"row\" }}>\n                    <IconButton icon=\"pencil\" onPress={() => onEdit(item)} />\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => onDelete(item.email)}\n                    />\n                  </View>\n                )\n              }\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View, Platform, useWindowDimensions } from \"react-native\";\n\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport {\n  FAB,\n  Portal,\n  Modal,\n  Text,\n  ActivityIndicator,\n} from \"react-native-paper\";\n\nimport { Store } from \"../../redux\";\nimport { Admin, Culture } from \"../../lib\";\nimport { Routes } from \"../../routes\";\n\nimport Cultures from \"./Cultures\";\nimport Admins from \"./Admins\";\nimport styles from \"./styles\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const { token, route, navigation, user } = props;\n\n  const [cultures, setCultures] = useState(null);\n  const [admins, setAdmins] = useState(null);\n  const [inviteModal, setInviteModal] = useState(false);\n  const window = useWindowDimensions();\n  const safeArea = useSafeAreaInsets();\n\n  const fetchCultures = async () => {\n    let cultureNames = await Culture.list();\n    setCultures(cultureNames);\n  };\n\n  useEffect(() => {\n    fetchCultures();\n  }, []);\n\n  const fetchAdmins = async () => {\n    if (!props.token) {\n      return;\n    }\n\n    const admins = user.superUser ? await Admin.list(token) : [user];\n    setAdmins(admins);\n  };\n\n  useEffect(() => {\n    fetchAdmins();\n  }, []);\n\n  if (!token) {\n    return (\n      <Cultures\n        navigation={props.navigation}\n        token={\"\"}\n        cultures={cultures}\n        onRefresh={() => fetchCultures()}\n      />\n    );\n  }\n\n  const onAdd = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"Cultures\") {\n      case \"Cultures\":\n        setCultures([\n          ...cultures,\n          { name: \"New Culture\", modified: Date.now() },\n        ]);\n        break;\n      case \"Admins\":\n        setInviteModal(true);\n    }\n  };\n\n  const onInvite = async (email: string) => {\n    try {\n      await Admin.invite(email, token);\n    } catch (err) {\n      // show error message\n    }\n  };\n\n  if (!admins) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  const fabStyles = {\n    position: Platform.OS === \"web\" ? \"fixed\" : \"absolute\",\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  };\n\n  return (\n    <View style={styles.view}>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        <Tab.Screen name=\"Cultures\">\n          {() => (\n            <Cultures\n              navigation={navigation}\n              token={token}\n              cultures={cultures}\n              onRefresh={() => fetchCultures()}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Admins\">\n          {() => (\n            <Admins\n              token={token}\n              admins={admins}\n              onRefresh={() => fetchAdmins()}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <FAB icon=\"plus\" style={fabStyles as any} onPress={onAdd} />\n      <Portal>\n        <Modal visible={inviteModal} onDismiss={() => setInviteModal(false)}>\n          <Text>Example Modal. Click outside this area to dismiss.</Text>\n        </Modal>\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n  }),\n  null\n)(Home);\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Portal,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights.get(index[0])[index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n  const [cultureName, setCultureName] = useState<string>(culture.name);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights.get(key);\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        culture.specializedInsights.delete(key);\n        culture.specializedInsights.set(title, specialized);\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    // set dirty if any changes have been made.\n    const prevName = culture.name;\n    const dirty =\n      category !== title ||\n      summary !== insight.summary ||\n      info !== insight.information ||\n      srcData !== insight.source.data ||\n      srcType !== insight.source.type ||\n      cultureName !== prevName;\n\n    culture.name = cultureName;\n\n    props.navigation.navigate(\"Culture\", {\n      cultureName: culture.name,\n      prevName: prevName,\n      dirty: dirty,\n    });\n  };\n\n  return (\n    <SafeAreaView style={Styles.view}>\n      <TextInput\n        style={Styles.input}\n        value={cultureName}\n        placeholder=\"Culture Name\"\n        label=\"Culture Name\"\n        mode=\"outlined\"\n        onChangeText={(text) => setCultureName(text)}\n      />\n      {isSpecialized && (\n        <TextInput\n          style={Styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={Styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={Styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={Styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <Portal>\n        <FAB style={Styles.fab} icon=\"check\" onPress={updateCulture} />\n      </Portal>\n    </SafeAreaView>\n  );\n}\n","import EditInsight from \"./EditInsight\";\n\nexport default EditInsight;\n","import * as Yup from \"yup\";\n\nexport default Yup.object().shape({\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Snackbar,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\nimport { Admin } from \"../../lib\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Recovery\">;\n  route: RouteProp<Routes, \"Recovery\">;\n};\n\n/**\n * Recovery screen fields for Formik.\n */\ntype RecoveryFields = {\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Recovery fields for Formik.\n */\nconst initialValues: RecoveryFields = {\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  input: { margin: 5, padding: 15 },\n\n  title: { alignSelf: \"center\" },\n});\n\n/**\n * Recovery page for Admin account Recovery.\n *\n * @remark ONLY accessible from Email, navigating to this route normally should\n * never happen.\n *\n * @param {Props} props properties\n * @returns {React.ReactElement} React Component\n */\nexport default function Recovery(props: Props): React.ReactElement {\n  const { route, navigation } = props;\n  const email = route.params ? route.params.email : \"\";\n  const token = route.params ? route.params.token : \"\";\n\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n\n  // useRefs for Formik Validation\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => updateAccount(values),\n  });\n\n  const updateAccount = async (values: RecoveryFields) => {\n    try {\n      await Admin.updatePassword(\n        email,\n        values.password,\n        values.passwordConfirmation,\n        token\n      );\n      navigation.navigate(\"Login\");\n    } catch (err) {\n      setMsg(err.toString());\n      console.error(\"Failed to update account: \", err);\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <Title style={Styles.title}>Let's create a new password!</Title>\n      <View style={Styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <View style={Styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        {errors.passwordConfirmation && touched.passwordConfirmation && (\n          <HelperText type=\"error\">{errors.passwordConfirmation}</HelperText>\n        )}\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Recover\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n","import Recovery from \"./Recovery\";\n\nexport default Recovery;\n","import { DefaultTheme, DarkTheme } from \"react-native-paper\";\n\nexport const lightTheme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport const darkTheme = {\n  ...DarkTheme,\n  roundness: 2,\n  colors: {\n    ...DarkTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport type ThemeType = \"Dark\" | \"Light\";\n\n// Location for {@link AsyncStorage} to store theme\n// \"Light\" or \"Dark\"\nexport const ThemeStorage = \"@theme\";\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton } from \"react-native-paper\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Store, updateTheme } from \"../../redux\";\nimport { ThemeStorage, ThemeType } from \"../../theme\";\n\ntype Props = {\n  updateTheme: (type: ThemeType) => void;\n  theme: ThemeType;\n};\n\n/**\n * ThemeToggler toggle between Dark and Light Theme\n * when changed updates the Redux store and saves it to local storage.\n *\n * @param {Props} props\n *\n * @returns {React.ReactElement}\n */\nfunction ThemeToggler(props: Props): React.ReactElement {\n  const { updateTheme, theme } = props;\n\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(ThemeStorage)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      updateTheme(theme);\n    };\n\n    getTheme();\n  }, []);\n\n  const handleChange = async () => {\n    const newTheme = theme === \"Dark\" ? \"Light\" : \"Dark\";\n    updateTheme(newTheme);\n    try {\n      await AsyncStorage.setItem(ThemeStorage, newTheme);\n    } catch (err) {\n      console.log(\"failed to set theme\");\n    }\n  };\n\n  return (\n    <View>\n      <List.Item\n        title=\"Dark Theme\"\n        onPress={handleChange}\n        left={(props) => (\n          <IconButton {...props} icon=\"brightness-6\" onPress={handleChange} />\n        )}\n        right={(props) => (\n          <Checkbox\n            onPress={handleChange}\n            {...props}\n            status={theme === \"Dark\" ? \"checked\" : \"unchecked\"}\n          />\n        )}\n      />\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateTheme,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (state: Store) => ({ theme: state.theme }),\n  mapDispatchToProps\n)(ThemeToggler);\n","import React, { useState, useEffect } from \"react\";\nimport { View, FlatList, StyleSheet } from \"react-native\";\n\nimport { List, Button, IconButton } from \"react-native-paper\";\n// is importing Dayjs really worth it for something as simple as relative times?\n// Not sure, but it's the easiest thing to do and is well maintained.\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { Ledger } from \"../../lib\";\n\nconst Styles = StyleSheet.create({\n  // HACK: This is so that icons line up with other icons on the\n  // Settings page.\n  leftIcon: {\n    left: -5,\n  },\n});\n\ndayjs.extend(relativeTime);\n\ntype Props = {\n  // Callback fired when \"Update All\" is pressed.\n  onUpdateFinish: (err: string | null) => void;\n};\n\n/**\n * DownloadedCultures displays downloaded Cultures, allowing users to update all of them\n * or delete individual ones.\n *\n * @returns {React.ReactElement}\n */\nexport default function DownloadedCultures(props: Props): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [ledger, setLedger] = useState<Map<string, number>>(new Map());\n\n  const fetchLedger = async () => {\n    let ledger: Map<string, number>;\n    try {\n      ledger = await Ledger.list();\n    } catch (err) {\n      console.error(\"Failed to load ledger\", err);\n      return;\n    }\n\n    if (!ledger) {\n      return;\n    }\n\n    setLedger(ledger);\n  };\n\n  useEffect(() => {\n    fetchLedger();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLedger(new Map(ledger.entries()));\n    }, 60000);\n    return () => clearInterval(timer);\n  });\n\n  const ledgerArray = Array.from(ledger.entries());\n\n  const DownloadedCulture = (props: { item: [string, number] }) => {\n    const { item } = props;\n    const [name, modified] = item;\n\n    const remove = async (name: string) => {\n      ledger.delete(name);\n\n      try {\n        await Ledger.remove(name);\n      } catch (err) {\n        console.error(\"Failed to remove downloaded culture: \", err);\n        return;\n      }\n\n      setLedger(new Map(ledger.entries()));\n    };\n\n    return (\n      <List.Item\n        title={name}\n        description={`Last modified ${dayjs().to(dayjs.unix(modified))}`}\n        right={(props) => (\n          <IconButton {...props} icon=\"delete\" onPress={() => remove(name)} />\n        )}\n      />\n    );\n  };\n\n  const update = async () => {\n    try {\n      await Ledger.update();\n      fetchLedger();\n      props.onUpdateFinish(null);\n    } catch (err) {\n      props.onUpdateFinish(err.toString());\n      console.error(\"Failed to update downloaded cultures: \", err);\n    }\n  };\n\n  if (ledger.size === 0) {\n    return null;\n  }\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Downloaded Cultures\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"download\" style={Styles.leftIcon} />\n        )}\n      >\n        <FlatList\n          data={ledgerArray}\n          keyExtractor={(_, index: number) => index.toString()}\n          renderItem={DownloadedCulture}\n        />\n      </List.Accordion>\n      {expanded && (\n        <Button mode=\"contained\" onPress={() => update()}>\n          Update All\n        </Button>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { List, TextInput, Text, Button } from \"react-native-paper\";\n\nimport { Feedback as FeedbackSender } from \"../../lib\";\n\nconst Styles = StyleSheet.create({\n  leftIcon: {\n    left: -5,\n  },\n\n  input: {\n    padding: 20,\n  },\n\n  characterCounter: {\n    fontSize: 11,\n    right: 22,\n    position: \"absolute\",\n    bottom: 20,\n    paddingRight: 2,\n    paddingBottom: 2,\n  },\n\n  button: {\n    padding: 15,\n    margin: 10,\n  },\n});\n\nconst characterLimit = 300;\n\ntype state = \"sending\" | \"sent\" | \"failed\" | \"writing\";\n\nexport default function Feedback(): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [feedback, setFeedback] = useState(\"\");\n  const [state, setState] = useState<state>(\"writing\");\n\n  const handleInput = (text: string) => {\n    if (text.length > characterLimit) {\n      return;\n    }\n\n    setFeedback(text);\n  };\n\n  const sendFeedback = async () => {\n    if (feedback === \"\") {\n      return;\n    }\n\n    setState(\"sending\");\n    try {\n      await FeedbackSender.send(feedback);\n    } catch (err) {\n      setState(\"failed\");\n      return;\n    }\n\n    setState(\"sent\");\n  };\n\n  const reset = () => {\n    setState(\"writing\");\n    setFeedback(\"\");\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        left={(props) => (\n          <List.Icon\n            {...props}\n            style={Styles.leftIcon}\n            icon=\"message-reply-text\"\n          />\n        )}\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Feedback\"\n      >\n        {state === \"sent\" && (\n          <Button\n            icon=\"check\"\n            color=\"green\"\n            mode=\"contained\"\n            style={Styles.button}\n            onPress={reset}\n          >\n            Thank you\n          </Button>\n        )}\n        {state === \"failed\" && (\n          <Button\n            icon=\"alert\"\n            color=\"yellow\"\n            mode=\"contained\"\n            style={Styles.button}\n            onPress={() => setState(\"writing\")}\n          >\n            Try again later\n          </Button>\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <TextInput\n            style={Styles.input}\n            mode=\"outlined\"\n            multiline={true}\n            label=\"Where can we improve?\"\n            value={feedback}\n            onChangeText={handleInput}\n            numberOfLines={4}\n            right={\n              state === \"writing\" ? (\n                <TextInput.Icon name=\"send\" onPress={() => sendFeedback()} />\n              ) : (\n                <TextInput.Icon name=\"check\" />\n              )\n            }\n          />\n        )}\n        {(state === \"writing\" || state === \"sending\") && (\n          <Text\n            style={Styles.characterCounter}\n          >{`${feedback.length}/${characterLimit}`}</Text>\n        )}\n      </List.Accordion>\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { Checkbox, List, IconButton, Button } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Routes } from \"../../routes\";\n\ntype Props = {\n  token: string;\n  logout: () => void;\n  email: string;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n};\n\nconst Styles = StyleSheet.create({\n  // HACK: This is so that icons line up with other icons on the\n  // Settings page.\n  leftIcon: {\n    left: -5,\n  },\n});\n\n/**\n * AccountSettings displays Log in/Log out and whether or not to remember the user's email.\n *\n * @param {Props} props\n * @returns {React.ReactElement} React Component\n */\nexport default function AccountSettings(props: Props): React.ReactElement {\n  const { token, email, logout, navigation } = props;\n\n  const [expanded, setExpanded] = useState(false);\n  const [remember, setRemember] = useState(false);\n\n  useEffect(() => {\n    const getEmail = async () => {\n      let email: string;\n      try {\n        email = await AsyncStorage.getItem(\"@rememberedEmail\");\n      } catch (err) {\n        setRemember(false);\n        return;\n      }\n\n      if (email) {\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  const rememberEmail = async () => {\n    switch (remember) {\n      case true:\n        try {\n          await AsyncStorage.removeItem(\"@rememberedEmail\");\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(false);\n        break;\n      case false:\n        try {\n          await AsyncStorage.setItem(\"@rememberedEmail\", email);\n        } catch (err) {\n          setRemember(false);\n          return;\n        }\n\n        setRemember(true);\n    }\n  };\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Account\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"account\" style={Styles.leftIcon} />\n        )}\n      >\n        {token !== \"\" && (\n          <List.Item\n            title=\"Remember Email\"\n            onPress={() => rememberEmail()}\n            left={(props) => (\n              <IconButton\n                {...props}\n                icon=\"email\"\n                onPress={() => rememberEmail()}\n              />\n            )}\n            right={(props) => (\n              <Checkbox\n                onPress={() => rememberEmail()}\n                {...props}\n                status={remember ? \"checked\" : \"unchecked\"}\n              />\n            )}\n          />\n        )}\n      </List.Accordion>\n      {expanded && (\n        <View>\n          {!token ? (\n            <Button\n              icon=\"login\"\n              mode=\"contained\"\n              onPress={() => {\n                navigation.navigate(\"Login\");\n              }}\n            >\n              Log In\n            </Button>\n          ) : (\n            <Button\n              icon=\"logout\"\n              mode=\"contained\"\n              onPress={() => {\n                logout();\n                navigation.navigate(\"Home\");\n              }}\n            >\n              Log Out\n            </Button>\n          )}\n        </View>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { ScrollView, StyleSheet, Linking } from \"react-native\";\n\nimport {\n  Divider,\n  List,\n  IconButton,\n  Snackbar,\n  Portal,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { resetUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\n\nimport ThemeToggler from \"./ThemeToggler\";\nimport DownloadedCultures from \"./DownloadedCultures\";\nimport Feedback from \"./Feedback\";\nimport AccountSettings from \"./AccountSettings\";\nimport { disclaimerURL } from \"../../constants\";\n\n// HACK: This is so that icons line up with other icons on the\n// Settings page.\nconst Styles = StyleSheet.create({\n  rightIcon: {\n    right: -5,\n  },\n\n  leftIcon: {\n    left: -5,\n  },\n});\n\ntype Props = {\n  resetUser: () => void;\n  navigation: StackNavigationProp<Routes, \"Settings\">;\n  token: string;\n  email: string;\n};\n\n/**\n * Settings page displays downloaded cultures, disclaimer, and dark theme toggler.\n *\n * @returns {React.ReactElement}\n */\nfunction Settings(props: Props): React.ReactElement {\n  const { token, email, resetUser, navigation } = props;\n\n  const openLink = () => Linking.openURL(disclaimerURL);\n  const [msg, setMsg] = useState(\"\");\n\n  return (\n    <ScrollView>\n      <ThemeToggler />\n      <Divider />\n      <List.Item\n        title=\"Disclaimer\"\n        onPress={openLink}\n        left={(props) => (\n          <IconButton\n            {...props}\n            style={Styles.leftIcon}\n            onPress={openLink}\n            icon=\"file-document-outline\"\n          />\n        )}\n        right={(props) => (\n          <IconButton\n            {...props}\n            icon=\"eye\"\n            style={Styles.rightIcon}\n            onPress={openLink}\n          />\n        )}\n      />\n      <Divider />\n      <AccountSettings\n        email={email}\n        navigation={navigation}\n        token={token}\n        logout={resetUser}\n      />\n      <Divider />\n      <Feedback />\n      <Divider />\n      <DownloadedCultures\n        onUpdateFinish={(err) => setMsg(err || \"Update finished\")}\n      />\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </ScrollView>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      resetUser,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Settings\">;\n    }\n  ) => ({\n    token: state.user.token,\n    email: state.user.user.email,\n    navigation: ownProps.navigation,\n  }),\n  mapDispatchToProps\n)(Settings);\n","import Settings from \"./Settings\";\n\nexport default Settings;\n","import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { IconButton, Avatar, TouchableRipple } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\n\nimport { Store } from \"../redux\";\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  // name of Admin\n  name: string;\n  navigation: StackNavigationProp<\n    Routes,\n    \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n  >;\n};\n\nconst styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"center\" },\n  ripple: { marginRight: 15 },\n});\n\n/**\n * RightHeaderButton right header button displays '...' if not logged in\n * and an avatar if logged in. Allows the user to navigate to Settings page or log out.\n *\n * @param {Props} props\n * @returns {React.ReactElement}\n */\nfunction RightHeaderButton(props: Props): React.ReactElement {\n  const { name, navigation } = props;\n\n  return (\n    <View style={styles.view}>\n      {name === \"\" ? (\n        <IconButton\n          icon=\"dots-vertical\"\n          onPress={() => navigation.navigate(\"Settings\")}\n        />\n      ) : (\n        <TouchableRipple\n          style={styles.ripple}\n          onPress={() => navigation.navigate(\"Settings\")}\n        >\n          <Avatar.Text size={32} label={name[0]} />\n        </TouchableRipple>\n      )}\n    </View>\n  );\n}\n\nexport const HeaderButton = connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<\n        Routes,\n        \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n      >;\n    }\n  ) => ({\n    name: state.user.user.name,\n    navigation: ownProps.navigation,\n  }),\n  null\n)(RightHeaderButton);\n\nexport default ({ navigation }) => ({\n  headerRight: () => <HeaderButton navigation={navigation} />,\n});\n","import { Culture } from \"./lib\";\n\n/**\n * React Navigation Routes, for Mobile.\n *\n * Add type definitions and parameters for routes in {@link StackNavigator}\n */\nexport type Routes = {\n  /**\n   * Displays information about a culture, looking up information about that\n   * culture by provided prop {@link cultureName}.\n   *\n   * For admins it allows editing and adding information about a particular culture.\n   */\n  Culture: { cultureName: string; prevName?: string; dirty?: boolean };\n\n  /**\n   * Displays an interface to edit a {@link Culture} {@link GeneralInsight}\n   * and {@link SpecializedInsight}\n   *\n   * Admin **ONLY** route\n   */\n  EditInsight: { culture: Culture; index: number | [string, number] };\n\n  /**\n   * Displays Cultures allowing for downloads and seeing information\n   * about that culture and Admins.\n   *\n   * To see Admins must be logged in, to see others you need to\n   * be a superUser.\n   *\n   * Cultures can be deleted and edited.\n   */\n  Home: undefined;\n\n  /**\n   * Allows creation of a new admin account.\n   *\n   * @remark Route sent via email.\n   */\n  Register: { token: string };\n\n  /**\n   * Allows admin Login, Account recovery, and remembering the user's\n   * email between logins.\n   */\n  Login: undefined;\n\n  /**\n   * Allows Admin account recovery, requires the token and updates the Admin\n   * in the Api in order to update their password.\n   */\n  Recovery: { token: string; email: string };\n\n  /**\n   * Settings page displays downloaded cultures, dark theme, and disclaimer\n   * for application.\n   */\n  Settings: undefined;\n};\n\n/**\n * React Navigation links {@link Routes} to Web URLs.\n */\nexport const Linking = {\n  prefixes: [\"/\"],\n  config: {\n    screens: {\n      Home: \"/\",\n      Login: \"login\",\n      Register: \"register/:token\",\n      Recovery: \"recovery/:email/:token\",\n      Culture: {\n        path: \"culture/:cultureName\",\n        parse: {\n          cultureName: (cultureName: string) => decodeURI(cultureName),\n        },\n        screens: {\n          general: \"general\",\n          specialized: \"specialized\",\n        },\n      },\n      EditInsight: \"culture/edit/:culture/:index\",\n      Settings: \"settings\",\n    },\n  },\n};\n","import React, { useEffect } from \"react\";\n\nimport \"react-native-gesture-handler\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { connect } from \"react-redux\";\n\nimport {\n  NavigationContainer,\n  DarkTheme,\n  DefaultTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport {\n  Home,\n  Login,\n  Culture,\n  EditInsight,\n  Register,\n  Recovery,\n  Settings,\n  Header,\n  HeaderButton,\n} from \"./views\";\n\nimport { Routes, Linking } from \"./routes\";\nimport { lightTheme, darkTheme, ThemeStorage, ThemeType } from \"./theme\";\nimport { Reducer, updateTheme, Store } from \"./redux\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(ThemeStorage)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      store.dispatch(updateTheme(theme));\n    };\n\n    getTheme();\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <NavigatorScreen />\n    </Provider>\n  );\n}\n\ntype NavigatorProps = {\n  theme: ThemeType;\n};\n\n/**\n * Navigator contained inside of {@link App} manages navigation and theming.\n *\n * @remark This component isn't just inside of {@link App} because it needs to connect\n * to the Redux store in order to properly re-render when a change to the theme is done.\n *\n * @param {NavigatorProps} props\n * @returns {React.ReactElement}\n */\nfunction Navigator(props: NavigatorProps): React.ReactElement {\n  const { theme } = props;\n\n  const Stack = createStackNavigator<Routes>();\n\n  return (\n    <NavigationContainer\n      linking={Linking}\n      theme={theme === \"Dark\" ? DarkTheme : DefaultTheme}\n    >\n      <PaperProvider theme={theme === \"Dark\" ? darkTheme : lightTheme}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Culture\" component={Culture} options={Header} />\n          <Stack.Screen\n            name=\"Home\"\n            component={Home}\n            options={({ navigation }) => ({\n              headerRight: () => <HeaderButton navigation={navigation} />,\n              title: \"Cultural Awareness\",\n            })}\n          />\n          <Stack.Screen name=\"Login\" component={Login} />\n          <Stack.Screen name=\"Register\" component={Register} />\n          <Stack.Screen name=\"EditInsight\" component={EditInsight} />\n          <Stack.Screen name=\"Settings\" component={Settings} />\n          <Stack.Screen name=\"Recovery\" component={Recovery} />\n        </Stack.Navigator>\n      </PaperProvider>\n    </NavigationContainer>\n  );\n}\n\nconst NavigatorScreen = connect(\n  (state: Store) => ({\n    theme: state.theme,\n  }),\n  null\n)(Navigator);\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}