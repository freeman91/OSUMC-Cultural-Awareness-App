{"version":3,"sources":["frontend/views/Culture/style.ts","frontend/views/Culture/EditFab.tsx","frontend/views/Culture/InsightCard.tsx","frontend/views/Culture/Insights.tsx","frontend/views/Culture/ToolsFAB.tsx","frontend/lib/api.ts","frontend/lib/ledger.ts","frontend/lib/admin.ts","frontend/lib/culture.ts","frontend/views/Culture/Culture.tsx","frontend/views/Culture/index.ts","frontend/redux/UserReducer.ts","frontend/redux/UserAction.ts","frontend/redux/ThemeAction.ts","frontend/redux/index.ts","frontend/redux/ThemeReducer.ts","frontend/views/Login/validation.ts","frontend/views/Login/Login.tsx","frontend/views/Login/index.ts","frontend/views/Register/explanationText.ts","frontend/views/Register/validation.ts","frontend/views/Register/Register.tsx","frontend/views/Register/index.ts","frontend/constants.ts","frontend/views/Home/styles.ts","frontend/views/Home/Cultures.tsx","frontend/views/Home/Admins.tsx","frontend/views/Home/Home.tsx","frontend/views/Home/index.ts","frontend/views/EditInsight/EditInsight.tsx","frontend/views/EditInsight/index.ts","frontend/views/Recovery/validation.ts","frontend/views/Recovery/Recovery.tsx","frontend/views/Recovery/index.ts","frontend/theme.ts","frontend/views/Settings/ThemeToggler.tsx","frontend/views/Settings/DownloadedCultures.tsx","frontend/views/Settings/Settings.tsx","frontend/views/Settings/index.ts","frontend/views/Header.tsx","frontend/routes.ts","frontend/App.tsx"],"names":["StyleSheet","create","spinner","top","position","specialAddInsight","padding","marginVertical","marginHorizontal","card","fab","EditFAB","props","window","useWindowDimensions","safeArea","useSafeAreaInsets","styles","Styles","Platform","OS","height","bottom","FAB","Group","style","icon","open","onPress","visible","actions","onStateChange","InsightCard","insight","index","editing","useState","showMenu","setShowMenu","link","source","data","Card","Content","Title","summary","Paragraph","information","Actions","Linking","canOpenURL","Menu","onDismiss","anchor","IconButton","size","Item","title","Clipboard","setString","Divider","openURL","onDelete","Insights","insights","onRefresh","renderItem","refreshing","setRefreshing","ActivityIndicator","animating","refresh","SafeAreaView","FlatList","keyExtractor","_","toString","ToolsFAB","setOpen","onAdd","onSave","ApiError","reason","statusCode","Error","OfflineError","Api","endpoint","fetch","API_URL","encodeURI","method","headers","Accept","response","json","ok","status","token","Authorization","body","JSON","stringify","undefined","Admin","name","email","superUser","password","passwordConfirmation","put","this","password_confirmation","getAuth","post","res","delete","Culture","generalInsights","specializedInsights","modified","general_insights","specialized_insights","culture","get","Map","Object","entries","list","a","async","AsyncStorage","getItem","ledger","parse","saveLedger","cultures","forEach","val","key","setItem","add","info","compressed","Pako","to","set","updatedCultures","has","storedData","removeItem","Ledger","Tab","createMaterialTopTabNavigator","ExampleInsight","type","connect","state","ownProps","user","navigation","route","cultureName","params","setCulture","setEditing","msg","setMsg","useRoute","useEffect","setOptions","fetchCulture","setCultureInPlace","newCulture","read","console","error","navigate","hideSnackbar","deleteInsight","Array","i","splice","length","InsightCardView","View","Navigator","initialRouteName","Screen","row","item","from","Accordion","id","map","Button","push","mode","update","getFocusedRouteNameFromRoute","Snackbar","action","label","USER_INITIAL_STATE","updateUser","payload","resetUser","updateTheme","theme","Reducer","combineReducers","Yup","shape","required","initialValues","view","flex","justifyContent","margin","overflow","recover","Login","dispatch","bindActionCreators","remember","setRemember","obscurePass","SetObscurePass","useRef","useFormik","validationSchema","Validation","onSubmit","values","login","handleChange","handleBlur","errors","touched","handleSubmit","setFieldValue","validateField","getEmail","fields","CommonActions","reset","routes","TextInput","autoFocus","textContentType","left","Icon","ref","value","onBlur","onChangeText","HelperText","secureTextEntry","right","Checkbox","uppercase","min","max","matches","oneOf","color","fontWeight","Register","obscurePassConf","SetObscurePassConf","focused","setFocused","register","DisplayErrOrHelp","fieldName","RegisterHelpText","onFocus","Text","inviteModal","backgroundColor","Cultures","flexDirection","Admins","admins","Alert","alert","text","log","onEdit","Home","setCultures","setAdmins","setInviteModal","cultureNames","fetchCultures","fetchAdmins","fabStyles","Portal","Modal","input","paddingHorizontal","EditInsight","isSpecialized","category","setTitle","setSummary","setInfo","srcData","setSrcData","srcType","setSrcType","placeholder","numberOfLines","multiline","RadioButton","onValueChange","newInsight","specialized","alignSelf","Recovery","updateAccount","updatePassword","lightTheme","DefaultTheme","roundness","colors","primary","accent","darkTheme","DarkTheme","getTheme","newTheme","leftIcon","DownloadedCultures","expanded","setExpanded","setLedger","fetchLedger","timer","setInterval","clearInterval","ledgerArray","description","dayjs","unix","remove","onUpdateFinish","extend","relativeTime","rightIcon","Settings","openLink","err","HeaderButton","menu","setMenu","headerRight","prefixes","config","screens","path","decodeURI","general","store","createStore","NavigatorScreen","Stack","createStackNavigator","NavigationContainer","linking","component","options","Header","registerRootComponent"],"mappings":"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","file":"static/js/app.9efa0c0d.chunk.js","sourcesContent":["import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  specialAddInsight: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  card: {\n    padding: 10,\n    marginVertical: 5,\n    marginHorizontal: 5,\n  },\n\n  fab: {\n    // TODO: Emulate Fixed for the Floating Action Button\n  },\n});\n","import React from \"react\";\nimport { Platform, useWindowDimensions } from \"react-native\";\n\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\nimport { FAB } from \"react-native-paper\";\n\nimport Styles from \"./style\";\n\n/**\n * Properties for {@link EditFAB}\n */\ntype EditFABProps = {\n  // onPress handles when the FAB is pressed.\n  onPress: () => void;\n};\n\n/**\n * EditFAB displays a {@link FAB} that is labeled \"edit\" and has a pencil icon.\n *\n * @param {EditFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function EditFAB(props: EditFABProps): React.ReactElement {\n  const window = useWindowDimensions();\n  const safeArea = useSafeAreaInsets();\n\n  // HACK: In order to get the FAB to be positioned properly on both Web and Mobile.\n  //\n  // Web: use position: fixed.\n  // Mobile: useWindowDimensions hook, this doesn't work on Web.\n  const styles = {\n    ...Styles.fab,\n    position: Platform.OS === \"web\" ? \"fixed\" : \"relative\",\n  };\n\n  if (Platform.OS !== \"web\") {\n    styles[\"top\"] = window.height - safeArea.bottom;\n  }\n\n  return (\n    <FAB.Group\n      style={styles as any}\n      icon=\"pencil\"\n      open={false}\n      onPress={() => props.onPress()}\n      visible={true}\n      actions={[]}\n      onStateChange={() => props.onPress()}\n    />\n  );\n}\n","import React, { useState } from \"react\";\n\n// Clipboard is deprecated, but necessary because of incompatibility with Expo\n// See https://github.com/react-native-clipboard/clipboard/issues/71#issuecomment-701138494\nimport { Linking, Clipboard } from \"react-native\";\n\nimport {\n  Card,\n  IconButton,\n  Divider,\n  Paragraph,\n  Title,\n  Menu,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport Styles from \"./style\";\n\n/**\n * Properties for {@link InsightCard}\n */\ntype InsightCardProps = {\n  key: string;\n  // Insight to display on card\n  insight: GeneralInsight;\n  // editing whether the admin is editing the current page\n  editing: boolean;\n  // index in the list of General or Specialized lists\n  index: number | [string, number];\n  // callback to be used when an insight is deleted\n  onDelete: (index: number | [string, number]) => void;\n  // callback to be used when an insight is pressed\n  onPress: (index: number | [string, number]) => void;\n};\n\n/**\n * InsightCard card to display information about an Insight\n *\n * @param {InsightCardProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function InsightCard(\n  props: InsightCardProps\n): React.ReactElement {\n  const { insight, index, editing, onPress } = props;\n  const [showMenu, setShowMenu] = useState(false);\n  const link = insight.source.data;\n\n  return (\n    <Card style={Styles.card} onPress={() => editing && onPress(index)}>\n      <Card.Content>\n        <Title>{insight.summary}</Title>\n        <Paragraph>{insight.information}</Paragraph>\n      </Card.Content>\n      <Card.Actions>\n        {link && Linking.canOpenURL(link) && (\n          <Menu\n            visible={showMenu}\n            onDismiss={() => setShowMenu(false)}\n            anchor={\n              <IconButton\n                icon=\"link\"\n                size={20}\n                onPress={() => setShowMenu(true)}\n              />\n            }\n          >\n            <Menu.Item\n              title=\"Copy link\"\n              onPress={() => Clipboard.setString(link)}\n            />\n            <Divider />\n            <Menu.Item\n              title=\"Open link\"\n              onPress={() => Linking.openURL(link)}\n            />\n          </Menu>\n        )}\n        {editing && (\n          <IconButton\n            icon=\"delete\"\n            size={20}\n            onPress={() => props.onDelete(index)}\n          />\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport { FlatList, SafeAreaView } from \"react-native\";\n\nimport { ActivityIndicator } from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport Styles from \"./style\";\n\n/**\n * Properties for {@link Insights}\n */\ntype InsightProps = {\n  // callback called when the {@link FlatList} is refreshed\n  onRefresh: () => void;\n  // Insights to render\n  insights: [string, GeneralInsight[]][] | GeneralInsight[];\n  // how to render the insights\n  renderItem: ({ item: any }) => React.ReactElement;\n};\n\n/**\n * Component that displays a list of components of either {@link GeneralInsights}\n * or {{text: string, insights: GeneralInsight[]}[]}.\n *\n * @param {InsightProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Insights(props: InsightProps): React.ReactElement {\n  const { insights, onRefresh, renderItem } = props;\n  const [refreshing, setRefreshing] = useState(false);\n\n  if (!insights) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  const refresh = () => {\n    onRefresh();\n    setRefreshing(true);\n  };\n\n  return (\n    <SafeAreaView>\n      <FlatList\n        data={insights}\n        keyExtractor={(_, index) => index.toString()}\n        onRefresh={() => refresh()}\n        refreshing={refreshing}\n        renderItem={renderItem}\n      />\n    </SafeAreaView>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Platform, useWindowDimensions } from \"react-native\";\n\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\nimport { FAB } from \"react-native-paper\";\n\nimport Styles from \"./style\";\n\n/**\n * Properties for {@link ToolsFAB}\n */\ntype ToolsFABProps = {\n  // onSave function called when hitting the \"save\" button. This button should\n  // toggle the whether this FAB is being displayed.\n  onSave: () => void;\n  // onAdd function called when hitting the \"add\" button.\n  onAdd: () => void;\n};\n\n/**\n * ToolsFAB displays a {@link FAB.Group} that has two sub {@link FAB} one for editing and one for saving.\n *\n * @param {ToolsFABProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function ToolsFAB(props: ToolsFABProps): React.ReactElement {\n  const [open, setOpen] = useState(false);\n  const window = useWindowDimensions();\n  const safeArea = useSafeAreaInsets();\n\n  // HACK: In order to get the FAB to be positioned properly on both Web and Mobile.\n  //\n  // Web: use position: fixed.\n  // Mobile: useWindowDimensions hook, this doesn't work on Web.\n  let styles = {\n    ...Styles.fab,\n    position: Platform.OS === \"web\" ? \"fixed\" : \"relative\",\n  };\n\n  if (Platform.OS !== \"web\") {\n    styles[\"top\"] = window.height - safeArea.bottom;\n  }\n\n  return (\n    <FAB.Group\n      visible={true}\n      style={styles as any}\n      open={open}\n      icon={open ? \"close\" : \"wrench\"}\n      actions={[\n        { icon: \"plus\", onPress: () => props.onAdd() },\n        { icon: \"content-save\", onPress: () => props.onSave() },\n      ]}\n      onStateChange={() => setOpen(!open)}\n    />\n  );\n}\n","import { API_URL } from \"../../env.json\";\n\n/**\n * An ApiError returned from an {@link Api} method.\n */\nexport class ApiError extends Error {\n  /**\n   * constructor for ApiError.\n   *\n   * @param {string} reason\n   * @param {number} statusCode\n   */\n  constructor(public reason: string, public statusCode: number) {\n    super(reason);\n  }\n}\n\n/**\n * An OfflineError returned from an {@link Api} method.\n */\nexport class OfflineError extends Error {\n  /**\n   * constructor for OfflineError\n   */\n  constructor(public reason: string) {\n    super(`Offline: ${reason}`);\n  }\n}\n\n/**\n * @internal\n */\nexport class Api {\n  /**\n   * Perform a GET request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   *\n   * @returns {Promise<any>} JSON\n   */\n  static async get(endpoint: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a GET request on the API with authorization.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async getAuth(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a PUT request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  JSON payload\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async put(endpoint: string, body: {}, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a DELETE request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {string} token  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async delete(endpoint: string, token: string): Promise<any> {\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"DELETE\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    } catch (err) {\n      new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n\n  /**\n   * Perform a POST request on the API.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} endpoint  after `http://localhost:5000/v1/`\n   * @param {Object} body  Request Body\n   * @param {string} auth  JSON Web Token\n   * @returns {Promise<any>} JSON\n   */\n  static async post(endpoint: string, body: {}, token?: string): Promise<any> {\n    let headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    if (token !== undefined) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    let response: Response;\n    try {\n      response = await fetch(`${API_URL}${encodeURI(endpoint)}`, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(body),\n      });\n    } catch (err) {\n      throw new OfflineError(err);\n    }\n\n    let json = await response.json();\n    if (!response.ok) {\n      throw new ApiError(json[\"msg\"], response.status);\n    }\n\n    return json;\n  }\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Pako from \"pako\";\n\nimport { Culture } from \"./culture\";\n\n/**\n * Ledger - a JavaScript Object that stores all downloaded cultures and\n * the times they were last modified.\n *\n * The Ledger has many methods to modify, update, and remove culture's information\n * from storage.\n *\n * @remark\n * All methods will throw errors of many different types and should all be\n * reported to the User.\n *\n * {@link add} Add a Culture\n * {@link remove} Remove a Culture\n * {@link update} Update all Cultures\n * {@link list} List all Cultures in a Map<string, number>\n * {@link read} Read a {@link Culture} from storage\n */\nexport namespace Ledger {\n  const LOCATION: string = \"@ledger\";\n\n  /**\n   * Updates all stored culture's information if they're out of date.\n   *\n   * @remarks\n   * This operation is really expensive.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @throws network errors from {@link fetch}\n   * @throws zlib errors from {@link Pako}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   */\n  export async function update() {\n    const updatedCultures = await Culture.list();\n    let cultures = await list();\n\n    updatedCultures.forEach(\n      async (culture: { name: string; modified: number }) => {\n        const { name, modified } = culture;\n        if (cultures.has(name) && cultures.get(name) < modified) {\n          add(name);\n        }\n      }\n    );\n  }\n\n  /**\n   * List all downloaded cultures (keys) and their modified times (values)\n   * as a Map<string, number>.\n   *\n   * @throws storage failures from {@link AsyncStorage}\n   * @throws JSON errors from {@link JSON}\n   *\n   * @returns {Promise<Map<string, number>>}\n   */\n  export async function list(): Promise<Map<string, number>> {\n    const data = await AsyncStorage.getItem(LOCATION);\n    if (!data) {\n      return new Map();\n    }\n\n    let ledger = JSON.parse(data)[\"cultures\"];\n    return new Map(Object.entries(ledger));\n  }\n\n  /**\n   * Read a culture from {@link AsyncStorage}.\n   *\n   * @param {string} culture\n   *\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   *\n   * @returns {Promise<Culture>} culture read\n   */\n  export async function read(culture: string): Promise<Culture> {\n    const storedData = await AsyncStorage.getItem(culture);\n    const data: string = Pako.inflate(storedData, { to: \"string\" });\n    return JSON.parse(data);\n  }\n\n  /**\n   * saveLedger save the ledger to storage\n   *\n   * @param {Map} cultures to save\n   */\n  function saveLedger(cultures: Map<string, number>) {\n    let ledger = { cultures: {} };\n    cultures.forEach((val, key) => (ledger.cultures[key] = val));\n\n    AsyncStorage.setItem(LOCATION, JSON.stringify(ledger));\n  }\n\n  /**\n   * Add a culture to {@link AsyncStorage}\n   *\n   * @param {string} culture\n   *\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   * @throws JSON errors from {@link JSON}\n   * @throws storage failures from {@link AsyncStorage}\n   * @throw pako errors from {@link Pako}\n   */\n  export async function add(culture: string) {\n    const info = await Culture.get(culture);\n    const compressed = Pako.deflate(JSON.stringify(info), { to: \"string\" });\n    AsyncStorage.setItem(culture, compressed.toString());\n\n    let cultures = await list();\n    cultures.set(culture, info.modified);\n    saveLedger(cultures);\n  }\n\n  /**\n   * Remove a culture from {@link AsyncStorage}\n   *\n   * @remark\n   * Only removes a culture if it exists in the Ledger\n   *\n   * @param {string} culture to remove\n   */\n  export async function remove(culture: string) {\n    let cultures = await list();\n\n    if (cultures.has(culture)) {\n      AsyncStorage.removeItem(culture);\n    }\n\n    cultures.delete(culture);\n    saveLedger(cultures);\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Payload returned by {@link Admin.login} and {@link Admin.create}\n */\nexport type AuthPayload = {\n  user: Admin;\n  token: string;\n};\n\n/**\n * Administrator wrapper around fetch for interacting with API.\n */\nexport class Admin {\n  /**\n   * constructor for {@link Admin}.\n   *\n   * @throws EmailColonError - Email cannot contain a `:`\n   *\n   * @param {string} name\n   * @param {string} email\n   * @param {boolean} superUser\n   */\n  constructor(\n    public name: string,\n    public email: string,\n    public superUser: boolean = false\n  ) {}\n\n  /**\n   * get an {@link Admin} data.\n   *\n   * @param {string} token\n   * @param {string} email\n   * @returns {Promise<string[]>}\n   */\n  static async get(email: string, token: string): Promise<Admin> {\n    let json = await Api.getAuth(`/admins/${email}`, token);\n    return json;\n  }\n\n  /**\n   * login an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of Admin\n   * @param {string} password - password of Admin\n   * @returns {Promise<AuthPayload>} JWT token and Admin user information\n   */\n  static async login(email: string, password: string): Promise<AuthPayload> {\n    const json = await Api.post(\"/login\", { email: email, password: password });\n    return json;\n  }\n\n  /**\n   * list all {@link Admin} by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<string[]>}\n   */\n  static async list(token: string): Promise<string[]> {\n    let json = await Api.getAuth(\"/admins\", token);\n    return json[\"admins\"];\n  }\n\n  /**\n   * invite an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of future admin to invite\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async invite(email: string, token: string): Promise<void> {\n    await Api.post(\"/admins/invite\", { email: email }, token);\n  }\n\n  /**\n   * update an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  async update(\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${this.email}`,\n      {\n        email: this.email,\n        name: this.name,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * update an {@link Admin} only allowing them to update\n   * their password.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin\n   * @param {string} password - validate password\n   * @param {string} passwordConfirmation - MUST match passwordConfirmation\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async updatePassword(\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<void> {\n    await Api.put(\n      `/admins/${email}`,\n      {\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n  }\n\n  /**\n   * recover an {@link Admin} with their email.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - email of admin to recover\n   *\n   * @returns {Promise<string>} server response\n   */\n  static async recover(email: string): Promise<string> {\n    const res = await Api.post(\"/admins/recover\", { email: email });\n    return res[\"msg\"];\n  }\n\n  /**\n   * delete an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} email - of Admin to delete\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<void>}\n   */\n  static async delete(email: string, token: string): Promise<void> {\n    await Api.delete(`/admins/${email}`, token);\n  }\n\n  /**\n   * create an {@link Admin}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} password - password validation\n   * @param {string} passwordConfirmation - MUST match password\n   * @param {string} token - JSON Web Token\n   * @returns {Promise<AuthPayload>} contains JSON Web Token and user information\n   */\n  static async create(\n    name: string,\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    token: string\n  ): Promise<AuthPayload> {\n    const json = await Api.post(\n      \"/register\",\n      {\n        name: name,\n        email: email,\n        password: password,\n        password_confirmation: passwordConfirmation,\n      },\n      token\n    );\n\n    return json;\n  }\n}\n","import { Api } from \"./api\";\n\n/**\n * Represents a GeneralInsight used by {@link Culture}.\n *\n * fields:\n *   source: string\n *   text: string\n */\nexport type GeneralInsight = {\n  summary: string;\n  information: string;\n  source: { data: string; type: string };\n};\n\n/**\n * Represents a SpecializedInsight used by {@link Culture}.\n * A Map<string, GeneralInsight>.\n */\nexport type SpecializedInsight = Map<string, GeneralInsight[]>;\n\n/**\n * A Wrapper around {@link Api} for Culture.\n */\nexport class Culture {\n  /**\n   * constructor for {@link Culture}.\n   *\n   * @param {string} name\n   * @param {GeneralInsight[]} generalInsights\n   * @param {SpecializedInsight} specializedInsights\n   * @param {number} modified Epoch timestamp\n   */\n  constructor(\n    public name: string,\n    public generalInsights: GeneralInsight[],\n    public specializedInsights: SpecializedInsight,\n    public modified: number\n  ) {}\n\n  /**\n   * Get information about a {@link Culture}.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} name\n   * @returns {Promise<Culture>}\n   */\n  static async get(culture: string): Promise<Culture> {\n    let json = await Api.get(`/cultures/${culture}`);\n\n    const { name, general_insights, specialized_insights, modified } = json;\n\n    return new this(\n      name,\n      general_insights,\n      new Map(Object.entries(specialized_insights)),\n      modified\n    );\n  }\n\n  /**\n   * List all cultures by name.\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @returns {Promise<{ name: string; modified: number }[]>}\n   */\n  static async list(): Promise<{ name: string; modified: number }[]> {\n    let json = await Api.get(\"/cultures\");\n\n    return json[\"cultures\"];\n  }\n\n  /**\n   * Create a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async create(token: string): Promise<void> {\n    await Api.post(\n      \"/culture\",\n      {\n        name: this.name,\n        general_insights: this.generalInsights,\n        specialized_insights: this.specializedInsights,\n      },\n      token\n    );\n  }\n\n  /**\n   * Delete a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  static async delete(name: string, token: string): Promise<void> {\n    await Api.delete(`/cultures/${name}`, token);\n  }\n\n  /**\n   * Update a {@link Culture}\n   *\n   * @throws {@link ApiError}\n   * @throws {@link OfflineError}\n   *\n   * @param {string} token\n   * @returns {Promise<void>}\n   */\n  async update(token: string): Promise<void> {\n    const data = {\n      general_insights: this.generalInsights,\n      specialized_insights: this.specializedInsights,\n      name: this.name,\n    };\n\n    await Api.put(`/cultures/${this.name}`, data, token);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport {\n  getFocusedRouteNameFromRoute,\n  useRoute,\n} from \"@react-navigation/native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { connect } from \"react-redux\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { ActivityIndicator, List, Button, Snackbar } from \"react-native-paper\";\n\nimport EditFAB from \"./EditFab\";\nimport InsightCard from \"./InsightCard\";\nimport Insights from \"./Insights\";\nimport ToolsFAB from \"./ToolsFAB\";\nimport Styles from \"./style\";\n\nimport { Culture, GeneralInsight, SpecializedInsight, Ledger } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\nimport { Store } from \"../../redux\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Culture\">;\n  route: RouteProp<Routes, \"Culture\">;\n  token: string;\n};\n\ntype TabProps = {\n  general: { insights: GeneralInsight[] };\n  specialized: { insights: SpecializedInsight };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nconst ExampleInsight = {\n  summary: \"summary\",\n  information: \"information\",\n  source: { data: \"www.example.com\", type: \"link\" },\n};\n\n/**\n * CultureView displays information about a specific culture. The name of the culture\n * to query the API for is specified in `props.route.params`.\n *\n * Admin:\n *   This route allows editing and creating insights about the particular culture.\n *\n * @param: props: properties to pass to CultureView\n *\n * @returns React Element\n */\nfunction CultureView(props: Props): React.ReactElement {\n  const cultureName = props.route.params ? props.route.params.cultureName : \"\";\n  const token = props.token || \"\";\n\n  let [culture, setCulture] = useState<Culture | null>(null);\n  const [editing, setEditing] = useState<boolean>(false);\n  const [msg, setMsg] = useState<string>(\"\");\n  const route = useRoute();\n\n  useEffect(() => props.navigation.setOptions({ title: cultureName }), []);\n  useEffect(() => {\n    fetchCulture();\n  }, []);\n\n  /**\n   * Updates the Culture in place by calling `setCulture`.\n   *\n   * @param {Culture} culture to update CultureView with.\n   *\n   * HACK: As a result of how useState works it creates a new object and moves all the values over\n   * rather than something as simple as setCulture, this is because React checks differences of objects shallowly.\n   */\n  const setCultureInPlace = (culture: Culture) => {\n    const newCulture = new Culture(\n      culture.name,\n      culture.generalInsights,\n      culture.specializedInsights,\n      culture.modified\n    );\n\n    setCulture(newCulture);\n  };\n\n  /**\n   * Fetch culture information from Api or fallback to downloaded information\n   */\n  const fetchCulture = async (): Promise<void> => {\n    try {\n      const culture = await Culture.get(cultureName);\n      setCulture(culture);\n    } catch (err) {\n      // Offline, try reading from storage\n      try {\n        const culture = await Ledger.read(cultureName);\n        setCulture(culture);\n      } catch (err) {\n        console.error(err);\n        // TODO: Display Magical Unicorn Culture\n        props.navigation.navigate(\"Home\");\n      }\n    }\n  };\n\n  /**\n   * Update a culture's information in the Api\n   */\n  const updateCulture = async (): Promise<void> => {\n    try {\n      await culture.update(token);\n      setCultureInPlace(culture);\n    } catch (err) {\n      // TODO: better error messages\n      //\n      // Error messages currently are cryptic ie: \"Not Enough Segments\" -- referring to JWT.\n      setMsg(err.toString());\n      console.error(err);\n    }\n    setEditing(!editing);\n  };\n\n  const hideSnackbar = () => setMsg(\"\");\n\n  if (!culture) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={Styles.spinner} />\n    );\n  }\n\n  /**\n   * Delete an insight from a list\n   *\n   * @param {number | [string, number]} index of insight to delete\n   */\n  const deleteInsight = (index: number | [string, number]) => {\n    if (index instanceof Array) {\n      const [key, i] = index;\n      culture.specializedInsights[key].splice(i, 1);\n\n      if (culture.specializedInsights[key].length === 0) {\n        delete culture.specializedInsights[key];\n      }\n    } else {\n      culture.generalInsights.splice(index, 1);\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Add an insight to either the General or Specialized tab\n   */\n  const addInsightOrCategory = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"general\") {\n      case \"general\":\n        culture.generalInsights.push(ExampleInsight);\n        break;\n      case \"specialized\":\n        culture.specializedInsights[\"Specialized Insight\"] = [ExampleInsight];\n        break;\n    }\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * addSpecializedInsight adds an insight to a category of SpecializedInsight\n   *\n   * @param {string} key of specializedInsight\n   */\n  const addSpecializedInsight = (key: string) => {\n    culture.specializedInsights[key].push(ExampleInsight);\n\n    setCultureInPlace(culture);\n  };\n\n  /**\n   * Renders a InsightCard\n   *\n   * @param {GeneralInsight} insight to render\n   * @param {number | [string, number]} index of insight\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const InsightCardView = (\n    insight: GeneralInsight,\n    index: number | [string, number]\n  ): React.ReactElement => {\n    return (\n      <InsightCard\n        key={`insight-card-${index.toString()}`}\n        index={index}\n        editing={editing}\n        insight={insight}\n        onPress={(index) =>\n          props.navigation.navigate(\"EditInsight\", {\n            culture: culture,\n            index: index,\n          })\n        }\n        onDelete={deleteInsight}\n      />\n    );\n  };\n\n  return (\n    <View>\n      <Tab.Navigator initialRouteName=\"general\">\n        <Tab.Screen name=\"general\">\n          {() => (\n            <Insights\n              renderItem={(row: { item: GeneralInsight; index: number }) =>\n                InsightCardView(row.item, row.index)\n              }\n              onRefresh={() => fetchCulture()}\n              insights={culture.generalInsights}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"specialized\">\n          {() => (\n            <Insights\n              insights={Array.from(culture.specializedInsights.entries())}\n              onRefresh={() => fetchCulture()}\n              renderItem={(row: {\n                item: [string, GeneralInsight[]];\n                index: number;\n              }) => {\n                const [title, insights] = row.item;\n                return (\n                  <List.Accordion title={title} id={row.index}>\n                    {insights.map((item: GeneralInsight, index: number) =>\n                      InsightCardView(item, [title, index])\n                    )}\n                    {editing && (\n                      <Button\n                        icon=\"plus\"\n                        onPress={() => addSpecializedInsight(title)}\n                        mode=\"contained\"\n                        style={Styles.specialAddInsight}\n                      >\n                        {\"\"}\n                      </Button>\n                    )}\n                  </List.Accordion>\n                );\n              }}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      {token !== \"\" && (\n        <View>\n          {editing ? (\n            <ToolsFAB\n              onSave={() => updateCulture()}\n              onAdd={addInsightOrCategory}\n            />\n          ) : (\n            <EditFAB onPress={() => setEditing(!editing)} />\n          )}\n        </View>\n      )}\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={hideSnackbar}\n        action={{\n          label: \"Hide\",\n          onPress: hideSnackbar,\n        }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Culture\">;\n      route: RouteProp<Routes, \"Culture\">;\n    }\n  ) => ({\n    token: state.user.token,\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n  }),\n  null\n)(CultureView);\n","import Culture from \"./Culture\";\n\nexport default Culture;\n","import { Admin } from \"../lib\";\nimport { Store } from \".\";\n\nexport const USER_INITIAL_STATE = { user: { ...new Admin(\"\", \"\") }, token: \"\" };\n\nexport const userReducer = (\n  state = USER_INITIAL_STATE,\n  action: { type: string; payload: Store[\"user\"] }\n) => {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return { ...action.payload };\n    case \"RESET_USER\":\n      return { ...USER_INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { Store } from \".\";\n\nexport const updateUser = (user: Store[\"user\"]) => ({\n  type: \"UPDATE_USER\",\n  payload: user,\n});\n\nexport const resetUser = () => ({\n  type: \"RESET_USER\",\n  payload: {},\n});\n","import { Store } from \".\";\n\nexport const updateTheme = (theme: Store[\"theme\"]) => ({\n  type: \"UPDATE_THEME\",\n  payload: theme,\n});\n","import { combineReducers } from \"redux\";\n\nimport { USER_INITIAL_STATE, userReducer } from \"./UserReducer\";\nimport { THEME_INITIAL_STATE, themeReducer } from \"./ThemeReducer\";\nimport { updateUser, resetUser } from \"./UserAction\";\nimport { updateTheme } from \"./ThemeAction\";\n\nimport { ThemeType } from \"../theme\";\n\nexport const Reducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n});\n\nexport type Store = {\n  user: {\n    user: { name: string; email: string; superUser: boolean };\n    token: string;\n  };\n  theme: ThemeType;\n};\n\nexport {\n  USER_INITIAL_STATE,\n  THEME_INITIAL_STATE,\n  updateUser,\n  resetUser,\n  updateTheme,\n};\n","import { ThemeType } from \"../theme\";\n\nexport const THEME_INITIAL_STATE = \"Dark\";\n\nexport const themeReducer = (\n  state = THEME_INITIAL_STATE,\n  action: { type: string; payload: ThemeType }\n) => {\n  switch (action.type) {\n    case \"UPDATE_THEME\":\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import * as Yup from \"yup\";\n\n/**\n * Login Validation Schema, a Yup Schema for basic validation for Login\n * performs basic validation.\n */\nexport default Yup.object().shape({\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must be provided\n  password: Yup.string().required(\"Required\"),\n});\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Checkbox,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Login\">;\n  route: RouteProp<Routes, \"Login\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Login screen fields for Formik.\n */\ntype LoginFields = {\n  email: string;\n  password: string;\n};\n\n/**\n * Initial values for Login fields for Formik.\n */\nconst initialValues: LoginFields = {\n  // This field could be updated with useEffect to enter the user's saved email address.\n  email: \"\",\n  password: \"\",\n};\n\n// Used for {@link AsyncStorage} to store a user's email\n// locally on their device.\nconst RememberedEmail = \"@rememberedEmail\";\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n\n  recover: {\n    position: \"absolute\",\n    bottom: 5,\n  },\n});\n\n/**\n * Screen for logging in an Admin\n *\n * @param {Props} props - properties for Login screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Login(props: Props): React.ReactElement {\n  const [remember, setRemember] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n\n  // useRefs for Formik Validation\n  const email = useRef();\n  const password = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n    setFieldValue,\n    validateField,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => login(values),\n  });\n\n  useEffect(() => {\n    const getEmail = async () => {\n      const email = await AsyncStorage.getItem(RememberedEmail);\n      if (email) {\n        setFieldValue(\"email\", email);\n        setRemember(true);\n      }\n    };\n\n    getEmail();\n  }, []);\n\n  /**\n   * login performs Api Login operation.\n   *\n   * Response:\n   *   valid credentials:\n   *     1. login\n   *     2. get token\n   *     3. Save Email if user selected \"Remember Me\"\n   *     4. redirect to \"Home\"\n   *   invalid: display Snackbar\n   *\n   * @param {LoginFields} values currently stored in the form\n   */\n  const login = async (fields: LoginFields) => {\n    const { email, password } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.login(email, password);\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    try {\n      if (remember) {\n        await AsyncStorage.setItem(RememberedEmail, email);\n      } else {\n        await AsyncStorage.removeItem(RememberedEmail);\n      }\n    } catch (err) {\n      console.error(\"Failed to set Remembered Email\", err);\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * recoverAccount checks to see if the provided Email is valid\n   * if it is send recovery email. Otherwise, display Snackbar.\n   */\n  const recoverAccount = async () => {\n    await validateField(\"email\");\n    if (errors.email === undefined) {\n      try {\n        await Admin.recover(values.email);\n        setMsg(`Sent email to ${values.email}`);\n      } catch (err) {\n        console.error(\"Failed to send recovery email: \", err);\n        setMsg(err.toString());\n      }\n    } else {\n      setMsg(\"Account recovery requires a valid Email\");\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onBlur={handleBlur(\"email\")}\n          onChangeText={handleChange(\"email\")}\n        />\n        {errors.email && touched.email && (\n          <HelperText type=\"error\">{errors.email}</HelperText>\n        )}\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <Checkbox.Item\n        label=\"Remember me\"\n        status={remember ? \"checked\" : \"unchecked\"}\n        onPress={() => setRemember(!remember)}\n      />\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Log In\n      </Button>\n      <Button\n        style={Styles.recover}\n        mode=\"text\"\n        onPress={recoverAccount}\n        uppercase={false}\n      >\n        Trouble logging in?\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import Login from \"./Login\";\n\nexport default Login;\n","/**\n * HelpText to displayed when a field is focused\n * in the {@link Register} screen\n */\nexport default {\n  name:\n    \"This is how other administrators will see you. You can always change this later.\",\n  email: \"You'll need this if you ever forget your password.\",\n  password:\n    \"Strong passwords include a mix of lower case letters, uppercase letters, numbers, and special characters.\",\n  passwordConfirmation: \"Double check that you know the password.\",\n};\n","import * as Yup from \"yup\";\n\n/**\n * Register Validation Schema, a Yup Schema for basic validation\n * for Account Registration.\n */\nexport default Yup.object().shape({\n  // Name must be provided and be at least 2 characters\n  // up to 64 characters in length.\n  name: Yup.string()\n    .min(2, \"Too short\")\n    .max(64, \"Too long\")\n    .required(\"Required\"),\n  // Email must be provided and be a valid email.\n  email: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, Linking } from \"react-native\";\nimport {\n  Button,\n  TextInput,\n  HelperText,\n  Snackbar,\n  Text,\n} from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\n\nimport { Admin, AuthPayload } from \"../../lib\";\nimport { updateUser, Store } from \"../../redux\";\nimport { Routes } from \"../../routes\";\nimport { TermsOfServiceURL } from \"../../constants\";\n\nimport RegisterHelpText from \"./explanationText\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Register\">;\n  route: RouteProp<Routes, \"Register\">;\n  updateUser: (user: Store[\"user\"]) => void;\n};\n\n/**\n * Register screen fields for Formik.\n */\ntype RegisterFields = {\n  name: string;\n  email: string;\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Register fields for Formik.\n */\nconst initialValues: RegisterFields = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst Styles = StyleSheet.create({\n  view: {\n    flex: 1,\n    justifyContent: \"space-evenly\",\n    margin: 15,\n    overflow: \"hidden\",\n  },\n  link: {\n    color: \"blue\",\n    fontWeight: \"bold\",\n  },\n});\n\ntype Focusable = \"name\" | \"email\" | \"password\" | \"passwordConfirmation\" | null;\n\n/**\n * Screen for registering an Admin\n *\n * @param {Props} props - properties for Register screen\n *\n * @returns {React.ReactElement} React Component\n */\nfunction Register(props: Props): React.ReactElement {\n  const token = props.route.params ? props.route.params.token : \"\";\n\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n  const [msg, setMsg] = useState(\"\");\n  const [focused, setFocused] = useState<Focusable>(\"email\");\n\n  const name = useRef();\n  const email = useRef();\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => register(values),\n  });\n\n  /**\n   * Registers an Admin\n   *\n   * @param {RegisterFields} fields - input fields\n   */\n  const register = async (fields: RegisterFields) => {\n    const { name, email, password, passwordConfirmation } = fields;\n    const { navigation, updateUser } = props;\n\n    let res: AuthPayload;\n    try {\n      res = await Admin.create(\n        name,\n        email,\n        password,\n        passwordConfirmation,\n        token\n      );\n    } catch (err) {\n      setMsg(err.toString());\n      return;\n    }\n\n    updateUser(res);\n\n    navigation.dispatch(\n      CommonActions.reset({ index: 1, routes: [{ name: \"Home\" }] })\n    );\n  };\n\n  /**\n   * Helper Text displays for {@link TextInput} if the field\n   * has an error then the error is showed. If it is focused without error information about the field is shown.\n   *\n   * @param {{fieldName: Focusable}} props - name of field\n   *\n   * @returns {React.ReactElement} React Component\n   */\n  const DisplayErrOrHelp = (props: {\n    fieldName: Focusable;\n  }): React.ReactElement => {\n    const { fieldName } = props;\n\n    if (focused !== fieldName && (!errors[fieldName] || !touched[fieldName])) {\n      return null;\n    }\n\n    if (errors[fieldName] && touched[fieldName]) {\n      return <HelperText type=\"error\">{errors[fieldName]}</HelperText>;\n    } else {\n      return <HelperText type=\"info\">{RegisterHelpText[fieldName]}</HelperText>;\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <View>\n        <TextInput\n          autoFocus={true}\n          textContentType=\"emailAddress\"\n          onFocus={() => setFocused(\"email\")}\n          mode=\"outlined\"\n          error={errors.email && touched.email}\n          left={<TextInput.Icon name=\"email\" />}\n          label=\"email\"\n          ref={email}\n          value={values.email}\n          onChangeText={handleChange(\"email\")}\n          onBlur={handleBlur(\"email\")}\n        />\n        <DisplayErrOrHelp fieldName=\"email\" />\n      </View>\n      <View>\n        <TextInput\n          textContentType=\"name\"\n          onFocus={() => setFocused(\"name\")}\n          mode=\"outlined\"\n          error={errors.name && touched.name}\n          left={<TextInput.Icon name=\"account\" />}\n          label=\"name\"\n          ref={name}\n          value={values.name}\n          onChangeText={handleChange(\"name\")}\n          onBlur={handleBlur(\"name\")}\n        />\n        <DisplayErrOrHelp fieldName=\"name\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          onFocus={() => setFocused(\"password\")}\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"password\" />\n      </View>\n      <View>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          onFocus={() => setFocused(\"passwordConfirmation\")}\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        <DisplayErrOrHelp fieldName=\"passwordConfirmation\" />\n      </View>\n      <View>\n        <Text>\n          By clicking Register, you are indicating that you have read and\n          acknowledged the\n          <Text\n            onPress={() => Linking.openURL(TermsOfServiceURL)}\n            style={Styles.link}\n          >\n            {\" \"}\n            Terms of Service\n          </Text>\n          .\n        </Text>\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Register\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateUser,\n    },\n    dispatch\n  );\n\nexport default connect(null, mapDispatchToProps)(Register);\n","import Register from \"./Register\";\n\nexport default Register;\n","export const TermsOfServiceURL = \"http://www.google.com\";\n\nexport const disclaimerURL = \"http://www.google.com\";\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  spinner: { top: \"50%\", position: \"relative\" },\n\n  view: {\n    flex: 1,\n  },\n\n  inviteModal: {\n    padding: 20,\n    backgroundColor: \"white\",\n  },\n\n  list: {\n    flex: 1,\n  },\n});\n","import React from \"react\";\nimport { View, FlatList } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { ActivityIndicator, List, IconButton } from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\n\nimport { Culture, Ledger } from \"../../lib\";\n\nimport styles from \"./styles\";\n\n/**\n * Properties for {@link Cultures}\n */\ntype CultureProps = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  token: string;\n  cultures: Culture[];\n};\n\n/**\n * Component that displays a list of components of either {@link Cultures}\n *\n * @param {CultureProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Cultures(props: CultureProps): React.ReactElement {\n  if (!props.cultures) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  return (\n    <View>\n      <FlatList\n        data={props.cultures}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.name}\n              onPress={() =>\n                props.navigation.navigate(\"Culture\", { cultureName: item.name })\n              }\n              right={() => (\n                <View\n                  style={{\n                    flex: 1,\n                    flexDirection: \"row\",\n                    justifyContent: \"flex-end\",\n                  }}\n                >\n                  <IconButton\n                    icon=\"download\"\n                    onPress={() => Ledger.add(item.name)}\n                  />\n                  {props.token !== \"\" && (\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => Culture.delete(item.name, props.token)}\n                    />\n                  )}\n                </View>\n              )}\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import React from \"react\";\nimport { FlatList, Alert, View } from \"react-native\";\n\nimport { List, IconButton } from \"react-native-paper\";\n\nimport { Admin } from \"../../lib\";\n\n/**\n * Properties for {@link Admins}\n */\ntype AdminProps = {\n  token: string;\n  admins: Admin[];\n  // Refresh admins\n  onRefresh: () => void;\n};\n\n/**\n * Component that displays a list of components of {@link Admin}\n *\n * @param {AdminProps} props\n * @returns {React.ReactElement} React component\n */\nexport default function Admins(props: AdminProps): React.ReactElement {\n  const { token, admins, onRefresh } = props;\n\n  const onDelete = async (email: string) => {\n    try {\n      await Admin.delete(email, token);\n    } catch {\n      // show error message\n    }\n    onRefresh();\n  };\n\n  const onEdit = (user: {\n    email: string;\n    name: string;\n    superUser: boolean;\n  }) => {\n    //TODO: update Admin.update() params\n    try {\n      //Admin.update(email, token)\n      onRefresh();\n    } catch {\n      // show error message\n    }\n  };\n\n  return (\n    <View>\n      <FlatList\n        style={{ flex: 1 }}\n        data={admins}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <List.Item\n              title={item.email}\n              onPress={() => {\n                Alert.alert(\"user pressed\", item.name, [\n                  { text: \"OK\", onPress: () => console.log(\"OK Pressed\") },\n                ]);\n              }}\n              right={() =>\n                props.token !== \"\" && (\n                  <View style={{ flexDirection: \"row\" }}>\n                    <IconButton icon=\"pencil\" onPress={() => onEdit(item)} />\n                    <IconButton\n                      icon=\"delete\"\n                      onPress={() => onDelete(item.email)}\n                    />\n                  </View>\n                )\n              }\n            />\n          );\n        }}\n      />\n    </View>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { View, Platform, useWindowDimensions } from \"react-native\";\n\nimport { connect } from \"react-redux\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { createMaterialTopTabNavigator } from \"@react-navigation/material-top-tabs\";\nimport { getFocusedRouteNameFromRoute } from \"@react-navigation/native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport {\n  FAB,\n  Portal,\n  Modal,\n  Text,\n  ActivityIndicator,\n} from \"react-native-paper\";\n\nimport { Store } from \"../../redux\";\nimport { Admin, Culture } from \"../../lib\";\nimport { Routes } from \"../../routes\";\n\nimport Cultures from \"./Cultures\";\nimport Admins from \"./Admins\";\nimport styles from \"./styles\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Home\">;\n  route: RouteProp<Routes, \"Home\">;\n  user: Admin;\n  token: string;\n};\n\ntype TabProps = {\n  Cultures: { cultures: Culture[] };\n  Admins: { admins: Admin[] };\n};\n\nconst Tab = createMaterialTopTabNavigator<TabProps>();\n\nfunction Home(props: Props): React.ReactElement {\n  const { token, route, navigation, user } = props;\n\n  const [cultures, setCultures] = useState(null);\n  const [admins, setAdmins] = useState(null);\n  const [inviteModal, setInviteModal] = useState(false);\n  const window = useWindowDimensions();\n  const safeArea = useSafeAreaInsets();\n\n  useEffect(() => {\n    const fetchCultures = async () => {\n      let cultureNames = await Culture.list();\n      setCultures(cultureNames);\n    };\n\n    fetchCultures();\n  }, []);\n\n  const fetchAdmins = async () => {\n    if (!props.token) {\n      return;\n    }\n\n    const admins = user.superUser ? await Admin.list(token) : [user];\n    setAdmins(admins);\n  };\n\n  useEffect(() => {\n    fetchAdmins();\n  }, []);\n\n  if (!token) {\n    return (\n      <Cultures navigation={props.navigation} token={\"\"} cultures={cultures} />\n    );\n  }\n\n  const onAdd = () => {\n    switch (getFocusedRouteNameFromRoute(route) ?? \"Cultures\") {\n      case \"Cultures\":\n        setCultures([...cultures, \"Culture\"]);\n        break;\n      case \"Admins\":\n        setInviteModal(true);\n    }\n  };\n\n  const onInvite = async (email: string) => {\n    try {\n      await Admin.invite(email, token);\n    } catch (err) {\n      // show error message\n    }\n  };\n\n  if (!admins) {\n    return (\n      <ActivityIndicator animating={true} size=\"large\" style={styles.spinner} />\n    );\n  }\n\n  // HACK: In order to get the FAB to be positioned properly on both Web and Mobile.\n  //\n  // Web: use position: fixed.\n  // Mobile: useWindowDimensions hook, this doesn't work on Web.\n  const fabStyles = {\n    margin: 16,\n    right: 0,\n    position: Platform.OS === \"web\" ? \"fixed\" : \"absolute\",\n  };\n\n  if (Platform.OS !== \"web\") {\n    fabStyles[\"top\"] = window.height - safeArea.bottom;\n  } else {\n    fabStyles[\"bottom\"] = 0;\n  }\n\n  return (\n    <View>\n      <Tab.Navigator initialRouteName=\"Cultures\">\n        <Tab.Screen name=\"Cultures\">\n          {() => (\n            <Cultures\n              navigation={navigation}\n              token={token}\n              cultures={cultures}\n            />\n          )}\n        </Tab.Screen>\n        <Tab.Screen name=\"Admins\">\n          {() => (\n            <Admins\n              token={token}\n              admins={admins}\n              onRefresh={() => fetchAdmins()}\n            />\n          )}\n        </Tab.Screen>\n      </Tab.Navigator>\n      <FAB icon=\"plus\" style={fabStyles as any} onPress={onAdd} />\n      <Portal>\n        <Modal visible={inviteModal} onDismiss={() => setInviteModal(false)}>\n          <Text>Example Modal. Click outside this area to dismiss.</Text>\n        </Modal>\n      </Portal>\n    </View>\n  );\n}\n\nexport default connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<Routes, \"Home\">;\n      route: RouteProp<Routes, \"Home\">;\n    }\n  ) => ({\n    navigation: ownProps.navigation,\n    route: ownProps.route,\n    user: state.user.user,\n    token: state.user.token,\n  }),\n  null\n)(Home);\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { StyleSheet, SafeAreaView } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport {\n  FAB,\n  TextInput,\n  Divider,\n  RadioButton,\n  Title,\n} from \"react-native-paper\";\n\nimport { GeneralInsight } from \"../../lib\";\n\nimport { Routes } from \"../../routes\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"EditInsight\">;\n  route: RouteProp<Routes, \"EditInsight\">;\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  fab: { position: \"absolute\", bottom: 0, right: 0, margin: 16 },\n\n  input: {\n    paddingHorizontal: 10,\n    margin: 5,\n  },\n});\n\n/**\n * EditInsight displays information for a particular insight and allows editing it.\n * Upon hitting the {@link FAB} it will bring the user back to {@Link CultureView}\n * in order to save the changes to the database.\n *\n * Admin:\n *   Admin ONLY screen\n *\n * @param {Props} props: properties to pass to {@link EditInsight}\n *\n * @returns {React.ReactElement} React Element\n */\nexport default function EditInsight(props: Props): React.ReactElement {\n  const index = props.route.params.index;\n  let { culture } = props.route.params;\n\n  const isSpecialized: boolean = index instanceof Array;\n\n  const insight: GeneralInsight =\n    index instanceof Array\n      ? culture.specializedInsights[index[0]][index[1]]\n      : culture.generalInsights[index];\n  const category: string = index instanceof Array ? index[0] : \"\";\n\n  useEffect(() => props.navigation.setOptions({ title: insight.summary }), []);\n\n  const [title, setTitle] = useState<string>(category);\n  const [summary, setSummary] = useState<string>(insight.summary);\n  const [info, setInfo] = useState<string>(insight.information);\n  const [srcData, setSrcData] = useState<string>(insight.source.data);\n  const [srcType, setSrcType] = useState<string>(insight.source.type);\n\n  /**\n   * updateCulture updates the Culture's insight for either Specialized or General\n   * screens.\n   */\n  const updateCulture = () => {\n    const newInsight = {\n      summary: summary,\n      information: info,\n      source: {\n        data: srcData,\n        type: srcType,\n      },\n    };\n\n    if (index instanceof Array) {\n      const [key, i] = index;\n\n      let specialized = culture.specializedInsights[key];\n      specialized[i] = newInsight;\n\n      if (title !== index[0]) {\n        delete culture.specializedInsights[key];\n        culture.specializedInsights[title] = specialized;\n      }\n    } else {\n      culture.generalInsights[index] = newInsight;\n    }\n\n    props.navigation.navigate(\"Culture\", { cultureName: culture.name });\n  };\n\n  return (\n    <SafeAreaView style={Styles.view}>\n      {isSpecialized && (\n        <TextInput\n          style={Styles.input}\n          value={title}\n          placeholder=\"Title\"\n          label=\"Title\"\n          mode=\"outlined\"\n          onChangeText={(text) => setTitle(text)}\n        />\n      )}\n      {isSpecialized && <Divider />}\n      <TextInput\n        style={Styles.input}\n        value={summary}\n        placeholder=\"Summary\"\n        label=\"Summary\"\n        mode=\"outlined\"\n        left={<TextInput.Icon name=\"text-short\" />}\n        onChangeText={(text) => setSummary(text)}\n      />\n      <TextInput\n        style={Styles.input}\n        value={info}\n        mode=\"outlined\"\n        placeholder=\"Description\"\n        label=\"Description\"\n        left={<TextInput.Icon name=\"text-subject\" />}\n        numberOfLines={5}\n        onChangeText={(text) => setInfo(text)}\n        multiline={true}\n      />\n      <Divider />\n      <Title style={{ margin: 10 }}>Source Type</Title>\n      <RadioButton.Group\n        onValueChange={(value) => setSrcType(value)}\n        value={srcType}\n      >\n        <RadioButton.Item label=\"Link\" value=\"link\" />\n      </RadioButton.Group>\n      <Divider />\n      <TextInput\n        style={Styles.input}\n        value={srcData}\n        label=\"Source\"\n        placeholder=\"Source Information\"\n        left={<TextInput.Icon name=\"book\" />}\n        mode=\"outlined\"\n        onChangeText={(text) => setSrcData(text)}\n      />\n      <FAB style={Styles.fab} icon=\"check\" onPress={updateCulture} />\n    </SafeAreaView>\n  );\n}\n","import EditInsight from \"./EditInsight\";\n\nexport default EditInsight;\n","import * as Yup from \"yup\";\n\nexport default Yup.object().shape({\n  // Password must contain a lowercase, uppercase, one number, and a special character.\n  // Be at least 8 characters long and 64 maximum.\n  password: Yup.string()\n    .required(\"Required\")\n    .min(8, \"Must be at least 8 characters\")\n    .max(64, \"Too long\")\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]/,\n      \"Must contain at least one uppercase letter, one lowercase letter, one number and one special character\"\n    ),\n  // Password Confirmation must match Password\n  passwordConfirmation: Yup.string()\n    .required(\"Required\")\n    .oneOf([Yup.ref(\"password\"), null], \"Must match password\"),\n});\n","import React, { useState, useRef } from \"react\";\nimport { View, StyleSheet } from \"react-native\";\n\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useFormik } from \"formik\";\nimport {\n  Title,\n  Button,\n  TextInput,\n  Snackbar,\n  HelperText,\n} from \"react-native-paper\";\n\nimport { Routes } from \"../../routes\";\nimport { Admin } from \"../../lib\";\nimport Validation from \"./validation\";\n\ntype Props = {\n  navigation: StackNavigationProp<Routes, \"Recovery\">;\n  route: RouteProp<Routes, \"Recovery\">;\n};\n\n/**\n * Recovery screen fields for Formik.\n */\ntype RecoveryFields = {\n  password: string;\n  passwordConfirmation: string;\n};\n\n/**\n * Initial values for Recovery fields for Formik.\n */\nconst initialValues: RecoveryFields = {\n  password: \"\",\n  passwordConfirmation: \"\",\n};\n\nconst Styles = StyleSheet.create({\n  view: { flex: 1, justifyContent: \"space-evenly\", overflow: \"hidden\" },\n\n  input: { margin: 5, padding: 15 },\n\n  title: { alignSelf: \"center\" },\n});\n\n/**\n * Recovery page for Admin account Recovery.\n *\n * @remark ONLY accessible from Email, navigating to this route normally should\n * never happen.\n *\n * @param {Props} props properties\n * @returns {React.ReactElement} React Component\n */\nexport default function Recovery(props: Props): React.ReactElement {\n  const { route, navigation } = props;\n  const email = route.params ? route.params.email : \"\";\n  const token = route.params ? route.params.token : \"\";\n\n  const [msg, setMsg] = useState(\"\");\n  const [obscurePass, SetObscurePass] = useState(true);\n  const [obscurePassConf, SetObscurePassConf] = useState(true);\n\n  // useRefs for Formik Validation\n  const password = useRef();\n  const passwordConfirmation = useRef();\n\n  const {\n    values,\n    handleChange,\n    handleBlur,\n    errors,\n    touched,\n    handleSubmit,\n  } = useFormik({\n    validationSchema: Validation,\n    initialValues: initialValues,\n    onSubmit: (values) => updateAccount(values),\n  });\n\n  const updateAccount = async (values: RecoveryFields) => {\n    try {\n      await Admin.updatePassword(\n        email,\n        values.password,\n        values.passwordConfirmation,\n        token\n      );\n      navigation.navigate(\"Login\");\n    } catch (err) {\n      setMsg(err.toString());\n      console.error(\"Failed to update account: \", err);\n    }\n  };\n\n  return (\n    <View style={Styles.view}>\n      <Title style={Styles.title}>Let's create a new password!</Title>\n      <View style={Styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password\"\n          ref={password}\n          left={<TextInput.Icon name=\"lock\" />}\n          secureTextEntry={obscurePass}\n          error={errors.password && touched.password}\n          onBlur={handleBlur(\"password\")}\n          value={values.password}\n          onChangeText={handleChange(\"password\")}\n          right={\n            <TextInput.Icon\n              name={obscurePass ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePass(!obscurePass)}\n            />\n          }\n        />\n        {errors.password && touched.password && (\n          <HelperText type=\"error\">{errors.password}</HelperText>\n        )}\n      </View>\n      <View style={Styles.input}>\n        <TextInput\n          mode=\"outlined\"\n          label=\"password confirmation\"\n          ref={passwordConfirmation}\n          left={<TextInput.Icon name=\"shield-lock\" />}\n          secureTextEntry={obscurePassConf}\n          error={errors.passwordConfirmation && touched.passwordConfirmation}\n          onBlur={handleBlur(\"passwordConfirmation\")}\n          value={values.passwordConfirmation}\n          onChangeText={handleChange(\"passwordConfirmation\")}\n          right={\n            <TextInput.Icon\n              name={obscurePassConf ? \"eye\" : \"eye-off\"}\n              onPress={() => SetObscurePassConf(!obscurePassConf)}\n            />\n          }\n        />\n        {errors.passwordConfirmation && touched.passwordConfirmation && (\n          <HelperText type=\"error\">{errors.passwordConfirmation}</HelperText>\n        )}\n      </View>\n      <Button mode=\"contained\" onPress={handleSubmit}>\n        Recover\n      </Button>\n      <Snackbar\n        visible={msg !== \"\"}\n        onDismiss={() => setMsg(\"\")}\n        action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n      >\n        {msg}\n      </Snackbar>\n    </View>\n  );\n}\n","import Recovery from \"./Recovery\";\n\nexport default Recovery;\n","import { DefaultTheme, DarkTheme } from \"react-native-paper\";\n\nexport const lightTheme = {\n  ...DefaultTheme,\n  roundness: 2,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport const darkTheme = {\n  ...DarkTheme,\n  roundness: 2,\n  colors: {\n    ...DarkTheme.colors,\n    primary: \"#1e88e5\",\n    accent: \"#1e88e5\",\n  },\n};\n\nexport type ThemeType = \"Dark\" | \"Light\";\n\n// Location for {@link AsyncStorage} to store theme\n// \"Light\" or \"Dark\"\nexport const ThemeStorage = \"@theme\";\n","import React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Checkbox, List, IconButton } from \"react-native-paper\";\nimport { bindActionCreators, Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Store, updateTheme } from \"../../redux\";\nimport { ThemeStorage, ThemeType } from \"../../theme\";\n\ntype Props = {\n  updateTheme: (type: ThemeType) => void;\n  theme: ThemeType;\n};\n\n/**\n * ThemeToggler toggle between Dark and Light Theme\n * when changed updates the Redux store and saves it to local storage.\n *\n * @param {Props} props\n *\n * @returns {React.ReactElement}\n */\nfunction ThemeToggler(props: Props): React.ReactElement {\n  const { updateTheme, theme } = props;\n\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(ThemeStorage)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      updateTheme(theme);\n    };\n\n    getTheme();\n  }, []);\n\n  const handleChange = async () => {\n    const newTheme = theme === \"Dark\" ? \"Light\" : \"Dark\";\n    updateTheme(newTheme);\n    try {\n      await AsyncStorage.setItem(ThemeStorage, newTheme);\n    } catch (err) {\n      console.log(\"failed to set theme\");\n    }\n  };\n\n  return (\n    <View>\n      <List.Item\n        title=\"Dark Theme\"\n        onPress={handleChange}\n        left={(props) => (\n          <IconButton {...props} icon=\"brightness-6\" onPress={handleChange} />\n        )}\n        right={(props) => (\n          <Checkbox\n            onPress={handleChange}\n            {...props}\n            status={theme === \"Dark\" ? \"checked\" : \"unchecked\"}\n          />\n        )}\n      />\n    </View>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      updateTheme,\n    },\n    dispatch\n  );\n\nexport default connect(\n  (state: Store) => ({ theme: state.theme }),\n  mapDispatchToProps\n)(ThemeToggler);\n","import React, { useState, useEffect } from \"react\";\nimport { View, FlatList, StyleSheet } from \"react-native\";\n\nimport { List, Button, IconButton } from \"react-native-paper\";\n// is importing Dayjs really worth it for something as simple as relative times?\n// Not sure, but it's the easiest thing to do and is well maintained.\nimport dayjs from \"dayjs\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\nimport { Ledger } from \"../../lib\";\n\nconst Styles = StyleSheet.create({\n  // HACK: This is so that icons line up with other icons on the\n  // Settings page.\n  leftIcon: {\n    left: -5,\n  },\n});\n\ndayjs.extend(relativeTime);\n\ntype Props = {\n  // Callback fired when \"Update All\" is pressed.\n  onUpdateFinish: (err: string | null) => void;\n};\n\n/**\n * DownloadedCultures displays downloaded Cultures, allowing users to update all of them\n * or delete individual ones.\n *\n * @returns {React.ReactElement}\n */\nexport default function DownloadedCultures(props: Props): React.ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [ledger, setLedger] = useState<Map<string, number>>(new Map());\n\n  const fetchLedger = async () => {\n    let ledger: Map<string, number>;\n    try {\n      ledger = await Ledger.list();\n    } catch (err) {\n      console.error(\"Failed to load ledger\", err);\n      return;\n    }\n\n    if (!ledger) {\n      return;\n    }\n\n    setLedger(ledger);\n  };\n\n  useEffect(() => {\n    fetchLedger();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setLedger(new Map(ledger.entries()));\n    }, 60000);\n    return () => clearInterval(timer);\n  });\n\n  const ledgerArray = Array.from(ledger.entries());\n\n  const DownloadedCulture = (props: { item: [string, number] }) => {\n    const { item } = props;\n    const [name, modified] = item;\n\n    const remove = async (name: string) => {\n      ledger.delete(name);\n\n      try {\n        await Ledger.remove(name);\n      } catch (err) {\n        console.error(\"Failed to remove downloaded culture: \", err);\n        return;\n      }\n\n      setLedger(new Map(ledger.entries()));\n    };\n\n    return (\n      <List.Item\n        title={name}\n        description={`Last modified ${dayjs().to(dayjs.unix(modified))}`}\n        right={(props) => (\n          <IconButton {...props} icon=\"delete\" onPress={() => remove(name)} />\n        )}\n      />\n    );\n  };\n\n  const update = async () => {\n    try {\n      await Ledger.update();\n      fetchLedger();\n      props.onUpdateFinish(null);\n    } catch (err) {\n      props.onUpdateFinish(err.toString());\n      console.error(\"Failed to update downloaded cultures: \", err);\n    }\n  };\n\n  if (ledger.size === 0) {\n    return null;\n  }\n\n  return (\n    <View>\n      <List.Accordion\n        expanded={expanded}\n        onPress={() => setExpanded(!expanded)}\n        title=\"Downloaded Cultures\"\n        left={(props) => (\n          <List.Icon {...props} icon=\"download\" style={Styles.leftIcon} />\n        )}\n      >\n        <FlatList\n          data={ledgerArray}\n          keyExtractor={(_, index: number) => index.toString()}\n          renderItem={DownloadedCulture}\n        />\n      </List.Accordion>\n      {expanded && (\n        <Button mode=\"contained\" onPress={() => update()}>\n          Update All\n        </Button>\n      )}\n    </View>\n  );\n}\n","import React, { useState } from \"react\";\nimport { View, StyleSheet, Linking } from \"react-native\";\n\nimport {\n  Divider,\n  List,\n  IconButton,\n  Snackbar,\n  Portal,\n} from \"react-native-paper\";\n\nimport ThemeToggler from \"./ThemeToggler\";\nimport DownloadedCultures from \"./DownloadedCultures\";\nimport { disclaimerURL } from \"../../constants\";\n\n// HACK: This is so that icons line up with other icons on the\n// Settings page.\nconst Styles = StyleSheet.create({\n  rightIcon: {\n    right: -5,\n  },\n\n  leftIcon: {\n    left: -5,\n  },\n});\n\n/**\n * Settings page displays downloaded cultures, disclaimer, and dark theme toggler.\n *\n * @returns {React.ReactElement}\n */\nexport default function Settings(): React.ReactElement {\n  const openLink = () => Linking.openURL(disclaimerURL);\n  const [msg, setMsg] = useState(\"\");\n\n  return (\n    <View>\n      <ThemeToggler />\n      <Divider />\n      <List.Item\n        title=\"Disclaimer\"\n        onPress={openLink}\n        left={(props) => (\n          <IconButton\n            {...props}\n            style={Styles.leftIcon}\n            onPress={openLink}\n            icon=\"file-document-outline\"\n          />\n        )}\n        right={(props) => (\n          <IconButton\n            {...props}\n            icon=\"eye\"\n            style={Styles.rightIcon}\n            onPress={openLink}\n          />\n        )}\n      />\n      <Divider />\n      <DownloadedCultures\n        onUpdateFinish={(err) => setMsg(err || \"Update finished\")}\n      />\n      <Portal>\n        <Snackbar\n          visible={msg !== \"\"}\n          onDismiss={() => setMsg(\"\")}\n          action={{ label: \"Ok\", onPress: () => setMsg(\"\") }}\n        >\n          {msg}\n        </Snackbar>\n      </Portal>\n    </View>\n  );\n}\n","import Settings from \"./Settings\";\n\nexport default Settings;\n","import React, { useState } from \"react\";\n\nimport { IconButton, Avatar, Button, Menu } from \"react-native-paper\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators, Dispatch } from \"redux\";\n\nimport { resetUser, Store } from \"../redux\";\nimport { Routes } from \"../routes\";\n\ntype Props = {\n  // name of Admin\n  name: string;\n  navigation: StackNavigationProp<\n    Routes,\n    \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n  >;\n  // Redux action in order to reset the User\n  resetUser: () => void;\n};\n\n/**\n * RightHeaderButton right header button displays '...' if not logged in\n * and an avatar if logged in. Allows the user to navigate to Settings page or log out.\n *\n * @param {Props} props\n * @returns {React.ReactElement}\n */\nfunction RightHeaderButton(props: Props): React.ReactElement {\n  const { name, navigation, resetUser } = props;\n\n  const [menu, setMenu] = useState(false);\n\n  return (\n    <Menu\n      visible={menu}\n      onDismiss={() => setMenu(false)}\n      anchor={\n        name === \"\" ? (\n          <IconButton icon=\"dots-vertical\" onPress={() => setMenu(true)} />\n        ) : (\n          <Button onPress={() => setMenu(true)}>\n            <Avatar.Text size={32} label={name[0]} />\n          </Button>\n        )\n      }\n    >\n      <Menu.Item\n        onPress={() => {\n          navigation.navigate(\"Settings\");\n          setMenu(false);\n        }}\n        title=\"Settings\"\n      />\n      {name === \"\" ? (\n        <Menu.Item\n          title=\"Log in\"\n          onPress={() => {\n            navigation.navigate(\"Login\");\n            setMenu(false);\n          }}\n        />\n      ) : (\n        <Menu.Item\n          onPress={() => {\n            resetUser();\n            navigation.navigate(\"Home\");\n            setMenu(false);\n          }}\n          title=\"Log out\"\n        />\n      )}\n    </Menu>\n  );\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      resetUser,\n    },\n    dispatch\n  );\n\nconst HeaderButton = connect(\n  (\n    state: Store,\n    ownProps: {\n      navigation: StackNavigationProp<\n        Routes,\n        \"Culture\" | \"Home\" | \"Settings\" | \"Login\" | \"Register\"\n      >;\n    }\n  ) => ({\n    name: state.user.user.name,\n    navigation: ownProps.navigation,\n  }),\n  mapDispatchToProps\n)(RightHeaderButton);\n\nexport default ({ navigation }) => ({\n  headerRight: () => <HeaderButton navigation={navigation} />,\n});\n","import { Culture } from \"./lib\";\n\n/**\n * React Navigation Routes, for Mobile.\n *\n * Add type definitions and parameters for routes in {@link StackNavigator}\n */\nexport type Routes = {\n  /**\n   * Displays information about a culture, looking up information about that\n   * culture by provided prop {@link cultureName}.\n   *\n   * For admins it allows editing and adding information about a particular culture.\n   */\n  Culture: { cultureName: string };\n\n  /**\n   * Displays an interface to edit a {@link Culture} {@link GeneralInsight}\n   * and {@link SpecializedInsight}\n   *\n   * Admin **ONLY** route\n   */\n  EditInsight: { culture: Culture; index: number | [string, number] };\n\n  /**\n   * Displays Cultures allowing for downloads and seeing information\n   * about that culture and Admins.\n   *\n   * To see Admins must be logged in, to see others you need to\n   * be a superUser.\n   *\n   * Cultures can be deleted and edited.\n   */\n  Home: undefined;\n\n  /**\n   * Allows creation of a new admin account.\n   *\n   * @remark Route sent via email.\n   */\n  Register: { token: string };\n\n  /**\n   * Allows admin Login, Account recovery, and remembering the user's\n   * email between logins.\n   */\n  Login: undefined;\n\n  /**\n   * Allows Admin account recovery, requires the token and updates the Admin\n   * in the Api in order to update their password.\n   */\n  Recovery: { token: string; email: string };\n\n  /**\n   * Settings page displays downloaded cultures, dark theme, and disclaimer\n   * for application.\n   */\n  Settings: undefined;\n};\n\n/**\n * React Navigation links {@link Routes} to Web URLs.\n */\nexport const Linking = {\n  prefixes: [\"/\"],\n  config: {\n    screens: {\n      Home: \"/\",\n      Login: \"login\",\n      Register: \"register/:token\",\n      Recovery: \"recovery/:email/:token\",\n      Culture: {\n        path: \"culture/:cultureName\",\n        parse: {\n          cultureName: (cultureName: string) => decodeURI(cultureName),\n        },\n        screens: {\n          general: \"general\",\n          specialized: \"specialized\",\n        },\n      },\n      EditInsight: \"culture/edit/:culture/:index\",\n      Settings: \"settings\",\n    },\n  },\n};\n","import React, { useEffect } from \"react\";\n\nimport \"react-native-gesture-handler\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { connect } from \"react-redux\";\n\nimport {\n  NavigationContainer,\n  DarkTheme,\n  DefaultTheme,\n} from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { registerRootComponent } from \"expo\";\n\nimport {\n  Home,\n  Login,\n  Culture,\n  EditInsight,\n  Register,\n  Recovery,\n  Settings,\n  Header,\n} from \"./views\";\n\nimport { Routes, Linking } from \"./routes\";\nimport { lightTheme, darkTheme, ThemeStorage, ThemeType } from \"./theme\";\nimport { Reducer, updateTheme, Store } from \"./redux\";\n\nconst store = createStore(Reducer);\n\nfunction App() {\n  useEffect(() => {\n    const getTheme = async () => {\n      let theme: ThemeType;\n      try {\n        theme = (await AsyncStorage.getItem(ThemeStorage)) as ThemeType;\n      } catch (err) {\n        theme = \"Light\";\n      }\n\n      if (!theme) {\n        theme = \"Light\";\n      }\n\n      store.dispatch(updateTheme(theme));\n    };\n\n    getTheme();\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <NavigatorScreen />\n    </Provider>\n  );\n}\n\ntype NavigatorProps = {\n  theme: ThemeType;\n};\n\n/**\n * Navigator contained inside of {@link App} manages navigation and theming.\n *\n * @remark This component isn't just inside of {@link App} because it needs to connect\n * to the Redux store in order to properly re-render when a change to the theme is done.\n *\n * @param {NavigatorProps} props\n * @returns {React.ReactElement}\n */\nfunction Navigator(props: NavigatorProps): React.ReactElement {\n  const { theme } = props;\n\n  const Stack = createStackNavigator<Routes>();\n\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer\n        linking={Linking}\n        theme={theme === \"Dark\" ? DarkTheme : DefaultTheme}\n      >\n        <PaperProvider theme={theme === \"Dark\" ? darkTheme : lightTheme}>\n          <Stack.Navigator initialRouteName=\"Home\">\n            <Stack.Screen name=\"Culture\" component={Culture} options={Header} />\n            <Stack.Screen name=\"Home\" component={Home} options={Header} />\n            <Stack.Screen name=\"Login\" component={Login} />\n            <Stack.Screen name=\"Register\" component={Register} />\n            <Stack.Screen name=\"EditInsight\" component={EditInsight} />\n            <Stack.Screen name=\"Settings\" component={Settings} />\n            <Stack.Screen name=\"Recovery\" component={Recovery} />\n          </Stack.Navigator>\n        </PaperProvider>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nconst NavigatorScreen = connect(\n  (state: Store) => ({\n    theme: state.theme,\n  }),\n  null\n)(Navigator);\n\nexport default registerRootComponent(App);\n"],"sourceRoot":""}